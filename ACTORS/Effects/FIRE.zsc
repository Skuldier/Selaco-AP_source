class FireActor : SELACOACTOR
{
    bool allowFireSound;

    // How often should the effect loop before checking if the player is nearby?
    int loopsTillCheck;
    bool dawnIsNear;
    int damageRange;
    bool allowSound;
    default {
        +NOBLOODDECALS;
        +NOBLOOD;
        +BLOODLESSIMPACT
        -BLOODSPLATTER
        +NOINTERACTION
        +SelacoActor.IgnoreArmor
        Alpha 1.0;
        SelacoActor.SleepDistance 5000;
        renderstyle "translucent";
        damagetype "Fire";
        radius 3;
        Scale 0.02;
    }

    override void beginPlay()
    {
        super.beginPlay();
        allowFireSound = validateFireSound();
    }

    override void postBeginPlay()
    {
        super.postbeginPlay();
        if(args[3] == 0)
        {
            damageRange = 30;
        } else
        {
            damageRange = args[3];
        }
		if(!!(SpawnFlags & MTF_DORMANT))
		{
			setStateLabel("DoNothing");
		}
    }


    bool validateFireSound()
    {
        if(args[4] == 1)
        {
            return false;
        }
		ThinkerIterator it = ThinkerIterator.Create("FireActor");
		FireActor fireActor = FireActor(it.Next());
		for (; fireActor; fireActor = FireActor(it.Next())) 
		{
			if(fireActor.allowFireSound && Distance2DSquared(fireActor) <= 150*150)
				return false;
		}
        return true;
    }

    override void tick() {
        super.tick();
        if(level.time % 3 == 0)
        {
            A_EXPLODE(90, damageRange);
            //spawnSmoke();
        }
    }

	override void activate(actor deactivator)
	{
		setStateLabel("spawn");
	}

	States
	{
        Spawn:
            TNT1 A 0;
            FLM1 A random(1,6);
            TNT1 A 0 {
                if(args[0] == 0) {
                    A_SetScale(scale.x+frandom(0.5,0.6));
                } else {
                    A_SetScale(scale.x+frandom(0.04*args[0], 0.04*args[1]));
                }   
            }
        CheckEffects:
            TNT1 A 0 
            {
                if(allowFireSound)
                {
                    A_Playsound("fire/loop", CHAN_5, 0.3, 1);
                }
            }
        SpawnFire:
            TNT1 A 0 {
                loopsTillCheck--;
                if(loopsTillCheck == 0) {
                    loopsTillCheck = 0;
                    setStateLabel("CheckDawnDistance");
                }
            }
            // I got lazy shut up
            TNT1 A 0 A_JUMP(256, "sprite1", "sprite2", "sprite3", "sprite4", "sprite5", "sprite6", "sprite7");
        sprite1:
            FLM1 ABCDEFGHIJK 1 bright;
        sprite2:
            FLM1 LMNOPQRST 1 BRIGHT;
        sprite3:
            FLM1 UVWXYZ 1 BRIGHT;
        sprite4:
            FLM2 ABCDEFGHIJ 1 BRIGHT;
        sprite5:
            FLM2 KLMNOPQR 1 BRIGHT;
        sprite6:
            FLM2 STUVWXYZ 1 BRIGHT;
        sprite7:
            FLM3 ABCDEFGH 1 BRIGHT;
            goto sprite1;
        Extinguished:
            FLM1 ABCDEFGHIJKLMNOPRSTUXYZ 1 BRIGHT {
                A_SETSCALE(scale.x+0.007);
                A_FADEOUT(0.03, FTF_REMOVE);
            }
            FLM2 ABCDEFGHIJKLMNOPRSTUXYZ 1 BRIGHT {
                A_SETSCALE(scale.x+0.007);
                A_FADEOUT(0.03, FTF_REMOVE);
            }
            stop;
        DoNothing:
            TNT1 A -1;
            stop;
    }
}

class FireActorFlatSprite : FireActor
{
    default
    {
        +WALLSPRITE;
    }
}

class FireActorTemp : FireActor {
    int aliveTime;
    override void tick() {
        super.tick();
        if(aliveTime > 250) {
            scale*=1.02;
            A_FADEOUT(0.05);
        }
        aliveTime++;
    }
}

class FlameParticle : SELACOACTOR {

    static const String fireSprites[] = {"BFX1", "BFX2", "BFX3"};
    int pickedArray;
    int frameID;

    override void tick() {
        super.tick();
        scale*=0.98;
        A_FADEOUT(0.03, FTF_REMOVE);
        A_SETROLL(roll+4, SPF_INTERPOLATE);
    }

    default {
        +INTERPOLATEANGLES
        +NOGRAVITY;
        +NOINTERACTION
        +ROLLSPRITE;
        renderstyle "add";
        scale 0.24;
        alpha 1.0;
        +SelacoActor.EffectActor;
    }

    states {
        Indexer:
            // Index the whole thing. We don't want another instability problem.
            BFX1 A 0;
            BFX2 A 0;
            BFX3 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_SETROLL(random(-25,25));
                pickedArray = random(0,fireSprites.size() -1);
                A_SETSCALE(scale.x*frandom(0.76,1.08));
                frameID = 0;
            }
        ShowFlame:
            TNT1 A 0 {
                Sprite = GetSpriteIndex(fireSprites[pickedArray]);
            }
            TNT1 AAA 2 BRIGHT {
                frame = invoker.frameID;
                frameID++;
            }
        Death:
            TNT1 A 0 {
                Sprite = GetSpriteIndex(fireSprites[pickedArray]);
            }
            TNT1 CCCCCCCCCCCCCCCCCC 1 bright;
            stop;
    }
}

class MegaFire : FireActor
{
    default 
    {
        +WALLSPRITE;
        scale 1.3;
        SelacoActor.SleepDistance 0;
    }
	States
	{
        Spawn:
            TNT1 A 0;
            TNT1 A random(1,17);
            TNT1 A 0 {
                if(args[0] == 0) {
                    A_SetScale(scale.x+frandom(0.5,0.6));
                } else {
                    A_SetScale(scale.x+frandom(0.04*args[0], 0.04*args[1]));
                }   
            }
        CheckEffects:
            TNT1 A 0 A_Playsound("props/redfire", CHAN_5, 1.0, 1);
        SpawnFire:
            TNT1 A 0 {
                loopsTillCheck--;
                if(loopsTillCheck == 0) {
                    loopsTillCheck = 0;
                    setStateLabel("CheckDawnDistance");
                }
            }
            BFL1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 2 BRIGHT;
            BFL2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 2 BRIGHT;
            BFL3 ABCDEFGH 2 BRIGHT;
            loop;
        Extinguished:
            BFL1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 {
                A_SETSCALE(scale.x+0.02);
                A_FADEOUT(0.05);
            }
            stop;
    }
}

class MegaFireFlat : MegaFire
{
    default
    {
        scale 0.6;
        +wallsprite;
    }
}

class CarFire : SelacoActor
{

    override void tick()
    {
        super.tick();
        if(alpha < 1.0)
        {
            alpha+=0.07;
        }
    }

    default {
        +NOBLOODDECALS;
        +NOBLOOD;
        -BLOODSPLATTER
        +NOINTERACTION
        Alpha 0;
        SelacoActor.SleepDistance 5000;
        renderstyle "translucent";
        damagetype "Fire";
        radius 3;
        Scale 0.26;
    }

	States
	{
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                //SetOrigin((pos.x, pos.y, floorz), false);
            }
        CheckEffects:
            TNT1 A 0 A_Playsound("props/redfire", CHAN_5, 1.0, 1);
        SpawnFire:
            FLM1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 BRIGHT;
            FLM2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 BRIGHT;
            FLM3 ABCDEFGH 1 BRIGHT;
            loop;
        Extinguished:
            FLM1 ABCDEFGHIJKLMNOPRSTUXYZ 1 BRIGHT {
                A_SETSCALE(scale.x+0.007);
                A_FADEOUT(0.03, FTF_REMOVE);
            }
            FLM2 ABCDEFGHIJKLMNOPRSTUXYZ 1 BRIGHT {
                A_SETSCALE(scale.x+0.007);
                A_FADEOUT(0.03, FTF_REMOVE);
            }
            stop;
    }
}