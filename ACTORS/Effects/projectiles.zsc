class PlayerTracer: FasterProjectile {
    default {
        Projectile;
        +RANDOMIZE
        +FORCEXYBILLBOARD
        +DONTSPLASH
        +NOEXTREMEDEATH
        xscale .15;
        //seesound "rifle/whiz";
        yscale .25;
        DamageType "PlayerBullet";
        damage 0;
        radius 5;
        height 5;
        speed 185;
        renderstyle "ADD";
    }
    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                // We dont want tracers with every shot.
                if(random(0,100) > 60) {
                    destroy();
                }
            }
            TNT1 A 0 A_PLAYSOUND("rifle/whiz", CHAN_AUTO, 0.05);
            TNT1 A 2;
        Looper:
            TRAC A 1 BRIGHT;
            loop;
        Fly:
            TRAC A 1 BRIGHT;
            TNT1 A 0 {
                bThruActors = false;
            }
        Fly2:
            TRAC A 1 BRIGHT;
            Loop;
        DontShow:
            TNT1 A 1;
            stop;
        Death:
        XDEATH:
            TNT1 A 0;
            stop;
        }
}

class PlasmaProjectile : SelacoTracer {
    
    actor flareActor;
    bool succ;

    int particleCount;

    property ParticleCount : particleCount;
    virtual void plasmaExplosion() 
    {
        A_STOPSOUND(CHAN_5);
        A_setroll(random(0,360));
        A_SetScale(scale.x + frandom(0.01,0.17));
        A_PLAYSOUND("items/shieldhit", CHAN_5, 0.5, pitch:frandom(0.9,1.4));
        if (getCvar("g_impactshake") == 1) {
		    A_QuakeEx( 1, 1, 1, 6, 0, 200, 0, 0, 1, 1, 1, 1, 1, 1);
		}
	    if (getCvar("g_impactshake") == 2) {
		    A_QuakeEx(frandom(1.3, 1.3), frandom(1.3, 1.3), frandom(1.3, 1.3), 9, 0, 280, 0, 0, 2, 2, 2, 2, 2, 2); 
		}
        for(int x=0;x<2;x++)
        {
            A_SpawnItemEx("PlasmaScatteredSmoke", frandom(-4,-15),frandom(-14,14),frandom(-12,12), frandom(-0.3,-0.7), frandom(-0.2,0.2), frandom(-0.2,0.2));
        }
        for(int x=0;x<5;x++)
        {
            A_SpawnItemEx("RapidPlasmaSmoke", frandom(-4,-15),frandom(-14,14),frandom(-12,12), frandom(-0.9,-0.7), frandom(-1.9,1.9), frandom(-1.2,1.2));
        }
		for(int i = 0; i <=135;i++) {
			A_SpawnParticle("#53B7E6", SPF_FULLBRIGHT, random(7,16), random(2,5), frandom(0,360), frandom(-6,6), frandom(-6,6), frandom(-5,5), frandom(-5,5), frandom(-5,5), frandom(-6,6));
		}
    }

    override void postbeginPlay() {
        super.postBeginPlay();
        [succ, flareActor] = A_SPAWNITEMEX("BlueFlarePermanent", flags:SXF_SETMASTER);
        if(flareActor) {
            flareActor.master = self;
        }
    }

    override void tick()
    {
        super.tick();

        // No plasma under water!
        if(waterLevel > 0)
        {
            destroy();
        }
    }

    default {
        projectile;
        PlasmaProjectile.particleCount 50;
        +rollsprite
        +BLOODSPLATTER
        damagetype "BulletAlien";
        renderstyle "add";
        damage 1;
        speed 45;
        decal "ScorchMarkSmall";
        radius 5;
        height 1;
        scale 0.45;
    }
    states {
        spawn:
           PLPR AB 1 BRIGHT {
                A_SETROLL(random(0,360));
           }
           loop;
        xDeath:
            TNT1 A 0 {
                A_SetScale(scale.x*2);
                setStateLabel("ExplodeEffect");
            }
            goto ExplodeEffect;
        Death:
            TNT1 A 0 {
                A_SpawnItemEx("SpawnPlasmaDecal", -4);
                setStateLabel("ExplodeEffect");
                // Floor Impact
                if(abs(pos.z - floorz) <= 4)
                {
                    EmitDefinition('PlasmaPuffSparksFloor', chance: 0.75, numTries: 72, pitch:180);
                    EmitDefinition('MetalShrapnelParticleShortDefinition', chance: 0.9, numTries: invoker.particleCount*0.75, angle:-0, pitch:0, scaleboost:frandom(0.5,1.1));
                    EmitDefinition('MetalShrapnelParticleShortWildDefinition', chance: 0.9, numTries: invoker.particleCount*0.25, angle:-0, pitch:0, scaleboost:frandom(0.5,1.1));
                    EmitDefinition('PlasmaMoltenSteel360Definition', chance: 0.75, numTries: invoker.particleCount*0.25, offset:(0,0,5));
                }
                // Likely Wall impact
                else
                {
                    EmitDefinition('PlasmaPuffSparksWall', chance: 0.75, numTries: 60, angle:180, pitch:90);
                    EmitDefinition('MetalShrapnelParticleShortWallDefinition', chance: 0.9, numTries: invoker.particleCount, angle:-180, speed:4);
                    EmitDefinition('PlasmaMoltenSteelDefinition', chance: 0.9, numTries: invoker.particleCount*0.5, angle:-180, speed:frandom(1,2));
                }

                plasmaExplosion();
            }
        ExplodeEffect:
            TNT1 A 0
            {
                A_STOPSOUND(CHAN_5);
                A_SetScale(scale.x + frandom(0.6,0.95));
            }
            IPP2 ABCDEFG 1 bright;
            stop;
    }
}

class PlasmaProjectileEnemy : PlasmaProjectile 
{
    override int SpecialMissileHit (Actor victim) {
        // Tracers can pass through certain objects.
        if(victim is "GunnerShield" || victim is "ShieldPieceMaster" || victim is "PlasmaShieldActor" || victim is "DeathceptionMaster" || victim.bIsMonster) {
            return 1;
        }

        if(victim is "dawn")
        {
            for(int i = 0; i <=135;i++) {
                A_SpawnParticle("#53B7E6", SPF_FULLBRIGHT, random(7,16), random(2,5), frandom(-100, 100), frandom(-6,6), frandom(-6,6), frandom(-5,5), frandom(-5,5), frandom(-5,5), frandom(-6,6));
            }
            for(int x=0;x<3;x++)
            {
                A_SpawnItemEx("RapidPlasmaSmoke", frandom(-4,-15),frandom(-14,14),frandom(-12,12), frandom(-0.9,-0.7), frandom(-1.9,1.9), frandom(-1.2,1.2));
            }
            A_SetRenderstyle(0.4, STYLE_ADD);
        }

		return super.SpecialMissileHit(victim);
	}

    override void plasmaExplosion()
    {
        int explosionRange = 75;
        int explosionDamage = 14;
        if(checkInvasionTier(INVTIER_PLASMAAOE))
        {
            explosionRange*=1.25;
            explosionDamage*=1.25;
        }
        A_EXPLODE(explosionDamage,explosionRange);
        spawnLight(rColor:165, gColor:397, bColor:567, frandom(50,70), 0, shadowRequirement:-1, overbright: 0, divisionSpeed:1.25, alwaysShow:1,weaponFlash:1);
        super.plasmaExplosion();
    }

    override void PostBeginPlay()
    {
        super.postbeginPlay();
        A_PLAYSOUND("PLASMA/HUMMING", CHAN_5, 0.42, 0, 1.3, pitch:frandom(0.7,1.3));
    }

    default
    {
        damagetype "Plasma";
        +ABSDAMAGE
        PlasmaProjectile.particleCount 50;
        damage 0;
        scale 0.25;
        speed 26;
    }

}


class PlasmaExplosion : Actor {
	mixin lightEmitter;
    default {
        +NOINTERACTION;
        +ROLLSPRITE;
        Renderstyle "Add";
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                spawnLight(rColor:165, gColor:397, bColor:567, frandom(40,90), 0, shadowRequirement:-1, overbright: 0, divisionSpeed:1.75, alwaysShow:1,weaponFlash:1);
            }
            TNT1 A 0 A_SETROLL(random(0,360));
            IPP2 ABCDEFG 1 bright;
            stop;
    }
}

class PlasmaExplosionFlat : PlasmaExplosion
{
    default
    {
        scale 0.7;
        +FLATSPRITE;
    }
}

class PlasmaProjectilePlayer : PlasmaProjectile {

    bool hasOverload;
    bool hasOverkill;

    int explosionDamage;


    default {
        projectile;
        +FORCEXYBILLBOARD  
        +rollsprite;
        +ABSDAMAGE
        scale 0.13;
        height 10;
        radius 17;
        Alpha 0;
        damagetype "Plasma";
        RenderStyle "add";
        damage (10);
        speed 50;
        +FasterProjectile.CollidesWithGlass;
        FasterProjectile.DamageToGlass 80;
        FasterProjectile.GlassDamageDecal "PlasmaScorch";
        FasterProjectile.GlassPermanentDecal "PlasmaScorch";
    }
    states {
        spawn:
           TNT1 A 1;
        Looper:
           PLBA ABC 1 BRIGHT {
                if(alpha < 1.2) {
                    alpha+=0.2;
                }
           }
           loop;
        xDeath:
            TNT1 A 0 {
                scale*=frandom(0.4,0.6);
                setStateLabel("ExplodeEffect");
            }
            goto ExplodeEffect;
        ExplodeEffect:
            TNT1 A 0 {
                alpha = 1.0;
                if(random(0,1) == 1) {
                    bxFlip = true;
                }
                A_SETROLL(random(0,360));
                if(invoker.hasOverload)
                {
                    A_EXPLODE(explosionDamage-2, 50);
                }
                spawnLight(rColor:165, gColor:296, bColor:567, frandom(40,90), 0, shadowRequirement:-1, overbright: 0, divisionSpeed:1.5, alwaysShow:1,weaponFlash:1);
                A_PLAYSOUND("items/shieldhit", CHAN_5, 0.75, pitch:1.4);
            }
            PLBA DDEEFFGG 1 bright {
                scale*=1.05;
            }
            stop;
    }
}

class ScarabProjectile : PlasmaProjectilePlayer
{
    default
    {
        PlasmaProjectile.particleCount 6;
      scale 0.33;       
    }
    states
    {
        spawn:
           TNT1 A 1;
        Looper:
           PLBA ABC 1 BRIGHT {
                A_SETROLL(random(0,360));
                A_SpawnItemEx("plasmaEmberSmall");
                A_SpawnItemEx("plasmaEmberSmall");
           }
           loop;
        ExplodeEffect:
            TNT1 A 0 {
                A_EXPLODE(150, 100);
                spawnLight(rColor:165, gColor:397, bColor:567, frandom(140,150), 0, shadowRequirement:3, overbright: 0, divisionSpeed:1.5, alwaysShow:1,weaponFlash:1);
                A_PLAYSOUND("items/shieldhit", CHAN_AUTO, 0.75, pitch:1.4);
                for(int x=21;x>0;x--)
                {
                    A_SPAWNITEMEX("BlueExplosion", frandom(-15,0), frandom(-48,48), frandom(-43,43));
                }
                for(int x=9;x>0;x--)
                {
                    A_SPAWNITEMEX("FrostSmokeBaby", frandom(-10,0), frandom(-45,45), frandom(-45,45));
                }
            }
            PLBA DDEEFFGG 1 {
                scale*=1.25;
            }
            stop;
    }
}

class FireballProjectile : actor
{
    default {
        Radius 3;
        Height 5;
        Speed 35;
        Fastspeed 23;
        Damage 20;
        Projectile;
        Scale 0.5;
        +missile
        +FORCEXYBILLBOARD;
        +THRUGHOST;
        +ROLLSPRITE;
        RenderStyle "add";
        DamageType "Fire";
        ExplosionRadius 80;
        ExplosionDamage 8;
        Alpha 2;
        Decal "ScorchMarkSmall";
    }
	States
	{
	Spawn:
	    TNT1 A 0 {
            A_SETROLL(random(0,360));
        }
		FRBL ABC 2 BRIGHT {
            A_SpawnItem("SpawnImpactSmokeSmallerSuperShortThick");
            A_SETROLL(random(0,360));
            A_SpawnItemEx ("ExplosionParticleSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);

        }
		Loop;
	
    xdeath:
	Death:
		TNT1 A 0 {
            bNoGravity = false;
        }
		TNT1 A 0 A_Explode(2, 50, 0);
        EXPL A 0 A_SpawnItemex("ExplosionParticleSpawner", 0, 0, 0, -2, frandom(-2,2), frandom(-2,2));
	    Stop;
	}
}

// Pointy Tracers stick to a wall on impact.
class PointyTracer : SelacoTracer {
    double savedpitch;
    int isFlying;
    int nailLifespan;
    int deflectChance; // Chance to not stick in the wall and instead drop
    bool surfaceHit;
	bool spawnFlares;
    bool pickupable;
    bool pickupableTracer;
    bool noSpawnDropedActorOnXdeath;
    string droppedActor; // What actor to replace the projectile with when there is no wall to be pinned to?


	actor d;
    actor PickedupActor;
    bool success;

    private int pointyObjectFlags;

    flagdef rotatePitch  : pointyObjectFlags, 0;     // Pitch the projectile forward during travle
    flagdef spawnFlares  : pointyObjectFlags, 1;
    flagdef pickupableTracer	 : pointyObjectFlags, 2;
    flagdef hasGravity : pointyObjectFlags, 3;
    property DroppedActor : droppedActor;
    property DeflectChance : deflectChance;
	string NailTracerType;

    override void PostBeginPlay() {
        super.postbeginPlay();
        isFlying = 1;
        roll = 90;
        if(damageType == "knife") {
            droppedActor = getClassName();
            droppedActor.Replace("PROJECTILE", "");
        }
        // Used to allow grabbing of the actor, if Pickupable is a true flag.
        PlayerPawn pawn=players[0].mo;
		d = Dawn(pawn);
        
    }

    override int SpecialMissileHit(Actor victim) {
        if(damageType == "Knife" && victim.bIsMonster && isFlying && (SelacoEnemy(victim).bAllowKnifeKill)) {
            A_PLAYSOUND("knife/impale", CHAN_AUTO, 1.0, 0, 0.8, pitch:1.05);
            destroy();
        }
        return super.SpecialMissileHit(victim);
    }

    override void tick() {
        super.tick();
        if(isFlying) {
            A_ChangeVelocity(0, 0, -0.25*bHasGravity, CVF_Relative);
            savePitch(pitch);
            if(bRotatePitch) {
                pitch+=35;
            }
            if(bSpawnFlares) {
				A_SpawnItemEx("YellowFlareProjectile", 0, 0, 0, 0);
			}
        }
    }

    void savePitch(int newPitch) {
        savedPitch = newPitch;
    }

    void setsurfaceHit() {
        surfaceHit = true;
    }

    bool getsurfaceHit() {
        if (surfaceHit) {
            return true;
        }
        return false;
    }

    int getPitch() {
        return savedPitch;
    }

    void incrementLifespan() {
        nailLifeSpan++;
    }

    int getNailLifespan() {
        return nailLifeSpan;
    }

    bool hitsFloor() {
        String hittex;
		FLineTraceData RemoteRay;
		LineTrace(angle,20 , 270,offsetz: height-12,data: RemoteRay);
		if (RemoteRay.HitType == TRACE_HitFloor) {
			if(bPickupableTracer) {
                makeGrabbable();
            }
			return true;
		}
        return false; 
    }

    bool hitsCeiling() {
        String hittex;
		FLineTraceData RemoteRay;
		LineTrace(angle,13 , 270,offsetz: height-12,data: RemoteRay);
		if (RemoteRay.HitType == TRACE_HitCeiling) {
            if(bPickupableTracer) {
                makeGrabbable();
            }
			return true;
		}
        return false; 
    }
              
    override void Activate(actor activator) {
        [success, pickedupActor] = A_SpawnItemEx(droppedActor, -3, 0, 0);
        if(success) {
            let playerActor = dawn(activator);
            playerActor.pickupObject(pickedupActor);
        }
        //let pickupable = PickupableDecoration(PickedupActor);
        //pickupable.pickup(activator);
        Destroy();
    }

    void makeGrabbable() {
        bPickupableTracer = false;
        A_ChangeLinkFlags(0);
        bUseSpecial = true;
        ActivationType = THINGSPEC_Activate;
        a_setsize(15, 15);

        // If there is any time left, sleep until countdown happens
        if(nailLifeSpan - 900 > 10) {
            sleep(900 - nailLifeSpan);
            nailLifeSpan = 1;
        }
    }

    bool hitsWall() {
        String hittex;
		FLineTraceData RemoteRay;
		LineTrace(angle, 15, 0, flags: TRF_BLOCKSELF, offsetz: height, data: RemoteRay);
		if (RemoteRay.HitType == TRACE_HitWall) {
            if(bPickupableTracer) {
                makeGrabbable();
            }
            pitch = 0;
			return true;
		}
        return false; 
    }

    // Always wake, we are forgetting default behaviour here and only sleeping when stuck in a wall or on ground
    override bool shouldWake() { return true; }

    default {
        +PointyTracer.SpawnFlares;
        +BLOODSPLATTER 
        -DONTSPLASH
        +ABSDAMAGE
        PointyTracer.DeflectChance 20;
        PointyTracer.DroppedActor "NailgunTracerDrop";
		damagetype "NailDamage";
        +MISSILE;
        speed 135;
        damage 6;
        height 3;
        radius 4;
        alpha 1.0;
        renderstyle "Normal";
        yscale 0.09;
        xscale 0.09;
    }
    
	states {
	Spawn:
		VOXE L -1;
        loop;
	Death:
		VOXE L 0 {
            isFlying = 0;
			A_SpawnItemEx("NailgunPuff", 0, 0, 0, 0 ,0,0, 180);
			if(random(0,100) < DeflectChance) {
				A_PlaySound("impact/concrete");
				A_SprayDecal("WALLCRACKS", 172, (0,0,0));
				A_SpawnItemEx("NailgunTracerDrop", 0, 0, 0, frandom(1,3), 0, 3);
				setStateLabel("KillSpike");
			}
            A_SetAngle(angle + frandom(-3, 3));
            if (hitsFloor() && !getsurfaceHit()) {
                setsurfaceHit();
                A_SpawnItemEx("FloorDecalConcreteCrack", 0, 0, 2);
                pitch = 0;
                SetStateLabel("Death.FloorImpact");
            }
            if (hitsCeiling() && !getsurfaceHit()) {
                setsurfaceHit();  
                A_SpawnItemEx("FloorDecalConcreteCrackCeiling", 0, 0, 4);
                SetStateLabel("Death.CeilingImpact");
            }
        }
		TNT1 A 0 A_PlaySound("impact/concrete");
        TNT1 A 0 {
            if (!getsurfaceHit()) {
				A_SpawnItemEx("NailgunPuff", 0, 0, 0, 0 ,0,0, 180);
		        A_SprayDecal("WALLCRACKS", 172);
            }
        }
		TNT1 A 0 {
			SetStateLabel("DeathPuff");
		}
	DeathPuff:
		TNT1 A 0 {
			SetStateLabel("Looper");
		}
    Looper:
		VOXE L 1 {
            // Despawn, but only when it's not a knife!
            if (getNailLifespan() == 900 && damageType != "Knife") {
                setStateLabel("FadeOut");
                return;
            }
            if (!hitsWall() && !getsurfaceHit()) {
                A_SpawnItemEx(droppedActor, -5, 0, 0, frandom(1,3), 0, 3);
                setStateLabel("KillSpike");
                return;
            }
            //incrementLifespan();
            // Sleep for a while until our next check
            nailLifeSpan = min(nailLifeSpan + 5, 900);
            sleep(5);
        }
		loop;
    FadeOut:
		VOXE LLLLLLLLLLLLLLLLL 2 A_FADEOUT(0.05);
		stop;
    Death.CeilingImpact:
        TNT1 A 0 A_SetPitch(frandom(-40,-50));
        goto Death;
    Death.FloorImpact:
        TNT1 A 0 A_SetPitch(pitch + frandom(30, 70));
        goto Death;
	Crash:
	xDeath:
		TNT1 A 0;
		TNT1 A 0 {
            if(damageType == "Knife" && !noSpawnDropedActorOnXdeath) {
                A_SpawnItemEx(droppedActor, -3, 0, 0);
                destroy();
            }
			if(ACS_NamedExecuteWithResult("PlayerHasShrapnelShot", 0) == 1) {
				A_SPAWNPROJECTILE("NailShrapnel", 0, 30, 135, 0, frandom(-15,15));
				A_SPAWNPROJECTILE("NailShrapnel", 0, -30, 225, 0, frandom(-15,15));
			}
		}
		stop;
    Active:
        TNT1 A 0 A_SpawnItemEx(droppedActor, 0, 0, 0, frandom(1,3), 0, 3);
        stop;
	KillSpike:
        TNT1 A 0;
		stop;
	}
}

class KNIFEPROJECTILE : PointyTracer {

    override int SpecialMissileHit (Actor victim) {
        // Tracers can pass through certain objects.
        if(victim is "dawn") {
            return 1;
        }
		return super.SpecialMissileHit(victim);
	}

	default {
		tag "$OBJECT_KNIFE";
		damageType "Knife";
		scale 1;
		speed 48;
		height 2;
		damage 400;
		+PointyTracer.rotatePitch;
		+PointyTracer.spawnFlares;
		+PointyTracer.PickupableTracer;
        +PointyTracer.hasGravity;
        -Nogravity;
		selfLighting "787878";
		PointyTracer.DeflectChance 0;
		PointyTracer.DroppedActor "KNIFEBIG";
		gravity 0.7;
	}
	states {
		Spawn:
            TNT1 A 0;
			VOXE L 1 bright;
			loop;
	}
}

class KNIFEBIGPROJECTILE : KNIFEPROJECTILE {

}
class KNIFEMEDIUMPROJECTILE : KNIFEPROJECTILE {

}
class KNIFESMALLPROJECTILE : KNIFEPROJECTILE {

}

// This is the master tracer. Every projectile should inherrit this so it obeys to certain rules.
class SelacoTracer : FasterProjectile {
    string puffType;
    property puffType : puffType;
    default {
        Projectile;
    }
    
    array<Actor> passedActors;
    // Ensures projectiles that pass through an actor are only hit once.
    bool hasPassedThru(actor victimActor)
    {
        if(passedActors.size()>0)
        {
            for(int x=0;x<passedActors.size();x++)
            {
                if(passedActors[x] == victimActor)
                {
                    // We've hit the actor already.
                    return true;
                }
            }
        }
        // Actor is fresh, add to the list.
        passedActors.push(victimActor);
        return false;
    }

    // Using the hitpuff actor to get the wall texture has proven to be extremely unreliable from projectiles fired by enemies.
    // Instead we are now doing it here and skipping the trace in the puff class itself.
    void spawnPuffActor()
    {
       actor puffActor;
       bool succ;
       [succ, puffActor] = A_SpawnItemEx(puffType,-4);
       if(puffActor)
       {
            int tracePitch = pitch;

            // If we're on the floor, look straight down to get the floor because tracer pitches are too angled
            if(abs(floorz-pos.z) <= 3)
            {
                tracePitch = 90;
            }

            // Shoot a trace to feed to Hitpuff
            FLineTraceData trace;
            LineTrace(angle, radius, tracePitch, offsetz: height, data: trace);
            
        

            // With the trace data collected, we can turn around 180 degrees to the hitpuff particles face the correct direction
            puffActor.angle+=180;
            
            // Feed trace to hitpuff
            RicoChet(puffActor).checkImpactEffects(trace);
       }
    }


    override int SpecialMissileHit (Actor victim) {
        // Go through actors if they have a Passthru flag
		if(SelacoActor(victim) && SelacoActor(victim).bAllProjectilePassThru)  {
            // Damage victim, but only if damage has not been applied by this projectile before.
            if(!hasPassedThru(victim))
            {
                victim.DamageMobj(self, self, 10, damagetype, 0);
            }
            
            // Pass through
            return 1;
        }
		return super.SpecialMissileHit(victim);
	}
}

class EnemyTracer: SelacoTracer
{
    const WHIZ_DISTANCE = 450;

    int whizChance;

    property WhizChance : whizChance;
    int ticks;
    bool shouldWhiz;

    override void tick() {
        super.tick();
        // We want this bullet to whizzzzzzzzzz so start doing a check
        if((shouldWhiz) && level.time % random(1,2) == 0 && distance2DSquared(players[0].mo) < WHIZ_DISTANCE*WHIZ_DISTANCE) {
            A_Playsound("BULLET/ALIEN/whiz", CHAN_AUTO, 0.9, 0, 0.9, pitch:frandom(0.75,1.25));
            shouldWhiz = false;
        }
    }

    override int SpecialMissileHit (Actor victim) {
        // Go through actors if they have a Passthru flag

		if(victim.bIsMonster || victim is "PlasmaShieldActor" || (SelacoActor(victim) && SelacoActor(victim).bIgnoreEnemyProjectiles) || (SelacoActor(victim) is "ThrowableActor"))  {
            // Pass through
            return 1;
        }

		// Target hit by bullet, check for  iframes from dashing
		if(victim && victim is "Dawn")
		{
            Dawn d = dawn(victim);

            // Just in case.
            if(!d)
                return super.SpecialMissileHit(victim);

			Inventory dashInv = d.FindInventory("CooldownDashing");
			if(dashInv && dashInv.amount >= dashInv.maxamount - d.DODGE_IFRAMES)
			{
                int dodgeCameraRoll = (random(0, 1) == 1) ? -3 : 3;
                
                // Notofiy the stat screen
                Stats.AddStat(STAT_BULLETS_EVADED, 1, 0);

                // Notify Dawn object of a dodge so the UI can do something with it
                d.dodgeTime = level.totalTime;

                // Visual and sound effects
                d.A_SETROLL(dodgeCameraRoll, SPF_INTERPOLATE);
                d.A_PLAYSOUND("bullet/dodge", CHAN_7, 1.0, pitch:1.25);
				return 1;
			}
		}

		if(SelacoActor(victim) && SelacoActor(victim).bEnemyProjectilePassThru)  {
            // Damage victim, but only if damage has not been applied by this projectile before.
            if(!hasPassedThru(victim))
            {
                victim.DamageMobj(self, self, 10, damagetype, 0);
            }
            
            // Pass through
            return 1;
        }

		return super.SpecialMissileHit(victim);
	}


    override void PostBeginPlay() {
        super.PostBeginPlay();
        // Decide is we want this bullet to whizzzzzzzz
        if(random(0,100) <= whizChance) {
            shouldWhiz = true;
        }
    }

    // Runs when impacting world geometry
    virtual void bulletImpactWorld()
    {
        if(random(0,100) <= 25)
        {
            float sndpitch = frandom(0.75, 1.2);
            // Low chance for a lenghty drown out whizz
            if(random(0,100) <= 50)
            {
                sndPitch = frandom(0.5,0.75);
            }
            A_PLAYSOUND("WEAPON/FIRSTPERSON/BULLETWHIZ", CHAN_AUTO, 0.7, 0, 0.9, pitch:sndpitch);
        }
    }

    default 
    {
        SelacoTracer.puffType "HitPuffAlien";
        +BLOODSPLATTER
        +ABSDAMAGE
        EnemyTracer.whizChance 30;
        +THRUGHOST
        +MISSILE
        radius 6;
        height 1;
        speed 170;
        alpha 0.9;
        scale .14;
        speed 45;
        damage 3;
        seesound "weapons/chainwiz";
        DamageType "BulletAlien";
        scale .11;
        +PRECACHEALWAYS;
    }

	States {
        Precache:
            TRAC A 0;
            VOXE L 0;
            stop;
        Spawn:
            TRAC A 1 BRIGHT;
            TRAC A -1 BRIGHT;
            Loop;
		
        Death:
            TNT1 A 0
            {
                spawnPuffActor();
            }
            TNT1 A 0 {
                bulletImpactWorld();
                A_PLAYSOUND("tracer/fly", CHAN_AUTO, 0.3, 0, 1.0);
                A_PLAYSOUND("impact/tracerhit", CHAN_5, 0.15);
            }
            TNT1 A 9 {
                switch(getCvar("g_impactshake"))
                {
                    case 1:
                        A_QuakeEx(2, 2, 1, 4, 0, 150, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 10, 10, 10, 3, 0, 2);
                        break;
                    case 2:
                        PlayerPawn pawn=players[consolePlayer].mo;
                        let d = Dawn(pawn);
                        if(distance3DSquared(d) < 120*120) {
                            d.shakeWeapon(2,2);
                            d.HUDShake(5, 5);
                        }
                        A_QuakeEx(2, 2, 2, 12, 0, 200, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 10, 10, 10, 3, 0, 2);
                        break;
                }
            }
            Stop;
        XDeath:
            TNT1 A 0;
            stop;
    }
}

class HumanBulletTracer: SelacoTracer
{
    default
    {
        +BLOODSPLATTER;
        +THRUGHOST;
        +PUFFONACTORS
        -DONTSPLASH;
        -GHOST;
        -THRUGHOST;
        +THRUSPECIES;
        +MTHRUSPECIES;
        +PAINLESS;
        Species "Marine";
        damageType "AssaultRifleBullet";
        speed 100;
        damage 4;
        scale 0.25;
        renderstyle "add";
        Decal "BulletDecalNew1";
    }
	States
	{
		Spawn:
			TNT1 A 1 BRIGHT;
			TNT1 A 0 ThrustThingZ(0,random(-3, 3),0,1);
			TRAC A 1 BRIGHT;
			Goto Spawn2;

		Spawn2:
			TRAC A 1 BRIGHT;
			Loop;
        Death:
            TNT1 A 0 spawnPuffActor();
            TNT1 A 0 
			{
                A_PLAYSOUND("tracer/fly", CHAN_AUTO, 0.3, 0, 1.0);
                A_PLAYSOUND("impact/tracerhit", CHAN_5, 0.15);
            }
            TNT1 A 9 {
                if (getCvar("g_impactshake") == 1) {
                    A_QuakeEx( 1, 1, 1, 6, 0, 180, 0, 0, 1, 1, 1, 1, 1, 1);
                }
                if (getCvar("g_impactshake") == 2) {
                    A_QuakeEx(frandom(1.3, 1.3), frandom(1.3, 1.3), frandom(1.3, 1.3), 9, 0, 200, 0, 0, 2, 2, 2, 2, 2, 2); 
                }
            }
            Stop;
		XDeath:
			TNT1 A 1;
			Stop;	
	}
}

class AlienTracer: EnemyTracer
{
    default
    {
        scale .11;
        damage 0;
        damageType "BulletAlien";
    }
}


class EnforcerBullet: EnemyTracer
{

    override void bulletImpactWorld()
    {
        A_PLAYSOUND("ENFORCER/BULLETIMPACT", CHAN_AUTO, 0.8, 0, 0.7, pitch:frandom(0.80,1.0));
    }

    default
    {
        SelacoTracer.puffType "HitpuffAlienEnforcer";
		scale .20;
		speed 75;
		Damage 0;
		damageType "BulletAlien";
    }

    states
    {
        Death:
            TNT1 A 0 spawnPuffActor();
            TNT1 A 0 {
                bulletImpactWorld();
                A_PLAYSOUND("tracer/fly", CHAN_AUTO, 0.3, 0, 1.0);
                A_PLAYSOUND("impact/tracerhit", CHAN_5, 0.15);
            }
            TNT1 A 9 {
                if (getCvar("g_impactshake") == 1) {
                    A_QuakeEx( 2,2, 2, 6, 0, 180, 0, 0, 1, 1, 1, 1, 1, 1);
                }
                if (getCvar("g_impactshake") == 2) {
                    A_QuakeEx(frandom(2.3, 2.3), frandom(1.3, 1.3), frandom(1.3, 1.3), 9, 0, 200, 0, 0, 2, 2, 2, 2, 2, 2); 
                }
            }
            Stop;
        XDeath:
            TNT1 A 0;
            stop;
    }
}

class AlienMiniguntracer : EnemyTracer {
    default {
        speed 65;
        scale .10;
        damage 0;
        SelacoTracer.puffType "HitPuffAlienMinigun";
        damageType "BulletAlien";
    }
    states
    {
        Death:
            TNT1 A 1  {
                spawnPuffActor();
                A_PLAYSOUND("tracer/fly", CHAN_AUTO, 0.7, 0, 0.8);
                A_PLAYSOUND("impact/tracerhit", CHAN_5, 0.35);
            }
            TNT1 A 35 {
                if (getCvar("g_impactshake") == 1) {
                    A_QuakeEx( 1, 1, 1, 4, 0, 240, 0, 0, 1, 1, 1, 1, 1, 1);
                }
                if (getCvar("g_impactshake") == 2) {
                    A_QuakeEx(frandom(1.3, 1.3), frandom(1.3, 1.3), frandom(1.3, 1.3), 14, 0, 290, 0, 0, 3, 3, 3, 2, 2, 2); 
                }
            }
            Stop;
    }
}

// Blue shards
class BlueShardTracer: Enemytracer
{
    const LIGHT_EFFECT_CHANCE = 20;
    
    default 
    {
        +BLOODSPLATTER 
        -DONTSPLASH
        +MISSILE
        DamageType "BulletAlien";
        speed 35;
        damage 0;
        scale .15;
        xscale 0.05;
    }
    States
    {
        Spawn:
            TNT1 A 0 ;
            TNT1 A 0 ThrustThingZ(0,random(-4, 4),0,1);
            TRAC A 1 BRIGHT A_SpawnItemEx("BlueMuzzleFlashTrail", 0, 0, 0, 0);
            Goto Spawn2;
            
        Spawn2:
            TRAC A 1 BRIGHT A_SpawnItemEx("BlueMuzzleFlashTrail", 0, 0, 0, 0);
            Loop;
        
        Death:
            TNT1 A 0 {
                A_SPAWNITEMEX("SiegerPuff");
                if(random(0,100) <= LIGHT_EFFECT_CHANCE)
                {
                    spawnLight(rColor:165, gColor:397, bColor:567, frandom(10,20), 0, shadowRequirement:-1, overbright: 0, divisionSpeed:2.2, alwaysShow:1,weaponFlash:1);
                }
                EmitDefinition('BlueSparkShardTracerDefinition', chance: 1.0, numTries: 23, angle:180, speed:-5);
                shouldWhiz = false;
            }
            TRAC A 35 BRIGHT;
            TRAC A 0 A_PLAYSOUND("dest/shard");
            TNT1 A 0 A_SPAWNITEMEX("BlueExplosion");
            TNT1 A 0 A_EXPLODE(15,50);
            TNT1 A 0 A_SPAWNITEMEX("SpawnImpactSmokeBlue");
            TNT1 A 0 
            {
                if(random(0,100) <= LIGHT_EFFECT_CHANCE)
                {
                    spawnLight(rColor:165, gColor:397, bColor:567, frandom(25,30), 0, shadowRequirement:-1, overbright: 0, divisionSpeed:1.9, alwaysShow:1,weaponFlash:1);
                }
                EmitDefinition('BlueSparkShardTracerDefinition',chance: 1.0, numTries:25);
            }
            stop;

        xDeath:
            TRAC A 0 A_PLAYSOUND("dest/shard");
            //TNT1 A 0 A_SPAWNITEMEX("SpawnImpactSmokeBlue");
            TNT1 A 0
            {
                EmitDefinition('BlueSparkShardTracerDefinition',chance: 1.0, numTries:25);
            }
            Stop;
    }
}

class SiegerTracer : BlueShardTracer 
{
    override void postbeginPlay()
    {
        super.postbeginPlay();
        if(master)
        {
            pitch = master.pitch;
        }
    }
    
    default
    {
        damage 0;
        renderstyle "Add";
        speed 80;
    }
}

class AirdroneRocket : actor {
    default
    {
        SelfLighting "151515";
        damagetype "ExplosiveImpact";
        +MISSILE;
        projectile;
        speed 20;
        scale 2;
        radius 2;
        height 2;
    }

    override void tick()
    {
        super.tick();
        if(isfrozen()) return;
        A_SPAWNITEMEX("MammothProjectileSmoke");
    }

    states
    {
        spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_PLAYSOUND("ROCKET", CHAN_AUTO, pitch:frandom(1.2,1.3));
            }
        Looper:
            VOXE L 1 bright
            {
                // Quick and dirty, fill fix.
                if(checkProximity("RocketDestination", 50))
                {
                    setStateLabel("Death");
                }
            }
            loop;
        Death:
            TNT1 A 0
            {
                A_EXPLODE(160, 350);
            }
            TNT1 A 0 A_SPAWNITEMEX("RocketExplosionEffect");
            stop;
    }
} 