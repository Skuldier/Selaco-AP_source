class JunctionBoxBase : EnvironmentalHazard {
    LookExParams SearchParams;
    bool overchargeDetonation;
    override void PostBeginPlay() {
        SearchParams.fov = 360;
        SearchParams.minDist = 0;
        SearchParams.maxDist = 95;
        SearchParams.maxHearDist = 0;

        A_PlaySound("junction/loop", CHAN_5, 0.7, 1, 1.5);

    }
    override void tick() {
        super.tick();
        // Overcharged Junction Boxes act as mines. They automatically detonate when an enemy gets close
        if(overcharged && !overchargeDetonation) {
            bFriendly = true;
            if(LookForEnemies(true, SearchParams)) {
                overchargeDetonation = true;
                die(self, self);
                destroy();
            }
        }
    }

    default {
        DistanceCheck "r_gameplayobjectLOD";
        tag "$OBJECT_JUNCTIONBOX";
        +SHOOTABLE;
        +NOBLOODDECALS
        +NOGRAVITY;
        +SOLID
        +DONTTHRUST;
        activation THINGSPEC_SWITCH;
        +NOGRAVITY
        SelacoActor.SleepDistance 1024;
        mass 1000;
        height 25;
        radius 16;
        health 5;
        scale 1;
        BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
    }   
}

class JunctionBox : JunctionBoxBase {

    bool isOpen;

    override bool Used(actor activator)
    {
        isOpen =! isOpen;
        if(isOpen)
        {
            setStateLabel("active");
        }
        else
        {
            setStateLabel("inactive");
        }
        return false;
    }

    // An open fusebox freaking explodes when hit by water!
    override bool CanCollideWith(Actor other, bool passive) {
        if(isOpen && other is "WaterActor") {
			A_DamageSelf(900);
		}
		return true;
	}

    default {
        +SelacoActor.DisallowGravityManipulation;
        SelacoActor.UseTag "$INTERACT_OPEN";
    }

    states {
        Inactive:
            TNT1 A 0
            {
                A_PLAYSOUND("junction/close", CHAN_AUTO, 0.7);
                usetag = stringtable.Localize("$INTERACT_OPEN");
            }
        spawn:
            VOXE L -1;
            loop;
        Active:
            TNT1 A 0
            {
                A_PLAYSOUND("junction/open", CHAN_AUTO, 0.7);
                usetag = stringtable.Localize("$INTERACT_CLOSE");
            }
            VOXE A -1;
            loop;
        Death.Shotgun:
        Xdeath:
        Death:
            TNT1 A 0;
            TNT1 A 0 {
                stats.addStat(STAT_JUNCTIONBOXES_DESTROYED, 1, 0);
            }
            TNT1 A 0 A_STOPSOUND(CHAN_5);
            TNT1 A 0 A_SPAWNITEMEX("JUNCTIONBOXDESROYED1");
            stop;
    }
}

class JUNCTIONBOXDESROYED1 : JunctionBoxBase {
    default {
        +NODAMAGE
        +NOINTERACTION;
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_STOPSOUND(CHAN_5);
                A_SPAWNITEMEX("PlayerShaker1");
                //A_PLAYSOUND("dest/JunctionBox", CHAN_AUTO);
                A_SPAWNITEMEX("ShockExplosion");
                A_SPAWNITEMEX("JUNCTIONBOXDOOR", 6, 0, 0, 5, 0, 7);
            }
            VOXE LLLLLLLLLLLLLLLLLLLL 1 {
                A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-32, 32),frandom(-48, 48),frandom(-15, 35));
			    A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-32, 32),frandom(-48, 48),frandom(-15, 35));
                A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-43,35), frandom(15,20));
                //A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-35,35), frandom(-10,30));
               // A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-35,35), frandom(-10,30));
            }
            VOXE LLLLLLL random(35,150) {
                A_SPAWNITEMEX("Sparks", 5, 0, 25);
                A_SPAWNITEMEX("JunctionSparks", 5,frandom(-7,7), 10);
                A_SPAWNITEMEX("JunctionSparks", 5,frandom(-7,7), 10);
                A_SpawnProjectile ("SparkEmberUpward", 25, -3, random (0, 70), 2, random (0, 190));
            }
            VOXE L 1 {
                SleepIndefinite();
            }
            loop;       
    }
}

class ShockExplosion : SelacoActor {
    
    default {
        +NOINTERACTION
    }

    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_PLAYSOUND("dest/JunctionBox", CHAN_AUTO, 0.6);
                A_SPAWNITEMEX("WhiteShockWave", 0, 0, 0);
                S_Explode(40, 300, 0, 0, 0, 0, 0, "BulletPuff", "StunningShock");
                S_Explode(10, 50, 1, 0, 0, 0, 0);
            }
            TNT1 A 0 {
			    A_PLAYSOUND("Sparks/Spawn", CHAN_AUTO);
                EmitDefinition('SparkOrbShorterDefinition', chance: 0.75, numTries: 6, angle:random(0,360), pitch:frandom(-90, 90), speed:frandom(0.3,0.6), velocity:(0,0,frandom(0,2)));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(-3,3));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(-3,3));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(-3,3));
            }
            stop;
    }
}

class JUNCTIONBOXDOOR : SelacoActor {
    default {
        radius 5;
        gravity 0.7;
        height 5;
        Speed 8;
        +MISSILE
        +THRUACTORS
        +NOBLOCKMAP
        +USEBOUNCESTATE
        +DoomBounce;
        BounceFactor 0.6;
        BounceCount 3;
    }
    states {
        Spawn:
            TNT1 A 0;
        Looper:
            VOXE L 2 {
                A_SETPITCH(pitch+25);
            }
            loop;
        Bounce:
            TNT1 A 0 {
                for (int i = 0; i < 10; i++) {
                    EmitDefinition('ShortSparkParticleDefinition', 0.75, 35, offset:(frandom(-10,10), frandom(-10,10), frandom(-15,15)), flags:PE_ABSOLUTE_PITCH);
                }
                A_PlaySound("impact/metalsmall", CHAN_AUTO, 0.4, pitch:frandom(0.9,1.1));
            }
            goto looper;
        Death:
            VOXE L 1 {
                A_PlaySound("impact/metalsmall", CHAN_AUTO, 0.4, pitch:frandom(0.9,1.1));
                A_SETPITCH(0);
                A_SETANGLE(angle + frandom(-30,30));
                SleepIndefinite();
            }
            VOXE L 1;
            stop;
    }
}

class PlasmaPuffMissile : SELACOACTOR {
    default {
        +MISSILE;
        +NOINTERACTION
        speed 15;
    }
    states {
        spawn:
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
                A_CHANGEVELOCITY(0, frandom(-2,2), frandom(-1,1), CVF_RELATIVE);
                A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-8, 8),frandom(-8, 8),frandom(-8, 8));
            }
            stop;
    }
}

class JunctionSparks : ImpactEffect {
    static const String SmokeEffects[] = {"MEX1", "MEX2", "MEX3"};
	int pickedArray;
	default {
        RenderStyle "Add";
        +ROLLSPRITE;
        +WALLSPRITE;
		scale 0.20;
	}
	states {
        Indexer:
            MEX1 A 0;
			MEX2 A 0;
			MEX3 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_SETANGLE(angle-frandom(60,90));
				A_SETROLL(90);
                pickedArray = random(0,SmokeEffects.size() -1);
                //A_CHANGEVELOCITY(frandom(-0.6,-1.1),0,1);
            }
            TNT1 A 0 {
                Sprite = GetSpriteIndex(SmokeEffects[pickedArray]);
            }
		Effect:
			TNT1 ABCDEFGHIJKLMNOPQRSUV 1 bright
            {
                A_FADEOUT(0.055);
            }
			stop;
	}
}

class Generator : JunctionBoxBase 
{
    default
    {
        health 35;
        tag "Generator";
        PainChance 255;
        -USESPECIAL;
        -NOGRAVITY;
        PaiNSound "impact/hardmetal";
        Activation THINGSPEC_DEFAULT;
    }
    states
    {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 
            {
                A_PLAYSOUND("GENERATOR/LOOP", CHAN_7, 0.5, 1, 1.05, pitch:1.1);
            }
            VOXE A -1;
            stop;
        Pain:
            TNT1 A 0 A_PAIN();
            TNT1 A 0
            {
                A_PLAYSOUND("GENERATOR/ALERTSOUND", CHAN_6, 0.5, 1, 1.05, pitch:0.95);
                for(int x=0;x<35;x++)
                {
                    A_SPAWNITEMEX("LargeGlassParticle1", frandom(-15,15),frandom(-15,15), frandom(0,24), frandom(-4,4), frandom(-4,4), frandom(0,6));
                }
            }
        PainLoop:
            VOXE B random(10,25) {
                A_SPAWNITEMEX("Sparks", 5, 0, 15);
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", 5,frandom(-25,25), 10);
                bNoPain = true;
            }
            loop;
        Death:
            TNT1 A 0 
            {
                if(getCvar("g_Screenshake") >= 1) {
                    A_QuakeEx(1, 1, 1, 25, 0, 700, 0, 0, 0, 0, 0, 0, 2, 2, 4);
                }
                //A_SPAWNITEMEX("PrettyExplosionGrenadeLauncher");
                A_SpawnProjectile("GENERATOR_SILVERPIECE", 32, -35, angle:random(70,110), flags: CMF_AIMDIRECTION, pitch:frandom(-70,-150));
                A_SpawnProjectile("GENERATOR_SILVERPIECE", 32, 35, angle:random(250,290), flags: CMF_AIMDIRECTION, pitch:frandom(-70,-150));
                A_STOPSOUND(CHAN_7);
                A_STOPSOUND(CHAN_6);
                A_PLAYSOUND("Sparks/Spawn", CHAN_AUTO);
                EmitDefinition('SparkOrbShorterDefinition', chance: 0.75, numTries: 6, angle:random(0,360), pitch:frandom(-90, 90), speed:frandom(0.3,0.6), velocity:(0,0,frandom(0,2)));
                A_PLAYSOUND("dest/JunctionBox", CHAN_AUTO);
                A_SPAWNITEMEX("WhiteShockWave", 0, 0, 0);
                A_Explode(2, 700, 0, 0, 0, 0, 0, "BulletPuff", "StunningShock");
                A_Explode(10, 50, 1, 0, 0, 0, 0);
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(0,6));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(0,6));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(0,6));
                for(int x=0;x<6;x++)
                {
                    A_SpawnItemEx ("LargeExplosionSmokeSlow",frandom(-30,30), frandom(-30,30),frandom(0,25), 0, frandom(-0.6,0.6), angle:random(0,360));
                }
            }
            VOXE CCCCCCCCCCCCCCC 2 {
                A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-32, 32),frandom(-48, 48),frandom(0, 35));
			    A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-32, 32),frandom(-48, 48),frandom(0, 35));
                A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-43,35), frandom(15,20));
                //A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-35,35), frandom(-10,30));
               // A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-35,35), frandom(-10,30));
            }
            VOXE CCCCCCCCCCCCCCCCCCCCCCCC random(15,45) {
                A_SPAWNITEMEX("Sparks", 5, 0, 15);
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", random(-7,7),frandom(-25,30), 10);
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", random(-7,7),frandom(-30,30), 10);
                A_SPAWNITEMEX("Sparks", random(-7,7), frandom(-10,10), 15);
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", random(-7,7),frandom(-30,30), 10);
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", random(-7,7),frandom(-30,30), 10);
                A_SpawnProjectile ("SparkEmberUpward", 26, -3, random (0, 70), 2, random (0, 190));
            }
            VOXE C 1 {
                SleepIndefinite();
            }
    }
}

class GENERATOR_SILVERPIECE : SelacoActorDecorationMissile
{
    default 
    {
        speed 10;
    }
}

class FOAM_TANK : EnvironmentalHazard 
{

    int smokeXOffset;
    int smokeAmount;
    float velMax;
    int sizzleLoops;
    bool attachedToceiling;
    property SmokeXOffset : smokeXOffset;
    property SmokeAmount : smokeAmount;
    property VelMax     : velMax;

    const TICKS_TO_DONATE = 30;
    const STEAM_PARTICLE_COUNT = 3;
    override void postbeginPlay()
    {
        super.postbeginPlay();
        attachedToceiling = args[0];
    }

    default
    {
        height 60;
        radius 25;
        health 90;
        PainChance 255;
        PainChance "ExplosiveImpact", 0;
		PainChance "MeleeImpact", 0;
		DamageFactor "MagnumBullet", 8.0;
		DamageFactor "MeleeImpact", 0.0;
		DamageFactor "MeleeImpactSplash", 0;
		DamageFactor "Fire", 100;
		DamageFactor "shotgun", 8.0;
        DamageFactor "Explosiveimpact", 0.3;
        damageFactor "BulletAlien", 3;
		BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";       
        FOAM_TANK.SmokeXOffset 35;
        FOAM_TANK.SmokeAmount 13;
        FOAM_TANK.velMax 0.7;
        -Pushable
        +DONTTHRUST
        activation THINGSPEC_DEFAULT;
        -USESPECIAL;
        mass 10000;
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
	Pain:
		TNT1 A 0 A_PlaySound("Extinquisher/leak", CHAN_5, 1);
		TNT1 A 0;
		TNT1 A 0 {
			bDangerousActor = true;
			activationType = THINGSPEC_Default;
			bPreventSleep = true;
			bNoGravity = true;
			bUseSpecial = false;
		}
	Looper:
		VOXE L 1 {
			for(int x=0;x<=STEAM_PARTICLE_COUNT;x++) {
				A_SpawnItemEx("SteamParticle", 0, 0, 20, (0.1)*Random(35, 40), 0, (0.1)*Random(-5, 5), Random(-8, 8), 128);
			}
			blinkDangerIndicator(180);
			sizzleLoops++;
			if (sizzleLoops >= TICKS_TO_DONATE) {
				SetStateLabel("Death");
			}
		}
		VOXE L 2;
		loop;

        xDeath:
        Death:
            VOXE L 0 {
                A_PlaySound("Movers/pressur", CHAN_AUTO, 1.0, 0, 0.6);
                A_PlaySound("Extinquisher/destroy", CHAN_AUTO);
                if(overCharged)
                {
                    SmokeAmount*=1.8;
                    smokeXOffset*=2.5;
                    velMax*=2;
                    A_SPAWNITEMEX("ExtinguisherExplosionOvercharged");
                }
                else
                {
                    A_SPAWNITEMEX("ExtinquisherExplosion");
                }

                // Spawn Smoke
                for(int x=0;x<smokeAmount;x++)
                {
                    A_SPAWNITEMEX ("EXTINGUISHERSMOKE", random(0, smokeXOffset), random(0, 52), frandom(-10,70), frandom(0.2,velMax), angle:random(0,360));
                }

                // Spawn some booms
                for(int x=0;x<27;x++)
                {
                    A_SPAWNITEMEX("BigExplosionSlow", frandom(0,9), 0, frandom(25,35), frandom(3,5), angle:random(0,360));
                }

                // Shockwave over the floor
                spawn("BaseShockwave", (pos.x,pos.y,floorz));

                // Spawn the top side, assuming it's not bolted onto something.
                if(attachedToceiling)
                {
                    A_SPAWNITEMEX("FOAM_TANK_TOP_STATIC", 0, 0, 40);
                }
                else
                {
                    A_SPAWNITEMEX("FOAM_TANK_TOP", 0, 0, 40, frandom(3,5), 0, 12, angle:random(0,360));
                }

                // Stop flames
                RemoveNearbyFlames(250);
                A_STOPSOUND(CHAN_5);
                A_PlaySound ("impact/cannister", CHAN_AUTO);
                A_SpawnItemEx ("BigSmokes",0,0,45,0,0,0,0,SXF_NOCHECKPOSITION,0);
                A_NoBlocking();
                A_SPAWNITEMEX ("SparkMissile", 25, 0, 0, 3, 0, 2, angle-180);
                bUseSpecial = false;
                EmitDefinition('SparkParticleDefinition', 1.0, 50);
            }
            TNT1 AAA 0 A_SpawnProjectile ("WallShrapnelLonger", random(-2, 2), 0, random (-80, 80), 2, random (-10, 40));
            TNT1 AAAAA 0 A_SpawnProjectile ("plasmaEmber", 48, 0, random (0, 360), 2, random (0, 360));
            TNT1 AAA 0 A_SpawnProjectile ("BigplasmaEmber", 42, 0, random (0, 360), 2, random (0, 360)); 
            TNT1 A 0 {
                if(getCvar("g_Screenshake") >= 1 && CheckProximity("Dawn", 400.0, 1)) {
                    A_QuakeEx(6, 6, 6, 6, 0, 700, 0, 0, 0, 0, 0, 0, 4, 4, 4);
                }
                if(CheckProximity("Dawn", 700.0, 1, CPXF_SETTARGET)) {
                    ACS_NamedExecuteAlways("SpawnHudShake", 0, 17, 17, 35);
                    Dawn.ShakeWeapon(10,10);
                }
                A_RadiusGive("ShieldEyes", 260, RGF_PLAYERS | RGF_GIVESELF, 1);
            }
            TNT1 A 0 
            {
                spawn("FOAM_TANK_FOOT", (pos.x, pos.y, floorz));
            }
            TNT1 A 14
            {
                if(getCvar("g_Screenshake") >= 1) {
                    A_QuakeEx(1, 1, 1, 25, 0, 700, 0, 0, 0, 0, 0, 0, 2, 2, 4);
                }
            }
            TNT1 A 0 A_STOP;
            stop;
    }
}

class FOAM_TANK_FOOT : SelacoActorStatic
{
    states
    {
        spawn:  
            VOXE L -1;
            stop;
    }
}

class FOAM_TANK_TOP : SelacoActorDecorationMissile
{
    override void postbeginPlay()
    {
        super.postbeginPlay();
        A_SETPITCH(pitch+90);
    }
}

class FOAM_TANK_TOP_STATIC : SelacoActorStatic
{
    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}