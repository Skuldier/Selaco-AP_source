
class GUNNER : SOLDIER
{

	const COOLDOWN_REQUIREMENT = 7;
	const MAXIMUM_SHIELD_BUFFS = 3;
	const HEAVY_GUNNER_CHANCE = 25; // Randomizer
	int shieldsGiven;
	actor suppressionActor;
	bool suppressionSuccess;

	bool allowSuppression;

	actor oldTarget;

	actor shieldActor;
	bool shieldSuccess;
	bool allowShield;
	int hasShieldedAllies;
	int suppressionThreshold;
	int maxShields;
	int minigunCooldown; // Minigunners cannot fire instantly. It has to spool up
	int sightLostTime; // If player goes out of the view while shooting, disengage Attack Mode after a few ticks.
	bool allyShieldSuccess;

	property MaxShields : maxShields;

	array<SquadShield> shieldedAllies;


	override void PostBeginPlay() {
		super.PostBeginPlay();

		// Replace with a Heavy Gunner if circumstances are met
		if(tid == 0 && randomizerHandler && randomizerHandler.hasRandomizer && randomizerHandler.allowHeavyGunners && GetClassName() != "HeavyGunner" && random(0,100) <= HEAVY_GUNNER_CHANCE) {
			A_SPAWNITEMEX("HeavyGunner", flags:SXF_NOCHECKPOSITION);
			destroy();
		}
		
		ENEMY_IdentifierTag = "GUNNER";
		// If the first argument is set to '1', the soldier will not talk, ever.
		if (args[0] == 1) {
			mayNotTalk = true;
		}
		if(bDormant) {
			bThruActors = true;
		}

		weapon_rateoffire = 3;
		MagazineSize = 999999999; // How many shots before reloading?
		currentAmmo = 9999999999;
		burstLength = MaxBurstLength;
		strafeChance = 80; // Chance to strafe. Different per class
		if(skill == SKILL_ENSIGN) { strafeChance = strafeChance / 3;}
		if(skill == SKILL_LIEUTENANT) { strafeChance = strafeChance / 2;}
		if(skill >= SKILL_CAPTAIN) { strafeChance += 80;}
	}


	override void tick()
	{
		super.tick();
			// Spawn Suppression Point at target location. But only if Dawn
			if(allowSuppression)
			{
				if(target is "dawn" && isTargetVisible())
				{
					oldTarget = null;
					if(suppressionActor)
					{
						suppressionActor.destroy();
					}
					int yVelocity = (Sin(target.angle) * (target.vel.x)) - (Cos(target.angle) * (target.vel.y));
					[suppressionSuccess, suppressionActor] = target.A_SPAWNITEMEX("suppressionPoint", 0, -1*yVelocity*8, target.height*0.5);
				}

				if(suppressionActor && checkSight(suppressionActor) && !oldTarget && !isTargetVisible())
				{
					// Target lost, attacking suppression actor if it exists.
					oldTarget = target;
					target = suppressionActor;
				}

				// Keep firing at the suppression point but stop firing if the suppressed target shows itself for a duration of time.
				if((suppressionActor && target && oldTarget) && target is "suppressionPoint" && checkSight(oldTarget))
				{
					suppressionThreshold++;
					if(suppressionThreshold > 35)
					{
						allowSuppression = false; // To avoid over-suppressing.
						suppressionThreshold = 0;
						target = oldTarget;
						SetStateLabel("EndAttack");
					}
				}

				// If suppression point is gone, revert back to Old target
				if(!suppressionActor && oldTarget)
				{;
					BurstLength = 0;
					target = oldTarget;
					oldTarget = null;
				}
			}
	}

    override void BeginPlay() {
		super.BeginPlay();
		allowShield = true;
		
		if(skill >= SKILL_CAPTAIN) // If Admiral or higher...
		{
			maxShields++;
		}
	}

	void spoolupMinigun(int increment) {
		if(minigunCooldown == 0) {
			A_PLAYSOUND("GUNNER/MINIGUN/START", CHAN_AUTO, 0.87, 0, 0.6);
		}
		minigunCooldown = minigunCooldown + increment;
	}

	virtual void FireGunnerMinigun() {
		A_FACETARGET();
		spoolupMinigun(1);
		if(minigunCooldown >= COOLDOWN_REQUIREMENT) {

			if(target is "PathNode" && players[0].mo) {
				target = players[0].mo;
			}

			A_PlaySound("gunner/fireminigun", CHAN_AUTO, 0.59, 0, 0.88, false, frandom(0.8,0.9));
			A_PLAYSOUND("GUNNER/DISTANT", CHAN_AUTO, 0.25, pitch:frandom(0.9,1.3));
			A_SPAWNITEMEX("AlienMuzzleMinigun", 22, 12, 32, 0, 0, 0, SXF_ISMASTER);
			//A_SpawnProjectile("GunFireSmoke", 23, 0, 0, 0, 0, 0);
			//A_SpawnItemEx("BulletImpactSmokeEnemy", zMuzzleLocation, yMuzzleLocation, 32, frandom(1.5, 3), frandom(1.5, 3));
			//A_SpawnItemEx("BulletImpactSmokeEnemy", zMuzzleLocation, yMuzzleLocation, 32, frandom(1, 2), frandom(-1.5, -3));
			//A_SpawnItemEx("BulletImpactSmokeEnemy", zMuzzleLocation, yMuzzleLocation, 32, frandom(1.5, 2), 0, frandom(1.5, 3));
			A_FireEnemyWeapon("AlienMiniguntracer", 36, 2, random(-3, 3), CMF_TRACKOWNER | CMF_OFFSETPITCH , frandom(1.1, -1.2));
			A_SpawnItem ("RifleCaseSpawnEnemy", 0, 30,0);
			BurstLength--;
			if (BurstLength <= 0) {
				setStateLabel("EndAttack");
			}
		}
	}

	void deployAllyShields() {
		array<actor> actorsToShield;
		
		if (developer) {
			console.printf("Squad size: %d", squad.members.size());
		}
		
		// Find soldiers to protect
		for (int x = 0; x < squad.members.size(); x++) {
			if (squad.members[x] == self || squad.members[x] is 'Gunner') {
				continue;
			}
			
			actorsToShield.push(squad.members[x]);
			shieldsGiven++;
			
			if (shieldsGiven >= maxShields) {
				break;
			}
		}

		if (squad.members.size() > 1) {
			talk(SOLDIER_SHIELDING);
		}

		// Deploy shields to the found actors
		for (int x = 0; x < actorsToShield.size(); x++) {
			actor ally = actorsToShield[x];
			
			// Only spawn a shield if there's no other shield
			if (!ally.CheckProximity("SquadShield", 30.0, 1)) {
				bool success;
				actor allyShield;
				
				[success, allyShield] = ally.A_SpawnItemEx("SquadShield", flags: SXF_SETMASTER);
				
				if (success && allyShield is "SquadShield") {
					SquadShield squadShieldActor = SquadShield(allyShield);
					allyShield.master = ally;
					shieldedAllies.push(squadShieldActor);
					
					if (developer) {
						console.printf("Shielded %s - %p", ally.GetClassName(), ally);
					}
				}
			}
		}
	}


	void destroyAllyShields() {
		if(shieldedAllies.size()) {
			if(developer) console.printf("SHIELD COUNT: %d", shieldedAllies.size());
			for(int x= 0; x<shieldedAllies.size();x++) {
				if(shieldedAllies[x]) {
					shieldedAllies[x].die(shieldedAllies[x], shieldedAllies[x]);
				}
			}

			//shieldedAllies.clear();
		}
	}

	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		destroyAllyShields();
		A_killChildren();
		A_SetTranslation("GrenadierYellow");
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}

	virtual void SpawnAllyShields() {
		if(allowShield) {
			if(checkInvasionTier(INVTIER_GUNNERSHIELDS) && !hasShieldedAllies) {
				hasShieldedAllies = true;
				deployAllyShields();
			}
		}
	}

	virtual void SpawnShield() {
		if(allowShield) {
			[shieldSuccess, shieldActor] = A_SPAWNITEMEX("GunnerShield", 10, 0, 10, flags:SXF_SETMASTER);
		}
	}

	Default {
		Gunner.maxShields 3; // How many allies can this gunner shield?
		SelacoEnemy.role "$ROLE_SUPPORT";
		tag "$CHARACTER_GUNNER";
		EnemySoldier.DisplayName "$CHARACTER_GUNNER";
		-EnemySoldier.AllowSmartReloading;
		-SelacoEnemy.allowShieldMounting
		-SelacoEnemy.AllowGrenadeDodging;
		SelacoEnemy.flankingChance 0;
		SelacoEnemy.HeadPainChance 20;
		SelacoEnemy.weaponDamage 1;
		SelacoEnemy.weaponDamageOffset 1;
		SelacoEnemy.weapon AWPN_MINIGUN;
		
		EnemySoldier.SPRITE_Walking "GURU";
		EnemySoldier.SPRITE_Idle "GUID";
		EnemySoldier.SPRITE_Pain "ALIP";
		EnemySoldier.SPRITE_PainShoulder1 "RFP1";
		EnemySoldier.SPRITE_PainShoulder2 "RFP2";
		EnemySoldier.SPRITE_PainHeadshot "GUP3";
		EnemySoldier.SPRITE_Reload "RFRE";
		EnemySoldier.SPRITE_FireAimed "RFFR";
		EnemySoldier.SPRITE_StumbleForward "RFP6";
		EnemySoldier.SPRITE_StumbleRight "RFP5";
		EnemySoldier.SPRITE_StumbleLeft "RFP4";
		EnemySoldier.SPRITE_CrouchFire "RFCR";
		EnemySoldier.SPRITE_AlertAllies "ALAL";
		EnemySoldier.SPRITE_Hipfiring "GUAT";
		EnemySoldier.SPRITE_HipWalking "RFHW";
		EnemySoldier.SPRITE_StrafeFiring "GUST";
		EnemySoldier.SPRITE_Fallingdown "RFFL";
		EnemySoldier.SPRITE_MeleeFly "RFGU";
		EnemySoldier.SPRITE_Shocked "RFEL";
		EnemySoldier.SPRITE_NailgunDeath "RFN1";
		SelacoEnemy.ENEMY_IdentifierTag "RIFLEMAN";
		SelacoEnemy.randomizerSpawnChance 35;
		Health 210; 
		Radius 13;
		Height 62;
		Speed 4;
		Mass 270;
		FastSpeed 4;
		PainChance 130;
		scale 0.4;
		monster;
		yscale 0.29;
		EnemySoldier.MaxBurstLength 125;
		PainChance "BulletSplashDamage", 150;
		MaxDropOffHeight 39;
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "";
		DamageFactor "CauseObjectsToSplash", 0.0;
	}
	States
	{

    index:
		TNT1 A 0;
		RFP1 A 0;
		GURU ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		GUID ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		GUAT A 0;
		GUP3 A 0;
		GUST A 0;
		RFFR A 0;
		RFP6 A 0;
		RFN1 A 0;
		RFHW ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;	
		ALIP ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
	Spawn:
		TNT1 A 0 {
			A_Look();
		}
		POSS B 1 {
			SetStateLabel("Stand");
		}
		loop;

	See:
		TNT1 A 0 S_AlertEnemies();
		TNT1 A 0 {
			sprite = GetSpriteIndex(SPRITE_Walking);
			bNODROPOFF = false;	
		}
		TNT1 A 0 {
			if (!getSeenPlayer()) {
				calloutTimer = 3;
			}
			bThruActors = false;
			A_GiveInventory("isInCombatMode",1 );
			SetSeenPlayer();
		}
		Goto SeeContinue;

	SeeContinue:	
		TNT1 A 0 {
			if(shieldActor) {
				shieldActor.destroy();
			}
			playRadioSound();
			defaultEverything();	
			SetSeenPlayer();
			sprite = GetSpriteIndex(SPRITE_Walking);
		}
	SeeContinueLoop:
		TNT1 A 0 {
			if(shieldActor) {
				shieldActor.destroy();
			}
		}
		TNT1 AAAAAAAAAABBBBBBBBBB 1 {
			a_track();
		}
		TNT1 A 0 {
			if (random(0,800) == 0 ) {		
			    talk(SOLDIER_PURSUIT);
			}
		}
		TNT1 A 0 playFootstepSound();
		TNT1 CCCCCCCCCCCDDDDDDDDDDD 1 {
			a_track();
		}
		TNT1 A 0 {
			if (random(0,100) == 0 ) {		
			    talk(SOLDIER_PURSUIT);
			}
			checkNearForcefield();
		}
		TNT1 A 0 playFootstepSound();
		Loop;


	Missile:
		TNT1 A 0 {
			bGhost = false;
			bNoDropoff = false;
			allowSuppression = false;
			defaultEverything();
			// Roll dice to see if Gunner should suppress
			if(random(0,2) == 2)
			{
				allowSuppression = true;
			}
			if(shieldActor) {
				shieldActor.destroy();
			}
		}
	MissileForward:
	PrepareMinigun:
		TNT1 A 0 S_AlertEnemies();
		TNT1 A 0 talk(SOLDIER_ATTACK);
		TNT1 A 0 {
			spoolupMinigun(1);
			BurstLength = MaxBurstLength;
			invoker.sightLostTime = 0;
			Sprite = GetSpriteIndex(SPRITE_Hipfiring);
			if(!isTargetVisible())
			{
				setState(findState("CannotSeeTarget"));
			}
			S_AlertEnemies();
			A_PlaySound("GUNNER/prepare", CHAN_AUTO, 0.8, 0, 0.8);
		}
		TNT1 ABCDEFGHIJKKK 2 {
			A_FACETARGET();
		}
		// Spawn shield actor to defend the shooter
		TNT1 A 0 {
			SpawnAllyShields();
			SpawnShield();
		}
		goto FireMinigun;
	MoveBackward:
	MissileBackward:
	FireMinigun:
		TNT1 A 0 {
			killStrafeNodes();
			Sprite = GetSpriteIndex(SPRITE_Hipfiring);
		}
		TNT1 K 3 {
			A_FACETARGET();
			A_SetTics(2);
			if(random(0,100) <= 5) {
				setStateLabel("StrafeFiring");
			}
		}
		TNT1 A 0 {
			if (!CheckSight(target)) {
				invoker.sightLostTime++;
				// No player in sight for a while, stop shooting/
				if(invoker.sightLostTime >= 35 ){
					SetStateLabel("EndAttack");
				} else {
					SetStateLabel("FireMinigun");
				}
			}
		}
		TNT1 L 1 {
			if(minigunCooldown <= COOLDOWN_REQUIREMENT) {
				frame = 10;
			}
			A_FACETARGET();
			BurstLength = 7;
			invoker.sightLostTime = 0;
			FireGunnerMinigun();
		}
		loop;

		
	EndAttack:
		TNT1 A 0 {
			Sprite = GetSpriteIndex(SPRITE_Hipfiring);
			minigunCooldown = 0;
			A_PLAYSOUND("GUNNER/MINIGUN/STOP", CHAN_AUTO, 0.8, 0, 0.6);
			if(shieldActor) {
				shieldActor.destroy();
			}
			if(suppressionActor)
			{
				suppressionActor.destroy();
			}
		}
		TNT1 A 0 A_PlaySound("GUNNER/unprepare", CHAN_AUTO, 0.8, 0, 0.8);
		TNT1 MNO 3;
		goto SeeContinue;

	StrafeFiring:
		TNT1 A 0 A_Jump(256, "MissileLeft", "MissileRight");

	MissileLeftDelay:
		TNT1 K 1;		
	MissileLeft: // Enemy will strafe to the left while taking shots at the player
		TNT1 A 0 {
			defaultEverything();
			invoker.strafesLeft = true;
			invoker.strafeSpeed = -0.65;
			checkStrafeDirection = 90;
			strafeFrames = 0;
		}
		goto PrepareStrafe;
	MissileRightDelay:
		TNT1 K 2;
	MissileRight:
		TNT1 A 0 {
			defaultEverything();
			invoker.strafesRight = true;
			invoker.strafeSpeed = 0.65;
			checkStrafeDirection = 270;
			strafeFrames = 3;
		}
		goto PrepareStrafe;


	PrepareStrafe:
	Strafe:
		TNT1 A 0 {
			delayer = 0;
			if(strafesRight) 	{createStrafeNodes(STF_RIGHT, 5);}
			if(strafesLeft) 	{createStrafeNodes(STF_LEFT, 5);}
		}
		GUST AABBCCDDAABBCCDDAABBCCDD 3 {
			BurstLength = 3;
			// Move into the desired direction
			A_CHANGEVELOCITY(0, strafeSpeed, 0, CVF_RELATIVE);

			// If strafenodes fail, revert to firing the minigun
			if(delayer > 0 && !validateStrafe()) {
				setStateLabel("FireMinigun");
			}
			delayer++;
			// Change direction when the current direction is going to cause the gunner to collide with a wall
			if(checkGeometryCollision(-1, 50) && delayer > 6) {
				SetStateLabel("FireMinigun");
			}
/* 			if(delayer > 4)
			{
				preventEdgeFalling("FireMinigun");
			} */
			// Keep firing unless the target is out of sight for a few ticks
			if(!CheckSight(target)) {
				sightLostTime++;
			} else {
				sightLostTime = 0;
			}
			if(invoker.sightLostTime < 6 && delayer > 2) {
				FireGunnerMinigun(); 
			}

		}
		goto FireMinigun;

	StandUp:
		TNT1 CBA 2 A_FACETARGET;
		TNT1 A 0 A_jump(96, "Missile");
		Goto SeeContinue;

	Pain.MagnumStagger:
		TNT1 A 0 A_Pain();

		TNT1 A 0 A_PlaySound("impact/flesh", CHAN_AUTO, 1.0, 0, 0.9);
		goto pain;
	Pain.DawnFist:
		TNT1 A 0 A_SpawnItemEx("MeleeImpactEffect", -5, 0, 40);
		TNT1 A 0 {
			vel.x = 0;
			vel.y = 0;
			SetStateLabel("Pain_NOStumble");
			return;
		}
	Pain.StumbleForward:
	Pain.DoStumble:
	Pain.StumbleLeft:
	Pain.StumbleRight:
	Pain:
		TNT1 A 0 A_Pain();
		
	
		TNT1 A 0;
		TNT1 A 0 A_Jump(256, "Pain.Right", "Pain.left");
		TNT1 A 0 A_Jump (invoker.evadeChance, "Evade");
		

	    Goto SeeContinue;
        TNT1 A 0;
        TNT1 A 0 A_Pain;
        Goto GetUp;

	Pain.MeleeImpactExtinguisher:
		TNT1 A 0 A_SpawnItemEx("MeleeImpactLarger", -5, 0, 40);
		TNT1 A 0 A_PLAYSOUND("IMPACT/EXTINGUISHERHIT", CHAN_AUTO, 0.8, pitch:frandom(0.8,1.1));
	Pain.Melee:
	pain.landOnYourAss:
	Pain.MeleeImpactSplash:
		TNT1 A 0 A_FACETARGET();
		TNT1 A 0 A_RECOIL(3);
	Pain.Shotgun:
	Pain.ExplosiveImpact:
    Pain.MeleeImpact:
		 TNT1 A 0 A_STOPSOUND(CHAN_VOICE);
		 TNT1 A 0 A_FACETARGET();
		 TNT1 A 0 {
			if(shieldActor) {
				shieldActor.destroy();
			}
			mayNotTalk = true;
		 }
		 TNT1 A 0 {
			 // This does not apply to an enemy who is shocked because a taser hit might end up more benefitial than an instant kill.
			if (!getSeenPlayer() && !shockRemainder) {
		       A_DamageSelf(250);
               SetStateLabel("death.spinner");
			}
			bNoPain = true;
			bNoDropoff = false;
			invoker.wallsmashed = false;
			if (CheckProximity("WeaponMeleeEnhanced", 80)) {
				invoker.damagedByEnhancedMelee = true;
			}
		}
		 TNT1 A 0 A_Pain();
		 TNT1 A 0 {
			bNoPain = true;
			bFORCEXYBILLBOARD = true;
		}
		GUMH ABCDEFEFEFGH 3 {
			if((vel.x == 0 && vel.y == 0) || CharacterIsNearWall()) {
				SetStateLabel("SmashedWall");
			}
			A_RECOIL(2);
			A_SPAWNITEMEX("SparkEffect", 0,10,0 );
			A_SPAWNITEMEX("SparkEffect", 0,-9,0 );
		}
		TNT1 A 0 {
			SetStateLabel("missile");
		}
	SmashedWall:
		TNT1 A 0;
		TNT1 A 0;
		TNT1 A 0 A_PAIN();
		TNT1 A 0 A_playSound("impact/bonehit", CHAN_AUTO, 0.6, 0, 0.9);
		GUP5 A 6 {
			a_recoil(4);
			SpawnSmashParticles();
		}
		TNT1 A 0;
		GUP5 BCDEF 3;
		TNT1 A 0;
        Goto SeeContinue;

	Pain.right:
		TNT1 A 0 {
			sprite = GetSpriteIndex(SPRITE_PainShoulder1);
			A_Pain();
		}
		GUP1 ABCDE 3 {
			if(heavyPain) {
				A_SETTICS(4); // Hit by heavy pain, longer stagger.
			}
		}
	    Goto SeeContinue;
	Pain.left:
		TNT1 A 0 {
			sprite = GetSpriteIndex(SPRITE_PainShoulder1);
			A_Pain();
		}
		GUP2 ABCDE 3 {
			if(heavyPain) {
				A_SETTICS(4); // Hit by heavy pain, longer stagger.
			}
		}
	    Goto SeeContinue;
	Pain_NOStumble:
		ALIP G 0 A_Pain();
		TNT1 A 0 {
			vel.x = 0;
			vel.y = 0;
		}
		TNT1 A 0 A_Jump(256, "Pain.Shoulder_right", "Pain.Shoulder_left");
		goto Pain.shoulder_left;
   Pain.Avoid:
	    TNT1 A 0;
		TNT1 A 0 A_PlaySound("grunt/dodge", 25.0, 0.7);
	    TNT1 A 0 A_Jump(256, "MissileLeft", "MissileRight","MissileLeft", "MissileRight","MissileLeft", "MissileRight");

		Death.Ice:
		Death.Freeze:
		Death.Frost:

		TNT1 A 0 {
			bSolid = false;
			bShootable = false;
		}
		Stop;
	Pain.MeleeImpactTaser:
		TNT1 A 0 {
			shockRemainder = 60;
		}
	Pain.StunningShock:
	Pain.ShockedStandActualLooper:
		GUPS A 0 {
			int random = random(0,3);
			if (random == 0) {shockFrame = 1;}
			if (random == 1) {shockFrame = 2;}
			if (random == 2) {shockFrame = 3;}
			if (random == 3) {shockFrame = 4;}
		}
		GUPS A 2 {
			shockEffects(60);
			frame = shockFrame;
		}
		TNT1 A 0 {
			shockFrame++;
		}
		GUPS A 2 {
			shockEffects(60);
			frame = shockFrame;
		}
		GUPS A 0 {
			shockRemainder--;
			if(random(0, 100) >= 99 && shockAmplified) {
				setStateLabel("stomped");
			}
			if(shockRemainder == 0) {
				setStateLabel("SeeContinue");
			}
		}
		loop;	
	}
}

class GunnerShield : PlasmaShieldActor {
	int frameID;
	const DESIRED_ALPHA = 0.9;

	override void PostBeginPlay() {
		super.PostBeginPlay();
		frame = 0;
	}

    override void tick() {
        super.tick();
		roll = frandom(-0.1,0.1);
        if(master) {
            warp(Master, 30, 0, 5,  flags: WARPF_INTERPOLATE | WARPF_NOCHECKPOSITION);
        }
		else
		{
			die(self,self);
		}
		if(alpha <= 0.9) {
			scale.x += 0.029;
			alpha+=0.05;
		}
/* 		if(((master) && master.health <= 0) || !master) {
			die(self, self);
		} */
    }

	override void die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		if(master && master is "gunner") {
			let gunnerProperties = gunner(master);
			gunnerProperties.allowShield = false;
			gunnerProperties.destroyAllyShields();
		}

		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}

	default {
		health 220;
		+SelacoActor.EnemyProjectilePassThru;
		-flatsprite;
	}

	states {
		Index:
			GUSH A 0;
		Spawn:
			GUSH A 0;
            TNT1 A 0 {
                A_PLAYSOUND("EnergyShield/Deploy", CHAN_AUTO);
                A_PLAYSOUND("script/shieldloop", CHAN_AUTO, 0.7, 1);
				SetStateLabel("ShowShield");
            }
		ShowShield:
			GUSH AAAAAAAAAAAAAAA 1 BRIGHT;
		Looper:
			GUSH A -1 BRIGHT;
			stop;
        Death:
            TNT1 A 0 A_SpawnItemEx ("SparkEmberUpward",0,0,20,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 AAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("RedPlasmaPuff", frandom(-5,5), frandom(-1*radius, radius), frandom(2,65));
            TNT1 A 0 A_PlaySound ("EnergyShield/Destroy", CHAN_AUTO, 1.0, 0, 0.6);
            stop;
	}
}

class HeavyGunnerShield : GunnerShield {
	override void beginPlay() {
		A_SetSize(radius*1.25, height*1.25);
		scale*=1.25;
		super.beginPlay();
	}
	default {
		health 600;
	}
	states {
		ShowShield:
			GUHH AAAAAAAAAAAAAAA 1 BRIGHT;
		Looper:
			GUHH A -1 BRIGHT;
			stop;
	}
}

class SquadShield : GunnerShield {
	
	int aliveTime;
	default {
		-FLATSPRITE;
		+PlasmaShieldActor.weakShield;
		DamageFactor "MeleeImpact", 20;
		DamageFactor "MeleeImpactTaser", 20;
		BloodType "PlasmaPuff", "PlasmaPuff", "PlasmaPuff";
		health 120;
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		frame = 1;
	}
	
	states{
		ShowShield:
			GUSH BBBBBBBBBBBBBBB 1 BRIGHT;
		Looper:
			GUSH B -1 BRIGHT;
			stop;
        Death:
            TNT1 A 0 A_SpawnItemEx ("SparkEmberUpward",0,0,20,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 SpawnLight(60, 60, 255, 90, divisionSpeed:1.25);
			TNT1 AAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("PlasmaPuffNoLights", frandom(-5,5), frandom(-1*radius, radius), frandom(2,65));
            TNT1 A 0 A_PlaySound ("EnergyShield/Destroy", CHAN_AUTO, 1.0, 0, 0.6);
            stop;
	}
}

class SuppressionPoint : AINodes
{
	default
	{
		radius 60;
		height 3;
	}
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A random(120,175);
			stop;
	}
}

class HeavyGunner : Gunner {

	override void beginPlay() {
		A_SetSize(radius*1.15, height*1.15);
		scale*=1.15;
		super.beginPlay();
	}

	override void SpawnShield() {
		if(allowShield) {
			[shieldSuccess, shieldActor] = A_SPAWNITEMEX("HeavyGunnerShield", 10, 0, 10, flags:SXF_SETMASTER);
		}
	}


	override void FireGunnerMinigun() {
		A_FACETARGET();
		spoolupMinigun(1);
		if(minigunCooldown >= COOLDOWN_REQUIREMENT) {

			if(target is "PathNode" && players[0].mo) {
				target = players[0].mo;
			}
			A_PlaySound("gunner/fireminigun", CHAN_AUTO, 0.75, 0, 0.88, false, frandom(0.8,0.9));
			A_PLAYSOUND("rifle/testshot", CHAN_AUTO , 0.99, 0, 0.7, pitch:frandom(1.23,1.4));
			A_PLAYSOUND("GUNNER/DISTANT", CHAN_AUTO, 0.25, pitch:frandom(0.9,1.3));
			A_SPAWNITEMEX("AlienMuzzleMinigun", 22, 12, 32, 0, 0, 0, SXF_ISMASTER);
			//A_SpawnProjectile("GunFireSmoke", 23, 0, 0, 0, 0, 0);
			//A_SpawnItemEx("BulletImpactSmokeEnemy", zMuzzleLocation, yMuzzleLocation, 32, frandom(1.5, 3), frandom(1.5, 3));
			//A_SpawnItemEx("BulletImpactSmokeEnemy", zMuzzleLocation, yMuzzleLocation, 32, frandom(1, 2), frandom(-1.5, -3));
			//A_SpawnItemEx("BulletImpactSmokeEnemy", zMuzzleLocation, yMuzzleLocation, 32, frandom(1.5, 2), 0, frandom(1.5, 3));
			A_FireEnemyWeapon("AlienMiniguntracer", 42, 6, random(-3, 3), CMF_TRACKOWNER | CMF_OFFSETPITCH , frandom(1.1, -1.2));
			A_FireEnemyWeapon("AlienMiniguntracer", 42, 6, random(-3, 3), CMF_TRACKOWNER | CMF_OFFSETPITCH , frandom(1.1, -1.2));
			A_SpawnItem ("RifleCaseSpawnEnemy", 0, 30,0);
			BurstLength--;
			if (BurstLength <= 0) {
				setStateLabel("EndAttack");
			}
		}
	}

	default {
		Health 310; 	
		BloodType "Selaco_Blood_MEDIUMARMOR", "Selaco_Blood_MEDIUMARMOR", "Selaco_Blood_MEDIUMARMOR";	
	}
}