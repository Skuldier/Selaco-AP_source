enum ZOMBIE_SIGHT_MODE
{
    ZOM_SIGHT_NORMAL = 0,
    ZOM_SIGHT_TURNAROUND = 1,
}

class Zombie_Grunt : SelacoEnemy
{

    const LEAP_CHANCE = 15; // Runs whenever a 'footstep' plays and the target is within range..
    const LEAP_INTERUPT_CHANCE = 25;
    const MELEE_SHOVE_COOLDOWN_MAX = 105;
    int shoveCooldown;
    mixin Pathfinding;

    override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) 
    {

        // Spawn ceiling blood for certain dead causes
		int ceilingDifference = ceilingZ - pos.z;

        if(isGoreyHit) {
			for(int x=0;x<16;x++) {
				A_SpawnItem("SuperGoreRed", frandom(-45,45), frandom(-45,45), frandom(-10, 140));
			}
		}


		if(random(0,100) < CEILING_BLOOD_CHANCE && (ceilingDifference < 200 && damageType == 'head' || ceilingDifference < 250 && damageType == 'shotgun'))
		{
			for(int x=0; x<4;x++)
			{
				A_SPAWNITEMEX("RedCeilingDecal",frandom(-50,50), frandom(-50,50));
			}
		}
		// CEILING GORE -> EXPLOSION
		if(random(0,100) < CEILING_BLOOD_CHANCE*2 && ceilingDifference < 400 && damageType == 'ExplosiveImpact')
		{
			for(int x=0; x<5;x++)
			{
				A_SPAWNITEMEX("RedCeilingDecal",frandom(-80,80), frandom(-80,80));
			}
		}

        Stats.AddStat(STAT_KILLS_INFECTED, 1, 0);  
        A_PLAYSOUND("GORE/KILL", CHAN_AUTO, 1.0, 0, 0.5);
        Super.Die(source, inflictor, dmgflags, MeansOfDeath);
    }

    override void tick()
    {
        super.tick();
        if(shoveCooldown)
        {
            shoveCooldown--;
        }
    }

    // TODO: Maybe add more after Early Access. I dont like how there are so few of them right now, but, time :(
    string deathAnimationToUse;
    string walkCycleSpriteZombie;
	static const string regularDeathAnimations[] = {"ZOMBIE_GRUNT_DEATH_1", "ZOMBIE_GRUNT_DEATH_2", "ZOMBIE_GRUNT_DEATH_3"};
 	static const string headshotDeathAnimations[] = {"ZOMBIE_GRUNT_HEAD_1"};
	static const string shotgunDeathAnimations[] = {"ZOMBIE_GRUNT_SHOTGUN_1", "ZOMBIE_GRUNT_SHOTGUN_2", "ZOMBIE_GRUNT_SHOTGUN_3"};

    int lostTargetCounter;          // Counter until we track with pathfinding instead of A_CHASE
    bool isAlerted;

    bool isLeaping;
    bool leapInterrupted;
/*	static const string sittingDeathAnimationEngineer[] = {"Engineer_Wallsit"};
	static const string wallSmashDeathAnimations[] = {"DeathEngineerWallBang"};
	static const string nailgunDeathAnimation[] = {"DeadEngineer_Nailgun1"};
	static const string gibbingAnimationEngineer[] = {"ENGINEER_GIBBED"}; */

 	virtual string GetHeadshotDeadAnimation() {
		string deathAnimationToUse = headshotDeathAnimations[random(0,headshotDeathAnimations.size()-1)];
		return deathAnimationToUse;
	}

	virtual string GetDeadAnimation() {
		return regularDeathAnimations[random(0,regularDeathAnimations.size()-1)];
	}

/* 	virtual string GetnailgunDeathAnimation() {
		string deathSprite = nailgunDeathAnimation[random(0,nailgunDeathAnimation.size()-1)];
		return deathSprite;
	}
*/

	virtual string GetShotgunDeathAnimation() {
		return shotgunDeathAnimations[random(0,shotgunDeathAnimations.size()-1)];
	}

    // Execute attack when within melee distance
    void A_ClawAttack(int damageAmount = 0)
        {   
            if(!damageAmount)
            {
                damageAmount = damage;
            }
            FTranslatedLineTarget t;
            bool allowHit = true;
            if (target)
            {
                int targetHealth = target.health;
                A_FaceTarget(max_pitch:0);
                double ang = angle;
                double slope = AimLineAttack(ang, 25);
                ang  += Random2[PosAttack]() * (22.5/256);
                LineAttack(ang, 90, slope, damageAmount, "Treeclaw", null, 0, t);

                // Play hurt sound if health decreases
                if(t.lineTarget && targetHealth > t.lineTarget.health)
                {
                    t.lineTarget.A_playsound("zombie/meleehit", CHAN_AUTO);
                }
            }
        }

    // Player is within leap range, attack if possible!
    void approveLeapAttack()
    {
        if(target && floorz == pos.z && random(0,100) <= LEAP_CHANCE && getTargetDistance() > 100 && getTargetDistance() < 380 && isTargetVisible() && target.pos.z-pos.z <= 50)
        {   
                setStateLabel("LeapMeleeStart");   
        }
    }

    // Check if player is within range. If so, strike.
    void handleLeapAttack()
    {
        A_FaceTarget();
        if(vel.length() == 0 || pos.z == floorz || getTargetDistance() <= MeleeRange)
        {
            A_CHANGEVELOCITY(0, 0, -3);
            A_PLAYSOUND("dawn/landingimpactlong", CHAN_AUTO, 1.0, pitch:1.2);
            if(leapInterrupted)
            {
                leapInterrupted = false;
                setStateLabel("LeapMeleeCancel");
            }
            else
            {
                setStateLabel("LeapMeleeAttack");
            }
        }
    }

    void pathFind()
    {
        switch(A_TRACK()) 
        {
            case TRACK_BuildingPath:
                SetStateLabel("TrackPlayer");
                return;
            case TRACK_FoundTarget:
                lostTargetCounter = 0;
                SetStateLabel("BeginChasing");
                return;
            default:
                if(level.time % 15 == 0 || random(0, 100) > 90) 
                {
                    // Constantly rebuild checkseed
                    // This has the nice effect of randomizing the walking pattern
                    checkSeed = random(0,8);    
                }
                break;
        }
    }

    override int takeSpecialDamage (Actor inflictor, Actor source, int damage, Name damagetype) {
        int res = Super.TakeSpecialDamage(inflictor, source, damage, damageType);

        if(inflictor && damageType == "MeleeImpact" && shoveCooldown == 0)
        {
            shoveCooldown = MELEE_SHOVE_COOLDOWN_MAX;
            A_PAIN();
            VelFromAngle(16, inflictor.angle);
        }
		if(damage >= 45 && isLeaping)
        {
            A_PLAYSOUND("ZOMBIE/HURT/GUARANTEED", CHAN_VOICE);
            leapInterrupted = true;
        }
        return res;
    }

    int getTargetDistance()
    {
        if(target)
        {
            return distance3D(target);
        }
        return 0;
    }

    override void postBeginPlay()
    {
        super.postbeginPlay();
        initPathing();
    }

    void restoreDefaults() {
        A_SETSIZE(radius, GetDefaultByType(self.getClass()).height);
    }

    static const String WalkCycles[] = {"BLGW", "BGW2"};
    string shockSprite;
    bool hasSpawned;
    property ShockSprite    : shockSprite;
    default
    {
        tag "$CHARACTER_ZOMBIE";
        SelacoEnemy.role "$ROLE_GRUNT";
        species "Zombie";
        monster;
        speed 7;
        health 120;
        mass 900;
        -SelacoACtor.allowSlideCollision
        -SelacoEnemy.AllowStealthKill;
        SelacoEnemy.PathfindingTargetRangeThreshold 300; // Distance before we stop pathfinding
        PainChance "StunningShock", 255;
        Zombie_Grunt.shockSprite "BLSH";
        SelacoEnemy.enemyType ENEMY_INFECTED;
        damageType "Treeclaw";
        SelfLighting "252525";
        height 59;
        radius 19;
        scale 0.37;
		yscale 0.30;
        damage 18;
        friction 0.8;
        MeleeRange 35; 
        Painchance 190;
        SelacoEnemy.randomizerSpawnChance 100;
        Painsound "ZOMBIE/HURT";
        SeeSound "ZOMBIE/alert";
        ActiveSound "ZOMBIE/alert";
		Bloodtype "ZombieSplatter", "ZombieSplatter", "ZombieSplatter";
    }
    states
    {
        indexer:
        Precache:
            BLGW ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
            BGW2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
            BLSH ABC 0;
            stop;
        Spawn:
            TNT1 A 0
            {
                if(!hasSpawned)
                {
                    hasSpawned = true;
                    setStateLabel("SpawnDelay");
                }
            }
            goto looper;
        SpawnDelay:
            TNT1 A random(1,6);
        Looper:
            TNT1 A 0
            {
                if(args[4] == ZOM_SIGHT_TURNAROUND && special == 0)
                {
                    setStateLabel("WaitForTurnaround");
                }
            }
            BLGI ABCDEEDCBA 4 A_LOOK;
            loop;

        WaitForTurnAround:
            BLTU A 4
            {
                A_LookEx(0, 0, 0, 0, 360, "TurnAround");
            }
            loop;   
        TurnAround:
            BLTU AAA random(3,6);
            BLTU AABCDEFGHIJKLMNOPQRSTUV 3;
            goto see;
        See:    
            TNT1 A 0
            {
                restoreDefaults();
                bxFlip = false;
                hasSpawned = true;
                lostTargetCounter = 0;
            }
        BeginChasing:
        See_Continue:
            BLW1 AAAAAABBBBB 1 {
                if(!isTargetVisible()) {
                    // Go to tracking mode once we've not seen the player for a bit
                    if(++lostTargetCounter > 35) {
                        lostTargetCounter = 0;
                        SetStateLabel("TrackPlayer");
                        return;
                    }
                }
                A_CHASE("Melee", null);
            }
            TNT1 A 0
            {
                approveLeapAttack();
                doFootstep(FSF_ZOMBIESTEP | FSF_SCRIPTEDFOOTSTEP);
            }
            BLW1 CCCCCDDDD 1 {
                if(!isTargetVisible()) {
                    // Go to tracking mode once we've not seen the player for a bit
                    if(++lostTargetCounter > 35) {
                        lostTargetCounter = 0;
                        SetStateLabel("TrackPlayer");
                        return;
                    }
                }
                A_CHASE("Melee", null);
            }
            TNT1 A 0
            {
                if(!targetWithinPathfindingThreshold())
                {
                    lostTargetCounter = 0;
                    SetStateLabel("TrackPlayer");
                    return;
                }
                approveLeapAttack();
                doFootstep(FSF_ZOMBIESTEP | FSF_SCRIPTEDFOOTSTEP);
            }
            loop;

        TrackPlayer:
            BLW1 A 1;
        TrackPlayerLoop:
            BLW1 AAAAAABBBBB 1 {
                pathFind();
            }
            TNT1 A 0
            {
                doFootstep(FSF_ZOMBIESTEP | FSF_SCRIPTEDFOOTSTEP);
            }
            BLW1 CCCCCDDDD 1 {
                pathFind();

            }
            TNT1 A 0
            {
                doFootstep(FSF_ZOMBIESTEP | FSF_SCRIPTEDFOOTSTEP);
            }
            loop;

        // When we lose track of the player we might need a half second to build the path
        BuildPathIdle:
			// This frame prevents an infinite loop if an enemy goes to idle and then builds a path in a single tick
			// Remove it if you dare.
			BLGI A 1;
			BLGI AAABBBCCEEEDDCCCBBB 1
			{
				if(A_TRACK() != TRACK_BuildingPath) {
					SetStateLabel("TrackPlayer");
					return;
				}
			}
			Loop;
        
        Pain.LandOnYourAss:     // Added to prevent infinite loop caused by SelacoEnemy state jump
        Pain.MeleeImpact:
        Pain:
            TNT1 A 0 {
                bNoPain = true;
            }
            // TODO: Give them the 'evade chance' property
            // TODO: Add evade cooldown to prevent them from evading too much
            TNT1 A 0 A_JUMP(256, "DoPain", "DoPain", "DoEvade");
        DoEvade:
            TNT1 A 0
            {   
                // If zombie does not touch the floor, do pain instead.
                if(abs(pos.z-floorz) >= 3)
                {
                    setStateLabel("DoPain");
                }
            }
            TNT1 A 0 A_JUMP(256, "Pain_evade_right", "Pain_evade_Left");
            goto Pain_evade_right;
        // Evade to a direction, move forward a little
        Pain_evade_right:
            BGE1 ABC 3;
            TNT1 A 0 
            {
                A_PLAYSOUND("ZOMBIE/EVADE", CHAN_VOICE, 0.6, pitch:1.1);
                if(target)
                {
                    A_FACE(target);
                    A_CHANGEVELOCITY(10, frandom(-8,-12), 4, CVF_RELATIVE);
                }
            }
            BGE1 DEF 3;
            TNT1 A 0 A_PLAYSOUND("dawn/landingimpactshort", CHAN_AUTO, pitch:0.8);
            BGE1 DEGH 3;
            goto Pain_End;
        // TODO: Animate.
        Pain_evade_Left:
            TNT1 A 0
            {
                bXflip = true;
            }
            BGE1 ABC 3;
            TNT1 A 0 
            {
                A_PLAYSOUND("ZOMBIE/EVADE", CHAN_VOICE, 0.6, pitch:1.1);
                if(target)
                {
                    A_FACE(target);
                    A_CHANGEVELOCITY(10, frandom(8,12), 4, CVF_RELATIVE);
                }
            }
            BGE1 DEF 3;
            TNT1 A 0 A_PLAYSOUND("dawn/landingimpactshort", CHAN_AUTO, pitch:0.8);
            BGE1 DEGH 3;
            TNT1 A 0
            {
                bXflip = false;
            }
            goto Pain_End;
        DoPain:
            TNT1 A 0 A_PAIN();
            TNT1 A 0 A_JUMP(256, "Pain_Left", "Pain_Right");
        Pain_Left:
            BLP1 ABCDEF 2;
            goto Pain_End;
        Pain_Right:
            BLP2 ABCDEF 2;
            goto Pain_End;
        Pain_End:
            TNT1 A 0
            {
                bNoPain = false;
            }
            goto See;
        Melee:
            TNT1 A 0 A_JUMP(256, "Melee1", "Melee2");
        Melee1:
            TNT1 A 0
            {
                A_PLAYSOUND("ZOMBIE/EVADE", CHAN_VOICE, 0.75);
            }
            BLM1 ABCD 2;
            BLM1 E 3 A_PLAYSOUND("zombie/swing", CHAN_6, 0.4);
            BLM1 FG 2;
            TNT1 A 0 A_ClawAttack();
            BLM1 H 3;
        LeapMeleeCancel:
            BLM1 IJKLMNOP 3;
            goto see;
        Melee2:
            TNT1 A 0
            {
                A_PLAYSOUND("ZOMBIE/EVADE", CHAN_VOICE, 0.75);
            }
            BLM2 ABCD 2;
            BLM2 E 3 A_PLAYSOUND("zombie/swing", CHAN_6, 0.4);
            BLM2 FGH 2;
            TNT1 A 0 A_ClawAttack();
            BLM2 IJKLMNOPQR 3;
            goto see;
        LeapMeleeStart:
        // Jump
            TNT1 A 0 A_PLAYSOUND("ZOMBIE/LEAP", CHAN_VOICE);
            BLML A 5;
            BLML A 1
            {
                leapInterrupted = false;
                isLeaping = true;
                bNoPain = true;
                A_PLAYSOUND("zombie/swing", CHAN_6, 0.5, pitch:1.4);
                A_CHANGEVELOCITY(5, 0, 7, CVF_RELATIVE);
            }
            BLML AAAAA 1
            {
                A_FaceTarget();
                handleLeapAttack();
                A_CHANGEVELOCITY(4, 0, 0, CVF_RELATIVE);
            }
        LeapMeleeLoop:
        // Wait for the target to get within range or to hit the floor
            BLML B 1
            {
                handleLeapAttack();
            }
            loop;
        LeapMeleeAttack:
            BLM2 H 2
            {
                isLeaping = false;
                A_FaceTarget();
            }
            TNT1 A 0
            {
                A_ClawAttack(damage*0.5);
            }
            BLM2 IJKLMOPQ 2;
            goto Pain_End; 
        Death:
            TNT1 A 0 A_PLAYSOUND("ZOMBIE/DEAD", CHAN_VOICE, 0.8);
            TNT1 A 0 {
                if(isFrozen) {setStateLabel("death.frostexplosion");}
            }
            TNT1 A 0 A_SPawnItemEx(GetDeadAnimation());
            stop;
        Death.Shotgun:
            TNT1 A 0 A_PLAYSOUND("ZOMBIE/DEAD", CHAN_VOICE, 0.8);
            TNT1 A 0
            {
                EmitDefinition('grassparticleDefinition', chance: 1.0, numTries: 2, offset:(-10,0,24));
                EmitDefinition('GrassBladeParticleDefinition', chance: 1.0, numTries: 23, offset:(-10,0,24));
                EmitDefinition('GrassBladeParticleWildDefinition', chance: 1.0, numTries: 32, offset:(-10,0,24));
                for(int x=0;x<4;x++)
                {
                    A_SPAWNITEMEX("SuperGoreRed", frandom(-10,10), frandom(-10,10), frandom(0,40));
                }
            }
            TNT1 AAAA 0 A_SpawnProjectile ("HumanBrainPiece", height-5, frandom(-5,5), random (0, 360), 2, random (-140,-160));
            TNT1 A 0 A_JumpIfCloser(105, "Stomped");
            TNT1 AAAAA 0 A_SpawnProjectile ("HumanIntestine", frandom(25,35), random(-30,30), random (0, 360), 2, random (-30, -180));
            TNT1 A 0 A_SPawnItemEx(GetShotgunDeathAnimation());
            stop;
    	Death.FrostExplosion:
            TNT1 A 0 A_StopSound(CHAN_VOICE );
            TNT1 A 0  A_PlaySound("dest/glassm",CHAN_AUTO);
            TNT1 A 0 A_PLAYSOUND("destruction/glassbreak", CHAN_AUTO, pitch:0.7);
            TNT1 AAAAAA 0 A_SpawnProjectile ("HumanBrainPiece", height-5, frandom(-5,5), random (0, 360), 2, random (-140,-160));
            TNT1 AAAAAAAAAAA 0 A_SpawnProjectile ("HumanIntestine", frandom(25,35), random(-30,30), random (0, 360), 2, random (-30, -180));
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("LargeGlassParticle2", random(-3, 3), random(-3, 3), random(6, 68), random(-4, 4), random(-4, 4), random(3, 6));
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("LargeGlassParticle3", random(-3, 3), random(-3, 3), random(-3, 78), random(-4, 4), random(-4, 4), random(3, 6));
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("LargeGlassParticle4", random(-3, 3), random(-3, 3), random(-3, 78), random(-4, 4), random(-4, 4), random(3, 6));
            stop;
        Death.Head:
            TNT1 A 0 A_Playsound("Smallheadshot", CHAN_AUTO);
            TNT1 A 0 A_StopSound(CHAN_VOICE);
            TNT1 A 0 A_PlaySound("combat/headshot");
            TNT1 A 0 {
                height = 50;
                if(isFrozen) {setStateLabel("death.frostexplosion");}
            }
            TNT1 AAAA 0 A_SPawnItemEx("BloodChunks", frandom(-5,5), frandom(-10,10), frandom(24,42), frandom(-6,6), frandom(-6,6), frandom(4,7));
            TNT1 AAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BonePartHuman", random(-20,20), random(-20, 20), random(10, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
            TNT1 A 0
            {
                A_SPAWNITEMEX("SuperGoreRed", 0, 0, 40);
                A_SPAWNITEMEX("SuperGoreRed", 0, 0, 40);
            }
            TNT1 A 0 {
                for(int x=0; x<40;x++) {
                    A_SPAWNITEMEX("MaggotSpawn", frandom(-5,5), frandom(-5,15), frandom(30, 50), frandom(-2,2), frandom(-2,2), frandom(3.2,9));
                }
                for(int i=0;i<3;i++) {
                    A_SPAWNITEMEX("MaggotDecal", frandom(0, 65), angle:random(0,360));
                }
            }
            TNT1 AAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("HumanIntestine", frandom(-5,5), frandom(-5,15), frandom(height, height+10), frandom(-3,3), frandom(-3,3), frandom(0.2,7));
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("HumanBrainPiece", frandom(-5,5), frandom(-5,15), frandom(height, height+10), frandom(-3,3), frandom(-3,3), frandom(0.2,7));
            TNT1 AA 0 A_SpawnProjectile ("BloodSplatterEffect", 32, 0, random (0, 360), 2, random (-10, -70));
            TNT1 AAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("BloodSplatterEffect", random(-10, -10), random(-16,16),frandom(height+10,height+20), random(-3,3), random(-3,3),random(1,7));
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("BloodSplatterEffect", random(-10, -10), random(-15,15),frandom(height+10,height+20), random(-3,3), random(-3,3),random(1,7));
            TNT1 A 0 {
                for(int x=0;x<getCvar("r_bloodquality");x++) {
                    for(int x=0;x<=3;x++) {
                        A_SpawnItemEx("BloodTrailMissile", frandom(-4, 4), frandom(-4, 4),frandom(height,height-10), frandom(-4, 4), frandom(-4, 4), frandom(3, 10), random(0,360));
                    }
                }
            }
            TNT1 A 0;
            TNT1 A 0 {
                // No decapitated head for Censored Mode
                if(getCvar("g_censoredMode") == 1) {
                    A_SPAWNITEMEX(GetDeadAnimation(), flags:SXF_TRANSFERTRANSLATION);
                } else {
                    A_SPAWNITEMEX(GetHeadshotDeadAnimation(), flags:SXF_TRANSFERTRANSLATION);
                }
            }
            stop;
        Pain.MeleeImpactTaser:
            TNT1 A 0 {
                // The initial impact
                S_EXPLODE(5, 600, 0, 0, 0, 0, 0, "BulletPuff", "StunningShock");
            }
        Pain.StunningShock:
        Pain.ShockedFloorSetup:
            BLSH A 0 {
                bNoPain = true;
                sprite = GetSpriteIndex(shockSprite);
            }
        Pain.ShockedFloorActual:
            TNT1 A 0
            {
                sprite = GetSpriteIndex(shockSprite);
                int random = random(0,3);
                if (random == 0) {shockFrame = 0;}
                if (random == 1) {shockFrame = 2;}
                if (random == 2) {shockFrame = 4;}
                if (random == 3) {shockFrame = 6;}
            }
            TNT1 AA 0 {
                A_SetTics(random(1,2));
                frame = shockFrame;
                if(shockRemainder>0) { shockEffects(35);}
            }
            TNT1 A 0 {
                shockFrame++;			
            }
            TNT1 AA 0 {
                A_SetTics(random(1,2));
                frame = shockFrame;
                shockRemainder--;
                if (shockRemainder == 0) {
                    bNoPain = false;
                    SetStateLabel("See");
                }
            }
            loop;
        
        // Absolutely fucked!
        Death.Acid:
		TNT1 A 0 {
			for(int x=0;x<30;x++) {
				A_SpawnItemEx("BonePartHumanLarge", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
				A_SpawnItemEx("BonePartHuman", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
				A_SpawnItemEx("BonePartHuman", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
			}
		}
	 	goto Stomped;
        death.plasma:
            TNT1 A 0 {
                for(int x=0;x<12;x++) {
                    A_SpawnItemEx("BonePartHumanLarge", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
                    A_SpawnItemEx("BonePartHuman", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
                    A_SpawnItemEx("BonePartHuman", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
                }
                a_playsound("ELECTRIC/GIB", CHAN_AUTO, 0.8, 0, 0.7, pitch:0.8);
                A_PLAYSOUND("dest/JunctionBox", CHAN_AUTO, 0.7, 0, 0.9, pitch:frandom(1.6,2.2));
                A_SpawnItem("BaseShockwaveSmaller", 0, 0, 40);
            }
        xdeath:
        Death.ExplosiveImpact:
        Death.railattack:
            TNT1 A 0 {
                for(int x=0;x<15;x++) {
                    A_SPAWNITEMEX("HumanBloodSplatters", frandom(-90,90), frandom(-90,90));
                    A_SPAWNITEMEX("SuperGoreRed", frandom(-45,45), frandom(-65,65), frandom(0,80));
                }
            }
        Stomped:
            TNT1 A 0
            {
                int oldAngle = angle;
                for(int x=0;x<17;x++)
                {
                    angle = random(0,360);
                    vector3 sprayDirection = vecFromAngle(angle, pitch);
                    A_SprayDecal("BloodSplat", 100, offset:(0,0,frandom(0,80)), direction:sprayDirection);
                }
                angle = oldangle;
                A_PLAYSOUND("impact/bonehit", CHAN_AUTO, 0.6, 0, 0.6, 0, frandom(0.7,1.1));
                for(int x=0;x<9;x++)
                {
                    A_SPAWNITEMEX("SuperGoreRed", frandom(-45,45), frandom(-45,45), frandom(0,40));
                }
                for(int x=0;x<12;x++)
                {
                    emit('PlasmaMoltenSteelFast', chance: 0.75, numTries: 20, offset:(random(-25,25),random(-25,25),random(0,60)));
                }
                for(int x=0; x<70;x++) {
                    A_SPAWNITEMEX("MaggotSpawn", frandom(-25,25), frandom(-25,25), frandom(2, 50), frandom(-4,4), frandom(-4,4), frandom(-3,9));
                }
                for(int i=0;i<8;i++) {
                    A_SPAWNITEMEX("MaggotDecal", frandom(0, 100), angle:random(0,360));
                }
                A_SPawnItemEx("BloodChunks", 0, 0, 24, frandom(-6,6), frandom(-6,6), frandom(4,7));
            }
            TNT1 AAAAAAAA 0 A_SpawnItemEx("BonePartHumanLarge", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
            TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile ("HumanBrainPiece", height-5, frandom(-5,5), random (0, 360), 2, random (-140,-160));
            TNT1 AAAAAAAAAAAAAA 0 A_SpawnProjectile ("HumanIntestine", frandom(10,45), random(-30,30), random (0, 360), 2, random (-30, -180));
            TNT1 A 0 A_SpawnProjectile ("BloodSplatterEffect", 32, 0, random (0, 360), 2, random (-10, -70));
            TNT1 A 0 A_SPAWNITEMEX("BloodSplatterEffect", random(-10, 10), random(-8,8),frandom(height,height+20), random(-3,3), random(-3,3),random(1,6));
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("BloodSplatterEffect", random(-25, 25), random(-25,25),frandom(height,height+20), random(-3,3), random(-3,3),random(1,6));       
            TNT1 A 0 A_SpawnProjectile("ZombieChest", 32, frandom(-5,5), angle:-180, flags:2,pitch:frandom(-60,-150));
            TNT1 A 0 A_SpawnProjectile("ZombieClaw", 24, frandom(-20,20), angle:-180, flags:2,pitch:frandom(-60,150));
            TNT1 A 0 A_SpawnProjectile("ZombieLeg", 20, frandom(-20,20), angle:frandom(120,-120), flags:2,pitch:frandom(-40,-150));   
            TNT1 A 0 A_SpawnProjectile("ZombieLegMirror", 20, frandom(-20,20), angle:frandom(-120,120), flags:2,pitch:frandom(-40,-150));
            TNT1 A 0 A_SpawnProjectile("ZombieHead", 20, frandom(-5,5), angle:frandom(-120,240), flags:2,pitch:frandom(-40,-150));
            TNT1 A 0 A_SpawnProjectile("ZombieArm", 20, frandom(-20,20), angle:frandom(-120,120), flags:2,pitch:frandom(-40,-150));
            TNT1 A 0;
            stop;

        GruntAmbush:
            BLM1 H 3;
            BLM1 IJKLMNOP 3;
            goto see;

    }
}