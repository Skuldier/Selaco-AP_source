
mixin class AirdroneBase {
    void BellyFlop() {
        EmitDefinition('ShortSparkParticleDefinition', chance: 0.75, numTries: 45, angle:frandom(0, 360), pitch:frandom(0, 40), speed:frandom(1,2));
        A_SPAWNITEMEX("airDroneSmoke", frandom(-3,3), frandom(-3,3), 5);
        A_SPAWNITEMEX("airDroneSmoke", frandom(-3,3), frandom(-3,3), 5);
    }

    default {
        +NOGRAVITY;
        monster;
        +FLOAT;
        speed 5;
        mass 10000;
        Painchance 76;
        health 200;
        radius 42;
        height 40;
        scale 0.6;
        Painsound "impact/mechanical";
        BloodType "BulletImpactEffectArmorBigOil", "BulletImpactEffectArmorBigOil", "BulletImpactEffectArmorBigOil";
    }
}

class Airdrone : SelacoEnemyRobot {
    const ROCKET_CHANCE = 5;
    mixin AirdroneBase;
    mixin AI_StrafeNodeSystem;

	static const String DeathAnimations[] = {"AirdroneDeath1", "AirdroneDeath2", "AirdroneDeath3"};
    String DeathAnimation;

    mixin AI_AltitudeCorrection;
    int seed;  
    float yVelocity;
    float xVelocity;   
    int burstsLeft;
    const preferredDistance = 450;

	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		A_StopSound(CHAN_7); // Stop jet sound
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}    

	override void tick() {
		super.tick();
        if(health > 0 && level.time){
            checkAltitude(); // AI_AlitudeCorrection
        }
		A_SPAWNITEMEX("AirdroneSmoke", 0, 0, 32);
    }

    default {
        SelacoEnemy.EnemyType ENEMY_ROBOT;
        +SELACOENEMY.FlyingEnemy
        +FORCEXYBILLBOARD
    	-SelacoEnemy.AllowHeadshots;
	    -SelacoEnemy.AllowStealthKill;
        SelacoEnemy.randomizerSpawnChance 10;
        +NOBLOODDECALS
        SelacoEnemy.WeaponDamage 2;
        SelacoEnemy.WeaponDamageOffset 2;
        selfLighting "656565";
    }

    override void BeginPlay() {
        super.BeginPlay();
        
        setOffsetInfo(); // AI_AlitudeCorrection
        A_PLAYSOUND("sieger/jetpack", CHAN_7, 0.7, 1, 0.9, 0, frandom(0.7,1.2));
        DeathAnimation = DeathAnimations[random(0, DeathAnimations.size()-1)];
    }

    void popFlares()
    {
        spawnLight(255, 100, 35, 100, 0, -1 ,overbright:0, divisionSpeed:1.1, zOffset:20);
        for(int x=0;x<5;x++)
        {
            A_SPAWNITEMEX("LockOnFlare", frandom(-15,15), frandom(-15,15), frandom(-25,0), frandom(-6,6), 0, frandom(0.1,0.8), angle:random(0,360));
        }
    }
    
    void moveTowardsTarget() {
        if(target) {
            // Moves the Airdrone into the direction of it's current angle.
            // Returns false when blocked.
            isStrafing = false;
            int oldMoveDir = moveDir;
            A_Face(target);
            if(Distance2DSquared(target) > preferredDistance*preferredDistance) {
                moveDir = (8 * angle / 360) % 8;
                if (!TryWalk()) {
                    moveDir = oldMoveDir;
                    if (!TryWalk()) {
                        NewChaseDir();
                    }
                }
            } else
            {
                A_ChangeVelocity(-0.2, 0, 0, CVF_RELATIVE);
            }
        }
    }

    int ROFTick;
    virtual void attackPlayer() {
        burstsLeft--;
        int muzzleflashOffset;
        int brassAngle;
        muzzleflashOffset = -14;
        brassAngle = 90;
        if(burstsLeft % 2 == 0) {
            brassAngle = 270;
            muzzleflashOffset = 14;
        }

        actor droneMuzzle;
        bool dickbutt;

        isStrafing = false;
        A_FACETARGET();
        A_PlaySound("AIRDRONE/attack", CHAN_AUTO, 1.0, 0, 0.65, false, frandom(0.9,1.05));
        [dickbutt, droneMuzzle] = A_SPAWNITEMEX("AirDroneMuzzle", 6, 0+muzzleflashOffset, 10, 0, 0, 0, SXF_SETMASTER);
        if(droneMuzzle)
        {
            AlienMuzzle(droneMuzzle).master = self;
            AlienMuzzle(droneMuzzle).effectOffset = (0, muzzleFlashOffset, 8);
        }
        A_SpawnProjectile("GunFireSmoke", 0, 0, 0, 0, 0, 0);
        A_SpawnItemEx("BulletImpactSmokeEnemy", 6, 0, 32, frandom(1.5, 3), frandom(1.5, 3));
        A_SpawnItemEx("BulletImpactSmokeEnemy", 6, 0, 32, frandom(1, 2), frandom(-1.5, -3));
        A_SpawnItemEx("BulletImpactSmokeEnemy", 6, 0, 32, frandom(1.5, 2), 0, frandom(1.5, 3));
        A_SpawnProjectile("EmptyBrassAirdrone", angle:brassAngle, flags:CMF_AIMDIRECTION, pitch:frandom(-35,-55));
        A_FireEnemyWeapon("DroneTracer", 5, 2, frandom(-3.5, 3.5), CMF_TRACKOWNER | CMF_OFFSETPITCH , frandom(1.1, -1.2));
    }

    void fireRocket()
    {
         A_SpawnProjectile("AirdroneRocket", 16, 2, 0, CMF_TRACKOWNER | CMF_OFFSETPITCH , 0);
    }

    void decideNextMove() {
        isStrafing = false;
        int diceroll = random(0,3);
        // Go left
        if(diceroll == 0) {
            setStateLabel("GoLeft");
        }
        // Go Right
        if(diceroll == 1) {
            setStateLabel("GoRight");
        }
        // Return to normal
        if(diceroll >= 2) {
            setStateLabel("See");
        }
    }

    states {
        index:
        Spawn:
            ADMV ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
            ADMV A 1 A_LOOK;
            loop;
        See:
            TNT1 A 0 {
                bFloat = true;
                bNoGravity = true;
                isStrafing = false;
                killStrafeNodes();
                A_CHANGEVELOCITY(0, 0, 0, CVF_REPLACE || CVF_RELATIVE);
                SetSeenPlayer();
            }
            ADMV A 1 moveTowardsTarget();
        SeeContinue:
            ADMV AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUVVWWXXYY 1 {
                if(random(1,100) <= 40)
                {
                    A_CHANGEVELOCITY(0,frandom(-1,1),frandom(-4,4), CVF_RELATIVE);
                }
                isStrafing = false;
                A_FACETARGET();
                A_CHASE();
            }
            loop;

        // Start attacking the player
        Missile:
            TNT1 A 0
            {
                denyPlayerSaving();
                if(random(1,100) <= 60)
                {
                    A_CHANGEVELOCITY(0,frandom(-1,1),frandom(-4,4), CVF_RELATIVE);
                }
                if(random(0,100) <= ROCKET_CHANCE)
                {
                    SetStateLabel("LaunchRocket");
                }
            }
            // Target found, reset searchticks back to 0
            ADMV AAAAAA 2 moveTowardsTarget();
            TNT1 A 0 {
                burstsLeft = random(8,16);
            }
        MissileFire:
            TNT1 A 0 {
                if(!CheckSight(target)) {
                    decideNextMove();
                }
            }
            TNT1 A 0 {
                if(burstsLeft <= 0) {
                    decideNextMove();
                }
            }
            ADAT A 1 attackPlayer();
            ADAT BCD 1 moveTowardsTarget();
            ADAT E 1 attackPlayer();
            ADAT FGH 1 moveTowardsTarget();
            TNT1 A 0 {
                if(random(0,25) == 0) {
                    decideNextMove();
                }
            }   
            loop;
        LaunchRocket:
            ADMV A 1
            {
                actor rocketDest;
                bool success;
                bNoPain = true;
                A_FACETARGET();
                if(target)
                {
                    A_PlaySound("AIRDRONE/PREPAREROCKET", CHAN_6);
                    [success, rocketDest] = target.A_SPAWNITEMEX("RocketDestination");
                    if(rocketDest)
                    {
                       target = rocketDest; 
                    }
                }
            }
            ADMV AAAAAAA 4
            {
                A_SPAWNITEMEX("RocketFlare", 6, 0, 24);
            }
            ADMV A 1
            {
                A_PLAYSOUND("AIRDRONE/FIREROCKET", CHAN_6, 1.0, 0, 0.38);
                fireRocket();
                bNoPain = false;
                if(players[0].mo)
                {
                    target = players[0].mo;
                }
            }
            goto see;
        // SCRIPTED - MOVE UP
        Script_MoveUp:
            ADMV AABBCCDDEEFFGGHHIIJJKKLLMM 1 {
                A_CHANGEVELOCITY(0, 0, 0.90, CVF_RELATIVE);
            }
            ADMW C 1
            {
                A_CHANGEVELOCITY(0,0,-9, CVF_RELATIVE);
            }
            goto see;
        // Strafe Manouvre 
        GoLeft:
            ADSL A 1 {
                isStrafing = true;
                createStrafeNodes(STF_LEFT, 5);
            }
            ADSL AABBCCDDEEFFFFFFEDDBBCCA 1 {
                A_FACETARGET();
                if(!validateStrafe() || checkGeometryCollision(-1, 35)) {
                    setStateLabel("LeftBlocked");
                }
                A_CHANGEVELOCITY(0, 0.75, 0, CVF_RELATIVE);
                A_FACETARGET();
            }
            goto see;
    
        // Strafe Manouvre 
        GoRight:
            ADSR A 1 {
                isStrafing = true;
                createStrafeNodes(STF_RIGHT, 5);
            }
            ADSR AABBCCDDEEFFEDDBBCCA 1 {
                A_FACETARGET();
                if(!validateStrafe() || checkGeometryCollision(-1, 35)) {
                    setStateLabel("RightBlocked");
                }
                A_CHANGEVELOCITY(0, -0.75, 0, CVF_RELATIVE);
                A_FACETARGET();
            }
            goto see;

        LeftBlocked:
            TNT1 A 0 {
                vel.x = 0;
                vel.y = 0;
            }
            ADSL DCBA 2;
            ADSR ABCDDACBA 2 {
                A_FACETARGET();
                isStrafing = true;
                A_CHANGEVELOCITY(0, -0.2, 0, CVF_RELATIVE);
            }
            TNT1 A 0 {
                decideNextMove();
            }
            goto see;

        RightBlocked:
            TNT1 A 0 {
                vel.x = 0;
                vel.y = 0;
            }
            ADSR DCBA 2;
            ADSL ABCDDACBA 2 {
                A_FACETARGET();
                isStrafing = true;
                A_CHANGEVELOCITY(0, 0.2, 0, CVF_RELATIVE);
            }
            TNT1 A 0 {
                decideNextMove();
            }
            goto see;
        // PAIN STATES
        Pain.ExplosiveImpact:
        Pain.MeleeImpact:
            TNT1 A 0 A_CHANGEVELOCITY(-2.2,0,0.4, CVF_RELATIVE);
        Pain.MagnumBullet:
        Pain.SniperBullet:
        Pain:
            TNT1 A 0 {
                A_SPAWNITEMEX ("SparkMissile", 25, 0, 0, 3, 0, 2, angle-180);
                A_SPAWNITEMEX ("SparkMissile", 25, 0, 0, 3, 0, 2, 180);
                bNoPain = true;
            }
            TNT1 A 0 A_JUMP(256, "Pain1", "pain2");
        Pain1:
            ADP1 ABCDEFGHIJK 2;
            TNT1 A 0 {
                bNoPain = false;    
            }
            goto See;
        Pain2:
            ADP2 ABCDEFGHIJKLM 2;
            TNT1 A 0 {
                bNoPain = false;    
            }
            goto See;
        Pain.Ice:
            TNT1 A 0 {
                A_SetTranslation("FrozenEnemy");
                isFrozen = true;
                bnoGravity = false;
                bNoPain = true;
                setFallHeight();
            }
            ADMV A 1 {
                A_Playsound("dest/icecrack", CHAN_AUTO);
            }
            ADMV AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 2 {
                if(ApplyFallDamage()) {
                    setStateLabel("death.frostexplosion");
                }
                for(int x=0;x<=25;x++) {
                    A_SpawnParticle("white", SPF_FULLBRIGHT, 15, frandom(3,5), frandom(0,360), frandom(-26,26), frandom(-26,26), frandom(10,70), frandom(-5,5), frandom(-3,3), frandom(-2,2));
                }
            }
            TNT1 A 0 {
                A_SetTranslation("");
                bNoPain = false;
                isFrozen = false;
            }
            goto See;
        Pain.MeleeImpactTaser:
            TNT1 A 0 {
                // The initial impact
                A_Explode(5, 600, 0, 0, 0, 0, 0, "BulletPuff", "StunningShock");
            }
        Pain.StunningShock:
        Pain.ShockedFloorSetup:
            ADSH A 0 {
                shockRemainder = 35;
            }
        Pain.ShockedFloorActual:
            ADSH AAAA 0 {
                A_SetTics(random(1,3));
                frame = random(0,5);
                if(shockRemainder>0) { shockEffects();}
            }
            ADSH A 0 {
                shockFrame++;			
            }
            ADSH A 0 {
                shockRemainder--;
                if (shockRemainder == 0) {
                    SetStateLabel("See");
                }
            }
            loop;
        
        death.frostexplosion:
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("LargeGlassParticle2", random(-3, 3), random(-3, 3), random(6, 24), random(-4, 4), random(-4, 4), random(3, 6));
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("LargeGlassParticle3", random(-3, 3), random(-3, 3), random(-3, 24), random(-4, 4), random(-4, 4), random(3, 6));
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("LargeGlassParticle4", random(-3, 3), random(-3, 3), random(-3, 24), random(-4, 4), random(-4, 4), random(3, 6));
        
        Death.explosiveImpact:
        Death.SniperBullet:
        death.MagnumBullet:
        death.shotgun:
        xdeath:
        Death.plasma:
        Death.MeleeImpact:
        Death.MeleeImpactSplash:
        Death.Melee:
        Death.knife:
        Death.stomped:
        death:
            TNT1 A 0 
            {
                for(int x=0;x<35;x++)
                {
                    A_SPAWNDEFINEDPARTICLE("OilSplatterSlowDefinition", frandom(-13,13), frandom(-13,13), frandom(14,19), frandom(-4,4), frandom(-4,4), frandom(-1,8));
                }
                if(!bFriendly)
                {
                    Stats.AddStat(STAT_KILLS_AIRDRONE, 1, 0);   
                }
                A_StopSound(CHAN_7);
                A_PLAYSOUND("sawdrone/death", CHAN_AUTO, 1.0, 0, 0.7, pitch:frandom(0.4, 0.6));
            }
            TNT1 A 0 A_SPAWNITEMEX(DeathAnimation, 0, 0, 0, 0, frandom(1,4), 12);
            stop;
    }
}



class AirdroneDeath1 : SelacoActor {
    mixin AirdroneBase;
    bool splashed;

    override void tick()
    {
        super.tick();
        checkWater();
    }

    void FloorImpact() {
        A_EXPLODE(20, 160);
        BellyFlop();
        A_PLAYSOUND("AIRDRONE/BELLYFLOP", CHAN_AUTO, 1.0, 0, 1.0, 0, pitch:frandom(1.0,1.2));
        EmitDefinition('DebrisChunkParticleLargeDefinition', chance: 0.75, numTries: 32, angle:random(0,359), pitch: frandom(-10,10), offset: (frandom(-20,20), frandom(-20,20), 0), velocity:(frandom(3,5),frandom(3,5),frandom(4,18)));
		A_SPAWNITEMEX("MeleeWallSmashTiny", 0, 0, 6);
		A_SPAWNITEMEX("wallSmashDecal", 0, frandom(-6,6), 10);
		A_SPAWNITEMEX("wallSmashDecal", 0, frandom(-6,6), 25);
		A_SPAWNITEMEX("wallSmashDecal", 0, frandom(-6,6), 37);
    }

    void checkWater()
    {
        if(waterLevel > 0 && !splashed)
        {
            splashed = true;
            double waterSurface = getWaterFloorHeight();
            if(waterSurface) {
                spawn("WaterFoamGigantic", (pos.x, pos.y, waterSurface+1));
                spawn("WaterSplashEffectLarge", (pos.x, pos.y, waterSurface+1));
                for(int x=0;x<8;x++)
                {
                    spawn("WaterFoamGigantic", (pos.x+frandom(-35,35), pos.y+frandom(-35,35), waterSurface+1));
                }
                spawn("WaterSplashEffectLarge", (pos.x+10, pos.y-5, waterSurface+1));
            }
            
            A_PLAYSOUND("WTREXPL1", CHAN_AUTO, pitch:0.7);
            for(int x=0; x<110;x++)
            {
                A_SpawnItemEx("waterParticleXBigger", frandom(-50,50), frandom(-50,50), frandom(10,30), frandom(0.5,3.5), frandom(0.3, 0.9), frandom(1,13), random(0,360));
            } 
        }
    }

    default {
        scale 0.6;
        +SelacoActor.PreventSleep;
        radius 10;
        height 10;
        -isMonster
        +SelacoActor.allowWaterSplashing
        +THRUACTORS
        -shootable;
        -solid;
        -NOGRAVITY
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_SPAWNITEMEX("SelacoExplosionPerformanceNoDebris");
                A_SPAWNITEMEX("AirdroneWing", 0, 0, 0, -frandom(-4,4), frandom(2,5), frandom(8,9));
                A_SPAWNITEMEX("AirdroneWing", 0, 0, 0, -frandom(-4,4), frandom(-2,-5), frandom(7,9));
                A_SPAWNITEMEX("AirdroneSupportWing", 0, 0, 0, frandom(-4,4), frandom(2,5), frandom(7,9));
                A_SPAWNITEMEX("AirdroneSupportWing", 0, 0, 0, frandom(-4,4), frandom(-2,-5), frandom(7,9));
            }
            ADD1 ABCDEEFFGG 2;
        Death_Looper:
            ADD1 EEFFGG 1 {
                if(vel.z == 0) {
                    roll = roll+(frandom(-5,5));
                    FloorImpact();
                    A_CHANGEVELOCITY(0, -2, 12, CVF_RELATIVE);
                    setStateLabel("DeathContinue");
                }
            }
            loop;
        DeathContinue:
            TNT1 A 0 {
                roll = 0;
                A_PLAYSOUND("AIRDRONE/DEAD", CHAN_AUTO, 1.0, 0, 0.7, pitch:frandom(1.0, 1.1));
            }
            ADD1 HIJKLMNOPQRSTU 2;
            ADD1 U 2 {
                FloorImpact();
            }
            ADD1 VWX 1;
            ADD1 Y -1
            {
                sleepIndefinite();
            }
            stop;
    }
}

class AirdroneDeath2 : AirdroneDeath1 {
    mixin AirdroneBase;
    default {
        scale 0.6;
        radius 5;
        height 5;
        -shootable;
        -solid;
        -NOGRAVITY
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_SPAWNITEMEX("SelacoExplosionPerformanceNoDebris");
                A_SPAWNITEMEX("AirdroneWing", 0, 0, 0, -frandom(-4,4), frandom(2,5), frandom(8,9));
                A_SPAWNITEMEX("AirdroneSupportWing", 0, 0, 0, frandom(-4,4), frandom(-2,-5), frandom(7,9));
            }
            ADD2 ABCDEF 2;
            TNT1 A 0
            {
                A_PLAYSOUND("AIRDRONE/DEAD", CHAN_AUTO, 1.0, 0, 0.7, pitch:frandom(1.0, 1.1));
            }
            ADD2 GHI 2;
        Death_Looper:
            ADD2 J 1 {
                roll = roll+(frandom(-5,5));
                if(vel.z == 0) {
                    FloorImpact();
                    setStateLabel("DeathContinue");
                }
            }
            loop;
        DeathContinue:
            TNT1 A 0 {
                roll = 0;
            }
            ADD2 KLMNOP 2;
            ADD2 Q 2 {
                FloorImpact();             
            }
            ADD2 RS 2;
            ADD2 T -1
            {
                sleepIndefinite();
            }
            stop;
    }
}

class AirdroneDeath3 : AirdroneDeath1 {
    mixin AirdroneBase;
    default {
        radius 5;
        height 5;
        scale 0.6;
        -shootable;
        -solid;
        -NOGRAVITY
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_SPAWNITEMEX("SelacoExplosionPerformanceNoDebris");
            }
            ADD3 ABCDEF 2;
             TNT1 A 0
            {
                A_PLAYSOUND("AIRDRONE/DEAD", CHAN_AUTO, 1.0, 0, 0.7, pitch:frandom(1.0, 1.1));
            }    
            ADD3 GHIJKL 2;
        Death_Looper:
            ADD2 M 1 {
                roll = roll+(frandom(-5,5));
                if(vel.z == 0) {
                    FloorImpact();
                    setStateLabel("DeathContinue");
                }
            }
            loop;
        DeathContinue:
            TNT1 A 0 {
                roll = 0;
            }
            ADD3 NOPQRSTUVWXY 2;
            ADD3 Z -1
            {
                sleepIndefinite();
            }
            stop;
    }
}

// Standalone leg piece. 
class AirdroneWing : SelacoActor {

    string spriteTouse;
    int frameNum;
    static const String LegSprites[] = {"ADC1", "ADC2"};

    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteTouse = LegSprites[random(0,LegSprites.size()-1)];
        if(random(0,1) == 1) {
            bXflip = true;
        }
    }

    default {
        +SelacoActor.PreventSleep
        +missile
        +USEBOUNCESTATE
        -solid;
        scale 0.25;
        speed 5;
        +DoomBounce
        BounceFactor 0.65; 
        BounceCount 4;
    }
    States {
        Indexer:
            ADC1 A 0;
            ADC2 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteTouse);
            }
        Looper:
            TNT1 ABCDEFGHIJKLM 2 {
                A_SpawnDefinedParticle("OilSplatterTrailDefinition");
                if(frameNum == 11) {
                    frameNum = 0;
                }
                frame = frameNum;
                frameNum++;
                if(vel.x == 0 && vel.y == 0 && vel.z == 0) {
                    setStateLabel("Death");
                }
            }
            loop;
        Bounce:
            TNT1 A 0 EmitDefinition('ShortSparkParticleDefinition', chance: 0.75, numTries: 2, angle:frandom(0, 360), pitch:frandom(0, 40), speed:frandom(0.4,0.6), velocity:(frandom(-0.5, 0.5), frandom(-0.5, 0.5), 0));
            TNT1 A 0 A_PlaySound("impact/fanslam",CHAN_AUTO, 0.3, 0, 1.0, false, 1.15);
            goto Looper;
        Death:
            TNT1 N 4 {
                if(pos.z <= floorz && vel.length() < 0.01)
                    sleepIndefinite();
            }
            loop;
    }
}

class AirdroneSupportWing : AirdroneWing {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteTouse = "ADC3";
        if(random(0,1) == 1) {
            bXflip = true;
        }
    }
    default {
        scale 0.26;
    }
    states {
        Indexer:
            ADC3 A 0;
    }
}

class RocketDestination : SelacoEnemy {
	default {
		+NOINTERACTION
		+SHOOTABLE
		RenderStyle "add";
		scale 0.2;
	}

	states {
		Spawn:
            TNT1 A 270;
			stop;
	}
}