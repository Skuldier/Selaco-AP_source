// TODO: 90% of the voices are still done through ACS unlike the soldiers. Fix please.
Class Juggernaut: EnemySoldier
{

	static const string JUGGERNAUT_SEARCH_SOUND_REFERENCE[] = 
	{
		"Juggernaut/active1","Juggernaut/active2","Juggernaut/active3","Juggernaut/active4","Juggernaut/active5","Juggernaut/active6","Juggernaut/active7","Juggernaut/active8","Juggernaut/active9",
		"Juggernaut/active10", "Juggernaut/active11"
	};

	static const string JUGGERNAUT_SEARCH_SOUND_SUBTITLE[] = 
	{
		"$JUGGERNAUT_ACTIVE_1","$JUGGERNAUT_ACTIVE_2","$JUGGERNAUT_ACTIVE_3","$JUGGERNAUT_ACTIVE_4","$JUGGERNAUT_ACTIVE_5","$JUGGERNAUT_ACTIVE_6","$JUGGERNAUT_ACTIVE_7","$JUGGERNAUT_ACTIVE_8","$JUGGERNAUT_ACTIVE_9",
		"$JUGGERNAUT_ACTIVE_10", "$JUGGERNAUT_ACTIVE_11"
	};

	const LOW_HEALTH_THRESHOLD = 450;
	const DAMAGE_EFFECT_DELAY = 35;
	const LEAP_CEILINGHEIGHT_REQUIREMENT = 150; // How high must the ceiling be before allowing the Jugger to jump?
	const STRAFE_CHANCE = 55;
	const LEAP_CHANCE_BASE = 3; 				// The base value. There's an offset added after every shot that is reset after a leap.
	const LEAP_UPWARD_VELOCITY = 14;
	const LEAP_FORWARD_VELOCITY = 7;
	const SEARCH_VOICE_COOLDOWN = 30*TICRATE;

	actor ms; // MinigunSight actor

	int minigunRateoffire;
    int lostTargetCounter;          // Counter until we track with pathfinding instead of A_CHASE
	float leapChanceAdd;
	bool isLowHealth;	
	bool leapForwardOnly; 	// Leap forward instead of upward+forward. Useful if the ceiling is low.
	int frostTicks;
	int attackCooldown;
	int burstCount;
	int strafeDirection;
	bool seenPlayer;
	int searchTicks;
	int dashVelocityX;
	int dashVelocityZ;

	override void PostBeginPlay() {
		super.PostBeginPlay();
		maxHealth = Health;
		ENEMY_IdentifierTag = "JUGGERNAUT";
		searchTicks = 300;
		bool msSuccess;
		[msSuccess, ms] = A_SPAWNITEMEX("MinigunSight", flags:SXF_SETMASTER);

		if(getCvar("skill") >= 3) {
			minigunRateoffire = 3;
		} else {
			minigunRateoffire = 4;
		}
	}

	override void BeginPlay() 
	{
		super.beginplay();
	}

	// For now we don't use any of the standard soldier lines, so just don't talk in the usual way
	override bool allowSpeech(bool ignoreSizeRequirement, bool urgent) {
		return false;
	}

	void playSearchSound()
	{
		if(searchTicks == 0)
		{
			int soundPointer = random(0,JUGGERNAUT_SEARCH_SOUND_REFERENCE.size()-1);
			A_PlaySound(JUGGERNAUT_SEARCH_SOUND_REFERENCE[soundPointer], CHAN_5, 0.9, 0, 0.5);
			Notification.Subtitle("$CHARACTER_JUGGERNAUT", JUGGERNAUT_SEARCH_SOUND_SUBTITLE[soundPointer], 4.0);	
			searchTicks = SEARCH_VOICE_COOLDOWN;
		}	
	}

	void doLowHealthEffects()
	{
		if(level.time % random(4,7) == 0)
		{
			A_SpawnItemEx("SparkEmberUpward", frandom(-25,25), frandom(-25,25), frandom(5,height), frandom(-1, 1), frandom(-1, 1), frandom(0.3, 0.9));
			if (random(0,100) <= 25) {
				A_PLAYSOUND("Sparks/Spawn", CHAN_AUTO);
			}
		}
	}

	// Is the Juggernaut in a valid leaping position?
	void decideLeap()
	{
		leapForwardOnly = false;
		if(random(0,100) >= LEAP_CHANCE_BASE+leapChanceAdd)
		{
			return;
		}
		
		// Do we fit?
		for(int x=0;x<=200;x+=radius)
		{
			if(checkBlock(xofs: x))
			{
				return;
			}
		}

		// If the ceiling high enough?
		if(abs(pos.z - ceilingz) < LEAP_CEILINGHEIGHT_REQUIREMENT)
		{
			leapForwardOnly = true;
		}

		// Is the route ahead clear or will Juggy bump his head mid jump?
		FLineTraceData RemoteRay;
		LineTrace(angle,500, pitch,offsetz: height+100,data: RemoteRay);
		if (RemoteRay.HitType == TRACE_HitWall) 
		{
			//A_PRINTBOLD("I do not want to bump my head, so I shall not jump upward too much.");
			leapForwardOnly = true;
		} 

		setStateLabel("leapForward");
	}
	
	bool checkStrafeClearance()
	{
		int angleOffset= 90;
		// Is the route ahead clear or will Juggy bump his head mid jump?
		if(strafeDirection == STRAFE_RIGHT)
		{
			angleOffset = -90;
		}
		FLineTraceData RemoteRay;
		LineTrace(angle+angleOffset,210, pitch,offsetz: maxStepHeight-1,data: RemoteRay);
		if (RemoteRay.HitType == TRACE_HitWall) 
		{
			//A_PRINTBOLD("Strafe blocked");
			return false;
		} 

		return true;
	}

	void calculateLeapSpeed()
	{
		dashVelocityZ = LEAP_UPWARD_VELOCITY;
		dashVelocityX = LEAP_FORWARD_VELOCITY;

		// Add velocity bonus based on distance from the player.
		if(target)
		{
			int distance = distance2D(target);
			int velocityGains = min(distance / 100, 18);
			dashVelocityX+=velocityGains;
		}

		// Ceiling is apparently low, so we leap forward at a higher speed but with less upward velocity.
		if(leapForwardOnly)
		{
			dashVelocityX+=15;
			dashVelocityZ = 5;
		}		
	}

	// calculateLeapSpeed is done seperatly because we run that during his windup
	void leapToTarget()
	{
		A_CHANGEVELOCITY(dashVelocityX, 0, dashVelocityZ, CVF_RELATIVE);
	}

	override void tick() 
	{
		super.tick();

		if(searchTicks)
		{
			searchTicks--;
		}

		// Increase leap chance passively when on low health
		if(isLowHealth) 
		{
			leapChanceAdd+=0.01;
			if(isLowHealth && level.time % random(25,35))
			{
				doLowHealthEffects();
			}
		}

		// TODO: Improve
		if (frostTicks > 0) 
		{
			isFrozen = true;
			frostticks--;
		} else {
			isFrozen = false;
			A_SetTranslation("");
		}
	}

    override int takeSpecialDamage (Actor inflictor, Actor source, int damage, Name damagetype) {
        int res = Super.TakeSpecialDamage(inflictor, source, damage, damageType);
		
		// Juggernaut is weak. Tell the player.
		if(!isLowHealth && health < LOW_HEALTH_THRESHOLD)
		{
			//A_PRINTBOLD("Entered Low HP");
			isLowHealth = true;
			ACS_NamedExecute("AI_DialogMasterScript", 0, 106);
			a_playsound("juggernaut/grunt", CHAN_VOICE, 1.0, 0, 0.6);
			bNoPain = false;
		}

        return res;
    }



	void decideNextMove() {
		if (!checkProximity("dawn", 800)) {
			calculateLeapSpeed();
			setStateLabel("LeapForwardFast");
		}
	}

	// Check if the minigun barrel can see a target
	bool checkMinigunSight()
	{
		if(target && ms && ms.CheckSight(target, SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
		{
			return true;
		}
		return false;
	}

	void spawnStrafeSparks() {
        EmitDefinition('ShortSparkParticleDefinition', chance: 1.0, numTries: 35, angle:45, speed:frandom(1.4,2.5));
		A_SPAWNITEMEX("BulletImpactEffectMetalZpuff", 0, -15, 0);
		A_SPAWNITEMEX("BulletImpactEffectMetalZpuff", 0, 15, 0);
	}

	void fireMinigun(bool spawnFlash = true) 
	{
		// Increase the chance to leap with every shot that is fired.
		leapChanceAdd+=0.3;

		// Sound and Effects
		A_PlaySound("weapons/fireminigun",CHAN_AUTO, 0.95, 0, 0.65, false, frandom(0.82, 1.0));
		A_SpawnItemEx("AlienMuzzleLarger", 15,  20, 35, 0);
		A_SpawnItem ("RifleCaseSpawnEnemyMinigun", 0, 30,0);

		// Rate of Fire
		A_SetTics(minigunRateoffire);
		if(isFrozen) {

			A_SetTics(minigunRateoffire+1);
		}

		// The attack
		A_SpawnProjectile("AlienTracerMinigun", 42, 25, frandom(-2.5, 2.5), CMF_TRACKOWNER | CMF_OFFSETPITCH, frandom(-2, 2), AAPTR_TARGET);
	}


	void A_CPosRefire() {
		// keep firing unless target got out of sight
		A_FaceTarget();
		if (Random[CPosRefire](0, 255) >= 40)
		{
			if (!target
				|| HitFriend()
				|| target.health <= 0
				|| (!checkMinigunSight()))
			{
				SetState(SeeState);
			}
		}
	}


	default {
		+MISSILEMORE
		+DontThrust
		+MISSILEEVENMORE
		+NOBLOODDECALS
		SelacoEnemy.conductivity 0;
		SelacoEnemy.EnemyType ENEMY_SOLDIER;
		SelacoEnemy.weapon AWPN_MINIGUN;
		+EnemySoldier.Armored;
		-SelacoEnemy.HasKnockoverState;
		-SelacoEnemy.HasHeadshotPainAnimation;
		+SelacoEnemy.AllowHeadshots;
		-SelacoEnemy.AllowStealthKill;
		-SelacoEnemy.AllowKnifeKill;
		-SelacoEnemy.AllowFreezing;
		Health 1200;
		Tag "Juggernaut";
		Radius 25;
		Height 95;
		Mass 100;
		Speed 5;
		PainChance 5;
		PainChance "Melee", 2;
		damageFactor "LeapAttack", 0;
		PainChance "Ice", 255;
		PainChance "ExplosiveImpact", 0;
		PainChance "MeleeImpactExtinguisher", 0;
		PainChance "DecorationImpact", 0;
		PainChance "Shotgun", 1;
		Painchance "Plasma", 1;
		PainChance "SniperBullet", 1;
		PainChance "MagnumBullet", 1;
		PainChance "SMGBullet", 1;
		PainChance "DawnFist", 0;
		PainChance "MeleeImpact", 0;
		damagefactor "Avoid", 0.0;
		damageFactor "MeleeImpact", 0;
		damageFactor "DawnFist", 0.7;
		damageFactor "MagnumBullet", 1.25;
		damageFactor "ExplosiveImpact", 0.25;
		damageFactor "Ice", 0.1;
		damageFactor "Fire", 0;
		SelacoEnemy.randomizerSpawnChance 1;
		damagetype "LeapAttack";
		Monster;
		MaxStepHeight 28;
		PainChance "NailDamage", 2;
		MaxDropOffHeight 250;
		BloodType "Selaco_Blood_HEAVYARMOR", "Selaco_Blood_HEAVYARMOR", "Selaco_Blood_HEAVYARMOR";
		DeathSound "-";
		PainSound "juggernaut/grunt";
		AttackSound "weapons/minigunfire2";
		DropItem "ARMOR_SHOOTER";
		Obituary "%o has been mowed down by a Juggernaut.";
		xScale 0.64;
		yscale 0.47;
	}

	int maxHealth;
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		Stats.AddStat(STAT_KILLS_JUGGERNAUT, 1, 0);

		if(MeansOfDeath == "DawnFist")
		{
	        // Give Achievement for blowing up a toilet without using guns.
            LevelEventHandler leh = LevelEventHandler.instance();
            leh.SetAchievement("GAME_HUMILIATION");
		}

 		for(int x=0;x<=5;x++) {
			A_SPAWNITEMEX("WeaponPartPickup", frandom(-1*radius, radius), frandom(-1*radius, radius), 5, frandom(2,3), frandom(-2,2), 4, angle:random(0,360));
		} 

		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}


	States
	{	
		Spawn:
			TNT1 A 0;
		Stand:
			TNT1 A 0;
			JUID ABCDEEDCBA 4 A_Look;
			Loop;
			
		Idle:	
		SearchForPlayer:
			TNT1 A 0 A_ClearTarget;
			TNT1 A 0 {
				ACS_NamedExecute("AI_DialogMasterScript", 0, 104);
			}
			goto SeeContinue;

		See:
		TNT1 A 0 {
			attackCooldown = 0;
			if (!invoker.seenPlayer) {
				ACS_NamedExecute("AI_DialogMasterScript", 0, 100);
				invoker.seenPlayer = true;
			}
			bNODROPOFF = false;
		}
		
		TNT1 A 0 A_CheckSight("SeeNeverSeen");
		Goto SeeContinue;

	// Reach the player
		SeeNeverSeen:
		SeeContinue:
			//TNT1 A 0 A_CheckSight("SeeNeverSeelan")
			JUWA AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIII 1 
			{
				attackCooldown = 0;
                // Go to tracking mode once we've not seen the player for a bit
                if(++lostTargetCounter > 35) {
                    lostTargetCounter = 0;
                    SetStateLabel("TrackPlayer");
                    return;
                }
				// Pathfind if we can't see the target
                if(!isTargetVisible() && animationInterval == 18) 
				{
                 }
				// Chase if we see the target
				else
				{
					A_CHASE(null, null);
				}

				if (invoker.animationInterval == 18) {
					// Attack if weapon sees target
					if(checkMinigunSight() && hasFiringSolution(4096))
					{
						setStateLabel("AttackTarget");
					}
					A_PlaySound("step/mech",3);
					// A_Explode(100, 30, 0);
					for(int i = 0; i<15;i++) {
						A_SpawnItemEx("DebriesChunkUpSlow", random(-20, 20), random(-20,20), random(-15, 15), random(1, 6), random(1,6), random(1,5));
					}
					animationInterval = 0;
				}
				animationInterval++;
			}
			Loop;

		// Use pathfinding to reach the player
        TrackPlayer:
			JUWA AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIII 1 
			{
				attackCooldown = 0;
				// Pathfind if we can't see the target
                switch(A_TRACK()) 
				{
                    case TRACK_BuildingPath:
                        SetStateLabel("BuildPathIdle");
                        return;
                    case TRACK_FoundTarget:
                        lostTargetCounter = 0;
                        SetStateLabel("SeeContinue");
                        return;
                    default:
                        if(level.time % 15 == 0 || random(0, 100) > 90) {
                            // Constantly rebuild checkseed
                            // This has the nice effect of randomizing the walking pattern
                            checkSeed = random(0,8);    
                        }
                        break;
                }

				if (invoker.animationInterval == 18) {
					// Attack if weapon sees target
					if(checkMinigunSight() && hasFiringSolution(4096))
					{
						setStateLabel("AttackTarget");
					}
					A_PlaySound("step/mech",3);
					// A_Explode(100, 30, 0);
					for(int i = 0; i<15;i++) {
						A_SpawnItemEx("DebriesChunkUpSlow", random(-20, 20), random(-20,20), random(-15, 15), random(1, 6), random(1,6), random(1,5));
					}
					animationInterval = 0;
				}
				animationInterval++;
			}
			TNT1 A 0
			{
				playSearchSound();
			}
			Loop;
        

		AttackTarget:
			TNT1 A 0 {
				if (random(0,100) == 20) {
					ACS_NamedExecute("AI_DialogMasterScript", 0, 101);
				}
			}
			TNT1 A 0 A_CheckSight("Stand2");
			TNT1 A 0 decideLeap();
			TNT1 A 0 A_TakeInventory("CantFire", 1);
			TNT1 A 0 A_PLAYSOUND("JUG/WIND", chan_auto);
			JUAI ABCD 4 A_FACETARGET();
			TNT1 A 0
			{
				if(random(0,100) <= STRAFE_CHANCE)
				{
					setStateLabel("StrafeAttack");
				}
			}
			JUAI D 15 A_FACETARGET();
			TNT1 A 0 A_AlertMonsters;
			TNT1 A 0;
		ContinueFiring:
			TNT1 A 0 {
				invoker.burstCount = 0;
			}
			TNT1 A 0 
			{
				if(random(0,100) <= STRAFE_CHANCE)
				{
					setStateLabel("StrafeAttack");
				}
			}
			TNT1 A 0;

		MissileContinue:
			JUAI D 2 {
				if (invoker.burstCount > 5) {
					invoker.burstCount = 0;
					//decideNextMove();
					A_CposRefire();
				}
				A_FACETARGET();
				//decideNextMove();
				fireMinigun(false);
				if (!checkMinigunSight()) {
					invoker.burstCount++;
				}
			}
			TNT1 A 0 decideLeap();
			JUAI E 1 fireMinigun();
			loop;
			
		LeapForward:
			TNT1 A 0 {
				if(isFrozen) {
					setStateLabel("see");
				}
				leapChanceAdd = 0;
				bNoPain = true;
				A_FACETARGET();
				A_PlaySound("juggernaut/charge", CHAN_AUTO);
				if(random(0,1) == 1) {
					ACS_NamedExecute("AI_DialogMasterScript", 0, 103);
				}
				calculateLeapSpeed();
			}
			JULE ABCDEEEE 3;
			JULG ABCD 2;

		LeapForwardFast:
			TNT1 A 0 {
				if(isFrozen) {
					setStateLabel("see");
				}
			}
			JULG E 5;
			TNT1 A 0 A_PlaySound("juggernaut/launch");
			TNT1 AA 0 A_SpawnItemEx("BaseShockwave");
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("HugeWallChunk", random(1,5), random(1,5), random(10,25), random(1, 3), random(1,3), random(5,13), random(0, 360));
			TNT1 A 0 leapToTarget();
			JULG AABBCCDEEE 1 {
				ThrustThing(angle*256/360, frandom(1.5,2), 0, 0);
				for(int x=0;x<2;x++) {
					A_SPAWNITEMEX("RedPlasmaPuff", frandom(-5,-13), frandom(-1*radius-9, radius+9), frandom(2,65));
				}
				A_SpawnItem ("SmokeTrailPiece");
				A_SPAWNITEMEX("JuggernautLeapHoloGram", -9);
			}
		LeapWaitForLanding:
			JULG E 1 {
				for(int x=0;x<2;x++) {
					A_SPAWNITEMEX("RedPlasmaPuff", frandom(-5,-13), frandom(-1*radius, radius), frandom(2,65));
				}
				bNoPain = false;
				A_SpawnItem ("SmokeTrailPiece");
				A_SPAWNITEMEX("JuggernautLeapHoloGram", -9);
			}
			TNT1 A 0 A_CheckFloor("LeapLandingImpact");
			TNT1 A 0 {
				if(vel.length() == 0) {
					SetStateLabel("LeapLandingImpact");
				}
			}
			loop;
		LeapLandingImpact:
			TNT1 A 0 {
				bNODAMAGE = true;
			}
			JULG E 1;
			TNT1 A 0 {
				for(int i=0;i<5;i++) {
					A_SpawnProjectile ("ExplosionFlames", 0, 0, random (0, 360), 2, random (0, 360));
					A_SpawnProjectile ("ExplosionParticleHeavy", 0, 0, random (0, 360), 2, random (0, 180));
					A_SpawnProjectile ("ExplosionParticleHeavy", 0, 0, random (0, 360), 2, random (0, 180));
					A_SpawnProjectile ("ExplosionFlareTrail2", 64, 0, random (0, 360), 2, random (30, 60));
				}
				A_SPAWNITEMEX("Ability_LeapAttack");
				A_PlaySound("dest/brkwall");
				A_PLAYSOUND("juggernaut/land", CHAN_AUTO);
				A_SpawnItemEx ("PrettyExplosionParticleRainULTRAPerformance",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("GigaWallChunk", 2, 2, 2, random(1, 4), random(1,4), random(15,25), random(0, 360));
			JULG D 2;
			TNT1 A 0 {
				bNODAMAGE = false;
			}
			JULG CBA 2;
			goto see;

		StrafeForward:
		TNT1 A 0 ThrustThing(angle*256/360, 18, 0, 0);
		TNT1 A 0 A_PlaySound("juggernaut/dash", CHAN_AUTO);
		JULE FFFFFFFFFFFF 2 {
			attackCooldown++;
			if (vel.length() < 0.5) {
				SetStateLabel("AttackTarget");
			}			
			
			spawnStrafeSparks();
			A_SPAWNITEMEX("JuggernautLeapHoloGram", -6);
			A_SPAWNITEMEX("JuggernautLeapHoloGram", -10);
			A_SPAWNITEMEX("JuggernautLeapHoloGram", -14);
			if(checkMinigunSight())
			{
				SetState(findState("AttackTarget"));
			}
		    A_FACETARGET();
			if(attackCooldown > 6) {
				fireMinigun();
			}
		}
		goto AttackTarget;

		BuildPathIdle:
		// This frame prevents an infinite loop if an enemy goes to idle and then builds a path in a single tick
		// Remove it if you dare.
		
		JUID AAAABBBBCCCCDDDDEEEEEEEEDDDDCCCCBBBBAAAA 1
		{
			handleSentryMode();
			if(!user_sentrymode && A_TRACK() != TRACK_BuildingPath) {
				SetStateLabel("SeeContinue");
				return;
			}
		}
		Loop;

		Pain.ice:
			TNT1 A 0 {
				A_SetTranslation("Ice");
				frostTicks = 700;
			}
			goto See;
		Pain.ExplosiveImpact:
		Pain.MeleeImpactSplash:
		Pain.MeleeImpact:
		Pain.Shotgun:
		Pain.MeleeImpactTaser:
		Pain:
		Pain.StunningShock:
			TNT1 A 0;
			TNT1 A 0;
			Goto SeeContinue;
			JUWA G 3;
			Goto SeeContinue;
		Pain.SniperBullet:	
		Pain.MagnumBullet:
			//TNT1 A 0 ACS_NamedExecuteAlways("Hitmarker", 0, 2);
			goto Pain;
		Death.Ice:
		Death.Freeze:
		Death.Frost:
		TNT1 A 0 {
			bShootable = false;
			bSolid = false;
		}
		
		// TO-DO: This suuuuuuuuuucks! Do this in Die()
		death.fire:
			TNT1 A 0 A_Playsound("juggernaut/killed", CHAN_AUTO, 1.0, 0, 0.6);
			TNT1 A 0 A_SPAWNITEMEX("BurningJuggernaut");
			stop;

		Death.DawnFist:
		Death.naildamage:
		Death.MeleeImpactSplash:
		Death.MeleeImpact:
		Death.ExplosiveImpact:
		Death.head:
		Death.SniperBullet:	
		Death.MagnumBullet:
		Death.blast: 
		Death.Shotgun:
		Death.railattack:
		Death.plasma:
		Death:
			TNT1 A 0 A_Playsound("juggernaut/killed", CHAN_AUTO, 1.0, 0, 0.6);
		RegularDeath:
			TNT1 A 0
			{
				A_SPAWNITEMEX("JuggernautDeath1");
			}
			stop;
		
		Death.Massacre:
		Goto Death;

		AmbushWall:
			TNT1 A 0;
			TNT1 A 0 {
				seenPlayer = true;
				ThrustThing(angle*256/360, 5, 0, 0);
				ACS_NamedExecute("AI_DialogMasterScript", 0, 105);
				A_SpawnItemEx ("PrettyExplosionParticleRain",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
				A_SpawnProjectile ("ExplosionFlames", 0, 0, random (0, 360), 2, random (0, 360));
				A_Playsound("Destruction/explosion");
				A_PlaySound("dest/brkwall", 3);
				Radius_Quake (5, 40, 0, 15, 0);
				A_PLAYSOUND("juggernaut/smash");
				for(int i = 0; i<35;i++) {
					A_SpawnItemEx("DebriesChunk", random(-20, 20), random(-20,20), random(-15, 15), random(1, 6), random(1,6), random(1,5));
			}
			}
			JULG ABCDEEEEEEEEEEEEEE 2 {
				spawnStrafeSparks();
			}
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0 A_Lookex(0, 0, 2000, 2000, 20000, "MISSILE");
        goto Stand;

	// TO-DO: Completely hard-coded. Remove after RD2021 or rewrite it to make more sense.
		HeroLandingLoop:
			JUSH A 1 {
				if (vel.z == 0) {
					SetStateLabel("HeroLandingAfterImpact");
				}
			}
			loop;
		HeroLandingAfterImpact:
			TNT1 A 0 {
				A_SpawnItemEx("WHITESHOCKWAVE", 0, 0, 10);
				A_PLAYSOUND("dest/groundimpact", CHAN_AUTO, 1.0, 0, 0.6);
				A_PLAYSOUND("juggernaut/grunt5", CHAN_AUTO, 1.0, 0, 0.6);
			}
			JUSJ AAAAAAAAAAAAA 3;
			JUSH ABCDEFGHIJKLMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN 4;
			goto StrafeAttack;

		StrafeAttack:
			// Create Nodes
			JUAI D 1 {
				{
					//A_PRINTBOLD("Do Strafe.");
				}
				killStrafeNodes();
				A_PlaySound("juggernaut/dash", CHAN_AUTO);
				strafeDirection = random(STRAFE_LEFT,STRAFE_RIGHT);
				createStrafeNodes(strafeDirection, 5);
			}

			// Validate spawned node
			JUAI D 1
			{

				if(validateStrafe() && checkStrafeClearance())
				{
					setStateLabel("startStrafe");
				}
			}
			JUAI D 0
			{
				setStateLabel("MissileContinue");
			}
			startStrafe:
				JUAI A 1
				{
					if(strafeDirection == STRAFE_RIGHT) {
						A_ChangeVelocity(7, -17, 0, CVF_relative);
					} else {
						A_ChangeVelocity(7, 17, 0, CVF_relative);
					}
				}
				JULG ABCDE 2 {
					if (vel.length() < 0.5) {
						SetStateLabel("AttackTarget");
					}				
					A_SPAWNITEMEX("JuggernautLeapHoloGram", -6);
					A_SPAWNITEMEX("JuggernautLeapHoloGram", -10);
					A_SPAWNITEMEX("JuggernautLeapHoloGram", -14);
					if(!checkMinigunSight())
					{
						SetState(findState("stopStrafe"));
					}
					spawnStrafeSparks();
					A_FACETARGET();
				}
				JULG EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 2 {
					if (vel.length() < 0.5) {
						SetStateLabel("AttackTarget");
					}				
					A_SPAWNITEMEX("JuggernautLeapHoloGram", -6);
					A_SPAWNITEMEX("JuggernautLeapHoloGram", -10);
					A_SPAWNITEMEX("JuggernautLeapHoloGram", -14);
					if(!checkMinigunSight())
					{
						SetState(findState("stopStrafe"));
					}
					spawnStrafeSparks();
					A_FACETARGET();
					fireMinigun();
				}
			stopStrafe:
				JULG DCBA 2;
				goto MissileContinue;

	}
}

class JuggernautLeapHoloGram : Actor{
	default {
		xScale 0.64;
		yscale 0.47;
		alpha 0.9;
		-SOLID
		+NOINTERACTION;
		+NOGRAVITY
		RenderStyle "Add";
	}
	States {
		Spawn:
			TNT1 A 0;
			JULG EEEEEEEEE 1 BRIGHT A_FADEOUT(0.1);
			stop;
	}
}

class Ability_LeapAttack : actor {
	default {
		damageType "ExplosiveImpact";
	}
	states {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_EXPLODE(110, 280, 0); 
			stop;
	}

}


// This class functions as an additional pair of eyes for the Juggernaut. If the minigun cant see the target, the Juggernaut will not attack.
class MinigunSight : Actor
{
	override void tick()
	{
		super.tick();
		if(master)
		{
			A_Warp(AAPTR_MASTER, 0, 25, 35, 0, WARPF_INTERPOLATE);
		}
		else
		{
			destroy();
		}
	}

	default
	{
		scale 0.4;
		+NOINTERACTION
	}

	states
	{
		Spawn:
			TNT1 A -1 BRIGHT;
			stop;
	}
}