// Fires one highly accurate yet damaging shotgun pallet.
// We color translate these to look yellow.
// Will get a proper model at some point!

class Sniper : Engineer {

	enum SNIPER_AIM_MODE
	{
		SNIPER_BARRELONLY = 1,
		SNIPER_ALLPROPS = 2,
	}


	const SNIPER_HIT_CHANCE_SPAWN = 90;
	const SNIPER_SHOT_INCREMENT_PER_SHOT = 10;
	bool targetIsHazard;
	int hitChance;

	override void postbeginPlay()
	{
		super.postBeginPlay();
		hitChance = SNIPER_HIT_CHANCE_SPAWN;
        ENEMY_IdentifierTag = "SNIPER";
		A_setTranslation("Sniper");
	}

	void fireSniper(bool skipPump = false) 
	{
			Spawnlight(255, 90, 30, 250, 0, 3, divisionSpeed:1.25);

			A_SpawnItemEx("ShotgunMuzzle", 6, 0, 38);
			A_AlertMonsters();
			A_SpawnProjectile("OrangeLensFlareAltShotgun", 34, 10, 15, 0);
			A_PlaySound("sniper/shot", CHAN_BODY, 1.0, 0, 0.05, pitch:frandom(0.9,1.05));
			A_SpawnItemEx("BulletImpactSmokeEnemy",0, 0, 32, frandom(1, 2), frandom(1.5, 2));
			A_SpawnItemEx("BulletImpactSmokeEnemy",0, 0, 32, frandom(1, 2), frandom(-1.5, -2));
			A_SpawnItemEx("BulletImpactSmokeEnemy",0, 0, 32, frandom(1.5, 2), 0, frandom(1.5, 2));
			// Target is seen? Roll the die
			if(checkSight(target) && random(0,100) <= hitChance && !checkIfTargetSliding())
			{
				launchSniperBullet();
			}
			else
			{
				// Increment hit chance
				hitChance += SNIPER_SHOT_INCREMENT_PER_SHOT;

				// Find all nearby props from Dawn's POV, destroy the one closest to the player
				destroyRandomProp();				
			}
		}


	// Get a prop the sniper can shoot at.
	actor bulletTarget;
	array<actor> potentialTargets;
	array<actor> suitableTargets;

	void acquireRandomProp()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(target, 250);
		actor currentActor;
		bulletTarget = null;
		potentialTargets.clear();
		suitableTargets.clear();
		while (it.Next()) {
			currentActor = it.thing; // Get the Actor it's currently on

			if (target) {
				if (currentActor is "SelacoExplosiveBarrel" || currentActor is "PropaneTank") {
					potentialTargets.push(currentActor);
					continue;
				}

				if (currentActor.bShootable && !currentActor.bBuddha && !(currentActor is "Dawn")) {
					console.printf("Adding: %s", currentActor.getClassName());
					potentialTargets.push(currentActor);
					continue;
				}
			}
		}

		console.printf("Found %d potential targets for the sniper", potentialTargets.size());
	}

	void setPropTarget(int mode)
	{
		targetIsHazard = false;
		if(target)
		{
			// Check distances of potential targets
			for(int x=0;x<potentialTargets.size();x++)
			{
				let currentTargetCheck = potentialTargets[x];
				if(currentTargetCheck)
				{
					if((mode == SNIPER_BARRELONLY && currentTargetCheck is "SelacoExplosiveBarrel" || currentTargetCheck is "PropaneTank") && currentTargetCheck.Distance2DSquared(target) < 230*230) 
					{
						suitableTargets.push(currentTargetCheck);
						continue;
					}
					if (mode == SNIPER_ALLPROPS && currentTargetCheck.Distance2DSquared(target) < 120*120) 
					{
						suitableTargets.push(currentTargetCheck);
						continue;
					}
				}
			}

			// Set a target
			for (int x = 0; x < suitableTargets.size(); x++) {
				targetIsHazard = suitableTargets[x] is "SelacoExplosiveBarrel" || suitableTargets[x] is "PropaneTank";
				bulletTarget = suitableTargets[x];

				if (targetIsHazard) {
					break;
				}
			}
		}
	}

	void destroyRandomProp()
	{
		if(!target) {
			return;
		}
		// Destroy what we found!
		if(bulletTarget && checksight(bulletTarget))
		{
			console.printf("Bullet Target: %s", bulletTarget.getClassName());
			spawnTargetLaser("RifleTracer");
			bulletTarget.A_SPAWNITEMEX("sniperImpactSoundZone");
			int cvar = getCvar("g_impactshake");
			if (cvar == 1) {
				target.A_QuakeEx( 2, 2, 2, 14, 0, 240, 0, 0, 1, 1, 1, 1, 1, 1);
			}
			if (cvar == 2) {
				target.A_QuakeEx(frandom(3.3, 3.3), frandom(3.3, 3), frandom(1.3, 1.3), 11, 0, 290, 0, 0, 3, 3, 3, 2, 2, 2); 
			}
			bulletTarget.A_SpawnDefinedParticle("BulletImpactEffectPlasticStationaryDefinition", 0, 0, bulletTarget.height-5);
			console.printf("DESTROYING: %s", bulletTarget.getClassName());

			// Special conditions
			if(bulletTarget is "SelacoExplosivebarrel")
			{
				SelacoExplosivebarrel(bulletTarget).setStateLabel("Pain");
				bulletTarget.A_RECOIL(5);
				return;
			}
			if(bulletTarget is "PropaneTank")
			{
				PropaneTank(bulletTarget).setStateLabel("Pain");
				return;
			}

			// Kill it!
			bulletTarget.die(bulletTarget, bulletTarget);
			return;
		}
		else
		{
			launchSniperBullet("EnemyTracerSniperDummy");
		}
	}

	void launchSniperBullet(string tracerActor = "EnemyTracerSniper")
	{
		A_SpawnProjectile(tracerActor, frandom(55,60), 0, 0,  CMF_TRACKOWNER | CMF_OFFSETPITCH, pitch:frandom(-0.25,0.25));
	}

	// TODO:
	// This is not *THE* solution as it's far too demanding. Will figure out something better as time goes on
	void spawnTargetLaser(string laserActor = "LaserSightProjectile", int aimMode = 1) {
		A_CustomRailgun(-1, spawnofs_xy: 0,flags:RGF_NOPIERCING | RGF_SILENT, aim:aimMode, 0, pufftype:"LaserSightProjectile", range:6000, sparsity:14, spawnclass:laserActor,spawnofs_z: 10, veleffect:5);
	}

	override void MoveAndAttack(int flags) {
        SetStateLabel("SeeContinue");
	}

	default {
        health 110;
		friction 0.75;
		EnemySoldier.DisplayName "$CHARACTER_SNIPER";
		DamageFactor "SniperBullet", 2.5;
		engineer.firingSound "engineer/slugshot";
		speed 3;
		SelacoEnemy.randomizerSpawnChance 0;
		-Engineer.randomRole;
	}
	states {
        Idle:
        SeeContinueLoop:
        BuildPathIdle:
        SeeContinue:
            ENFI C 2;
			ENFI C 5
			{
				A_LookEx(0, 6000, 0, 0, 240, "Missile");
			}
            loop;
		Missile:   
            TNT1 A 0
            {
                if(target && !CheckSight(target))
                {
                    setStateLabel("SeeContinue");
                }
            }
			TNT1 A 0 talk(SOLDIER_ATTACK);
			TNT1 A 0 {
				defaultEverything();
				// TO-DO: Just here for the demo. This workaround is far from ideal.
				if(target is "Pathnode") {
					target = firsttarget;
				}
				if (!hasEnoughAmmo()) {
					setStateLabel("ReloadWeapon");
				}
			}
			ENFI CCCCC 1 {
				A_FACETARGET();
			}
			TNT1 A 0 A_PlaySound("SHTPICKE", CHAN_AUTO, 1.0, 0, 0.7);
			ENFI DDDDDDDDDDDDDD 1 {
				spawnTargetLaser();
				A_FACETARGET();
				[success, indicatorFlare] = A_SPAWNITEMEX("RedFlare3", 20, 4, 40);
			}
			ENFI DDDDDDDDDDDD 1 {
				spawnTargetLaser();
				A_FACETARGET();
				[success, indicatorFlare] = A_SPAWNITEMEX("RedFlare3", 20, 4, 40);
			}
			TNT1 A 0
			{
				if(target)
				{
					if(!checkSight(target))
					{
						acquireRandomProp();
						setPropTarget(SNIPER_BARRELONLY);
					}
					target.A_PLAYSOUND("SNIPER/WARNING", CHAN_AUTO, 0.5, pitch:frandom(0.9,1.05));
				}
			}
        BeginAttack:
			ENFI DDDDDDDDDDDDDDDDDDDDDDDDDDDDD 1 {
				if(bulletTarget && targetIsHazard)
				{
					A_FACE(bulletTarget);
					spawnTargetLaser("LaserSightProjectileAboutToFire", 0);
				}
				else
				{
					spawnTargetLaser("LaserSightProjectileAboutToFire", 1);
					A_FACETARGET();
				}

				[success, indicatorFlare] = A_SPAWNITEMEX("RedFlare3Big", 20, 4, 40);
			}
        FireSniper:
            TNT1 A 0 {
				if(!targetIsHazard)
				{
					setPropTarget(SNIPER_ALLPROPS);
				}
                fireSniper();
                shellLoaded = true;
                bNoDropOff = false;
            }
            ENFI FGHI 3 {	
                A_FaceTarget();
            }
            goto SeeContinue;
	}
}

class Sniper_Moving : Sniper
{
	default
	{
		speed 4;
	}
	states
	{
        SeeContinue:
			ENRU AAABBBCCCDDD 1
			{
				A_CHASE();
			}
            loop;
	}
}

class LaserSightProjectile : actor {
	default {
		-BLOODSPLATTER
		+NOBLOODDECALS
		+BLOODLESSIMPACT 
		+NOINTERACTION
        +FLATSPRITE
        radius 5;
        height 5;
		RenderStyle "Translucent";
		alpha 0.2;
        scale 0.67;
	}
	states {
		Spawn:
			TNT1 A 0;
			NAVP A 1 bright;
			stop;
	}
}

class LaserSightProjectileAboutToFire : LaserSightProjectile {
	DEFAULT {
		alpha 1.0;
	}
}

class sniperImpactSoundZone : Actor
{
	default
	{
		+NOINTERACTIOn
	}
	states
	{
		Spawn:
			TNT1 A 3;
			TNT1 A 0 A_PLAYSOUND("Sniper/ricochet", CHAN_AUTO, 1.0, 0, 0.5, pitch:frandom(0.8,1.05));
			stop;
	}
}