enum CorpseType {
    CT_HUMAN      	            = 0x1,		
	CT_ALIEN				    = 0x2, 	
	CT_ZOMBIE				    = 0x3,	
}


class DeathceptionMaster : GoreMaster {

    const SHOCK_DURATION = 105;
    int shockTime;
	override bool grind(bool items)
	{
		ALotOfGibs();
        destroy();
        return true;
	}

	mixin EnemySoldierFunctions;
    bool ReadyToGib;
    int bloodQualitySetting;
    int corpseFaction;
    int armCount, legCount, headCount;
    bool floorHit;
    int gameDetail;

    // Bloodpools
    actor bloodPool;
    bool poolSpawned;
    int distance; 
    double projectileSpeedMulti;
    
    // Effect Styles
    string bloodPoolActor;

    private int deathceptionFlags;

    flagdef AutoSleep                : deathceptionFlags, 0;      // Do not sleep automatically, can be used on and off to prevent sleep during animations

    string soldierSkeleton, spriteToUse;
    String headSprite;
    Property SoldierSkeleton : soldierSkeleton;
    property CorpseFaction : corpseFaction;
    property projectileSpeedMulti : projectileSpeedMulti;

	override void playBloodSounds(Actor inflictor)
	{
		float fleshVolume = 0.3;
		if(inflictor && inflictor is "HitPuffExtreme")
		{
			A_Playsound("impact/bonehit", CHAN_7, 0.3, pitch:frandom(1.3,1.6));
		}
		A_PlaySound("impact/flesh", CHAN_5, fleshVolume, 0, 0.8);
	}

    override int takeSpecialDamage (Actor inflictor, Actor source, int damage, Name damagetype) {
		int res = Super.TakeSpecialDamage(inflictor, source, damage, damageType);
		if(source && inflictor is "HitPuff" && !bNoblood && !inflictor.bBloodlessImpact)
		{
			playBloodSounds(source);
		}
		return res;
    }

    virtual void doShock() {
        shockTime = SHOCK_DURATION+random(0,65);
    }

    virtual void shockCorpse() {
        if(shockTime <= 0 || random(0,100) >= 20) {
            return;
        }
        for(int i = 0; i < 4; i++) {
            EmitDefinition("SparkOrbSlowDefiniton", 1.0, random(1,3), pitch:-90, offset:(frandom(-25,25), frandom(-25,25), frandom(0,32)), particleSpawnOffsets:25);
        }
		A_SpawnDefinedParticle("BulletImpactEffectMetalZpuffTransparantSmallDefinition", frandom(-16, 16),frandom(-24, 24),frandom(3, 16));
		A_SpawnItemEx("PlasmaPuffTaser", frandom(-16, 16),frandom(-24, 24),frandom(3, 16));
		A_PLAYSOUND("Sparks/Spawn", CHAN_AUTO);  

        shockTime--;
    }

    void assignEffects()
    {
        if(corpseFaction == CT_ALIEN)
        {
            bloodPoolActor = "PurpleBloodPool";
        }
        if(corpseFaction == CT_ZOMBIE)
        {
            bloodPoolActor = "RedBloodPool";
        }
    }

    void playDeathSound()
    {
        if(level.maptime > 120)
        {
            A_PlaySound(deathSound, CHAN_AUTO);
        }
    }

    int activeticks;
    override void BeginPlay() {
        super.BeginPlay();
        armCount = 2;
        legCount = 2;
        headCount = 1;
        bloodQualitySetting = getCvar("r_BloodQuality");
        bNODAMAGE = true;
        bPreventSleep = true;   // Don't sleep right away, let animations finish
        assignEffects();

        gameDetail = LevelEventHandler.instance().gameDetailSetting;

        if (soldierSkeleton == "Rifleman") {
            headSprite = "XDeathAlienHead";
        }
        if (soldierSkeleton == "Engineer") {
            headSprite = "XDeathEngineerHead";
        }
    }

    override void tick() {
        super.tick();
        if(tics == -1 && getCvar("r_shadowquality") <= 1)
        {
            bCastSpriteShadow = false;
        }

        switch(activeTicks) {
            case 1:
                bShootable = true;
                if(censoredMode) {
                    bShootable = false;
                }
            case 5:
                if(!censoredMode) {
                    bNODAMAGE = false;
                }
                break;
            case 75:
                // No shooting corpses for Censored Mode!
                if(censoredMode) {
                    bNoInteraction = true;
                }
                if(level.time > 250 && vel == (0,0,0) && !poolSpawned && random(0,2) == 0 && !censoredMode) {
                    
                    [poolSpawned, bloodPool] = A_SPAWNITEMEX(bloodPoolActor, random(-2,2), frandom(-2,2));
                }
                break;
            case 120:   // 4 seconds after spawn, stop preventing sleep
                if(bAutoSleep)
                {
                    bPreventSleep = false;
                }
                break;
        }
        // If the distance of the dead soldier exceeds a certain distance threshold, stop expanding the pool.
        if(poolSpawned && !bloodPool) {
            // For no real reason, the engine is necro-resurrecting this reference once it gets deleted
            // We have to manually set it to NULL otherwise a couple of ticks later all hell breaks looks and we crash
            // due to an invalid actor pointer
            bloodPool = NULL;
            poolSpawned = false;
        }
        if(poolSpawned && bloodPool && Distance2D(bloodPool) > 5) {
            let bloodPoolMaster = PurpleBloodPool(bloodPool);
            if(bloodPoolMaster) {
                bloodPoolMaster.stopExpanding();
            }
            poolSpawned = false;    // We already dealth with it, don't check anymore
        }
        activeticks++;

        shockCorpse();

    }

	virtual void sprayWallDecals()
	{
		int oldAngle = angle;
		for(int x=0;x<=18;x++)
		{
            for(int x=0;x<8;x++)
            {
                angle = random(0,360);
                vector3 sprayDirection = vecFromAngle(angle, pitch+random(-40,100));
                A_SprayDecal("OminousPurpleSplat", 160, offset:(0,0,frandom(-20,85)), direction:sprayDirection);
            }
		}
        angle = oldAngle;
	}


    void spawnMeatChunksSmall() {
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("dismember/limb", CHAN_AUTO,0.6, 0, 0.9, 0, frandom(0.8,1.1));
        }
        A_SPAWNITEMEX("PurpleGoreChunk", frandom(-10,10), frandom(-10,10), frandom(10,30), frandom(3,5), 0, frandom(2,5), angle:frandom(0,360));
        if(bloodQualitySetting > 2)
        {
        A_SPAWNITEMEX("PurpleGoreChunk", frandom(-10,10), frandom(-10,10), frandom(10,30), frandom(3,5), 0, frandom(2,5), angle:frandom(0,360));
        A_SPAWNITEMEX("PurpleGoreChunk", frandom(-10,10), frandom(-10,10), frandom(10,30), frandom(3,5), 0, frandom(2,5), angle:frandom(0,360));
        }
		A_SpawnDefinedParticleProjectile("PurpleBloodMissileSmallDefinition", frandom(12,40), frandom(-10,10), random (0,360), 2, random (30, 60));
        A_SpawnDefinedParticleProjectile("PurpleBloodMissileSmallDefinition", frandom(12,40), frandom(-10,10), random (0,360), 2, random (30, 60));
        A_SpawnProjectile ("XDeath3Alien", 55, random(-30,30), random (0, 360), 2, random (-30, -180));
        for(int x=1;x<bloodQualitySetting;x++) {
            A_SpawnDefinedParticleProjectile("PurpleSplatterEffectBigDefinition", 32, random(-30,30), random (170, 190), 2, random (0, 40));
        }
        A_SpawnDefinedParticle("SuperGoreMistPurpleSmallDefinition");
    }

    void SpawnSmashParticles() {

        // Splats
        A_SpawnDefinedParticleProjectile("PurpleSplatterEffectBigDefinition", 32, random(-30,30), random (170, 190), 2, random (0, 40));
		
        // Impact effects slightly behind the character
        for(int i=0;i<6;i++) {
            A_SpawnDefinedParticle("SuperGoreMistPurpleSmallDefinition", -3, frandom(-15,15), frandom(0,24));
			A_SPAWNITEMEX("MeleeImpactEffectLessOpague", frandom(0,-1), frandom(-30,30),  frandom(5,24));
		}

        if(level.Maptime > 90)
        {
		    A_PlaySound("impact/wallhit", CHAN_AUTO, 0.7);
        }

        // Particles
		EmitDefinition('DebrisChunkParticleDefinition', chance: 1.0, numTries: 16, pitch: frandom(-25,10), offset: (frandom(-15,15), frandom(-15,15), frandom(-15,15)));
        EmitDefinition('SparkParticleWilderDefinition', chance: 1.0, numTries: 9, angle:random(0,259), pitch:frandom(-25, -15), speed:frandom(1.4,2.5), offset:(frandom(-3,3), frandom(-3,3),frandom(-3,3)), velocity:(frandom(0.4,3), frandom(0.4,3), frandom(1,6)));
	}
    
    virtual void BodyImpact() {
        if(level.Maptime > 90)
        {
            floorHit = true;
            A_PLAYSOUND("CORPSE/IMPACT", volume:0.66, attenuation:0.95);
            if(random(0,100) <= 35)
            {
                A_PLAYSOUND("gore/slimeysplat", CHAN_AUTO, 0.7);
            }

            if(gameDetail >= GAMEDETAIL_LOW && corpseFaction == CT_ALIEN)
            {
                for(int x=0;x<7;x++)
                {
                    A_SPAWNITEMEX("OMINOUS_PurpleSpot", frandom(-45,45), frandom(-45,45));
                    A_SpawnDefinedParticle("PurpleSplatterEffectDefinition", frandom(-5,-15), frandom(-15,15),0 , frandom(0,2.5), 0, frandom(2,4), angle:random(0,360));
                }
            }
        }
        if(gameDetail >= GAMEDETAIL_LOW  && waterlevel > 0)
        {
            A_PLAYSOUND("impact/object/watersubmerge", CHAN_AUTO, 0.95, pitch:frandom(0.7,0.8));
            for(int x=0;x<50;x++)
            {
                actor waterParticleActor;
                bool waterParticleSuccess;
                [waterParticleSuccess, waterParticleActor] = A_SPAWNITEMEX("waterParticleXBig", frandom(-1*radius, radius), frandom(-1*radius, radius), 0, frandom(0.1,2.9), 0, frandom(0.2,7), angle:random(0,360));
                if(waterParticleActor)
                {
                    selacoActor(waterParticleActor).moveToWaterSurface();
                }
            }
            for(int x=0;x<4;x++)
            {
                actor waterFoamActor;
                bool waterFoamSuccess;
                [waterFoamSuccess, waterfoamActor] = A_SPAWNITEMEX("WaterFoamSlowest", 0, 0, 0, frandom(0.6,1.2), angle:random(0,360));
                if(waterfoamActor)
                {
                    selacoActor(waterfoamActor).moveToWaterSurface();
                }
            }      
        }
        else
        {
            A_SPAWNITEMEX("SpawnImpactSmokeSmallerSuperShortThick", frandom(-3,3), frandom(-3,3), 5);
            A_SPAWNITEMEX("SpawnImpactSmokeSmallerSuperShortThick", frandom(-3,3), frandom(-3,3), 5);
            A_SPAWNITEMEX("SpawnImpactSmokeSmallerSuperShortThick", frandom(-3,3), frandom(-3,3), 5);
        }
        A_SETSIZE(radius, 12);


        // Check if we are hitting water

        // Stop from here if potato computer
        if(gameDetail < GAMEDETAIL_MEDIUM) {
            return;
        }

        Sector s = CurSector;//Level.PointInSector((pos.x, pos.y));
        if (s)
        {
			string checkString = TexMan.GetName(s.GetTexture(s.floor));
			if(checkString.Left(3) == "RN_")
			{
                for(int x=0;x<7;x++)
                {
                    EmitDefinition('WaterSplashParticlePuffDefinition', chance:75, numTries:3, speed:1, offset:(frandom(-10,10), frandom(-10,10), 0));
                    EmitDefinition('WaterSplashParticlePuffWildDefinition', chance:75, numTries:4, speed:1, offset:(frandom(-10,10), frandom(-10,10), 0));
                }
                for(int x=0;x<6;x++)
                {
                    A_SPAWNITEMEX("WaterFoamSlow", frandom(-25,25), frandom(-25,25), 0, frandom(0.6,1.2), angle:random(0,360));
                }
				A_PlaySound("STEP/rain", CHAN_AUTO, 1.0, pitch:frandom(0.5,0.9));
			}
        }


        // Find floor textures and spawn effects
        uint soundType = MaterialIndexer.Instance().getFloorMaterialType(floorpic);
		switch(soundType) {
			// Grass
			case FM_Grass:
				grassEffects();
                break;
			// Wood
			case FM_Box:
			case FM_Wood:
				WoodEffects();
                break;
            default:
                debrisEffects();
        }
    }
    
    void debrisEffects()
    {
        for(int x=5;x>0;x--)
        {
            EmitDefinition('DebrisChunkParticleUpwardDefintion', chance: 1.0, numTries: 8, speed:frandom(-0.4,1.6), offset:(frandom(-5,5), frandom(-10,10), 0));
            EmitDefinition('DebrisChunkParticleUpwardShortDefinition', chance: 1.0, numTries: 3, speed:frandom(-0.4,1.6), offset:(frandom(-5,5), frandom(-10,10), 0));;
        }
    }

    void grassEffects()
    {
		A_PlaySound("ricochet/hit",CHAN_AUTO, 1.0, 0, 1.0, false, frandom(0.80, 1.1));
		EmitDefinition('GrassParticleDefinition', chance: 1.0, numTries: 15, speed:-1);
		EmitDefinition('GrassBladeParticleDefinition', chance: 1.0, numTries: 25, speed:-1);
		EmitDefinition('GrassBladeParticleWildDefinition', chance: 1.0, numTries: 25, speed:-1);
		EmitDefinition('GrassBladeParticleFastShortDefinition', chance: 1.0, numTries: 35, speed:-1);
		A_SpawnItemex("PlantImpactEffectFloor", 0, 0, 0, frandom(-0.9,0.9), -2, 2.0);
		A_SpawnItemex("PlantImpactEffectFloor", 0, 0, 0, frandom(-0.9,0.9), 2, 2.0);
		A_SpawnItemex("PlantImpactEffectFloor", 0, 0, 0, frandom(-0.9,0.9), 0, 2);
    }

    void WoodEffects()
    {
			EmitDefinition('SawDustUpwardDefinition', chance: 0.75, numTries: 60,speed:-2);
            for(int x=0;x<3;x++)
            {
                emit('PlankParticle', chance: 1.0, numTries: 4, speed:1, offset:(frandom(-10,10), frandom(-10,10), frandom(0,3)), scaleBoost:frandom(0.8,1.25));
            }
            //A_PlaySound("impact/wood", CHAN_6, 1 0, 0, 0.97, pitch:frandom(0.6, 0.9));
			A_PlaySound("IMPACT/BODYFALL/WOOD", CHAN_6, 1.0, 0, 0.97, pitch:frandom(0.7, 0.9));
			EmitDefinition('WoodParticleUpwardDefinition', chance: 1.0, numTries: 90,speed:-2, offset: (3, -5, 0));
			EmitDefinition('SawdustFastBriefDefinition', chance: 1.0, numTries: 125,pitch:90,  speed:-4,offset: (3, -5, 0));	
			A_SpawnItemex("BulletImpactEffectWoodMotion", -3, 0, 0, frandom(-0.6,0.6), -0.7, 0.6);
			A_SpawnItemex("BulletImpactEffectWoodMotion", -3, 0, 0, frandom(-0.6,0.6), 0.7, 0.6);
			A_SpawnItemex("BulletImpactEffectWoodMotion", -3, 0, 0, frandom(-0.6,0.6), 0, 1.0);        
    }

	bool CharacterIsNearWall(int range = 30) {
		String hittex;
		FLineTraceData RemoteRay;
		LineTrace(angle - 180, range, pitch,offsetz: maxstepheight,data: RemoteRay);
		if (RemoteRay.HitType == TRACE_HitWall || (RemoteRay.HitType == TRACE_HitActor && (!RemoteRay.HitActor.bNoInteraction || !RemoteRay.HitActor.bNoBlockMap) && RemoteRay.HitActor.bSolid))
		{
            vel.x = 0;
            vel.y = 0;
			return true;
		}
			return false;
	}

    virtual void spawnHead() {
        A_SpawnItemEx(headSprite, 0, 0, 40, 2, 2, 5, 0);
        A_SpawnDefinedParticle("PurpleBloodMissileDefinition", frandom(-4, 4), frandom(-4, 4),frandom(0, 2), frandom(-4, 4), frandom(-4, 4), frandom(0, 5), random(0,360));
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
        if (bloodQualitySetting >= 4) {
            A_SpawnProjectile ("XDeath3Alien", 55, random(-30,30), random (0, 360), 2, random (-30, -180));
        }
        for(int x=0;x<8;x++)
        {
            A_SpawnProjectile ("AlienBrainPiece", height, 0, random (0, 360), 2, random (-140,-160));
        }
        int oldAngle = angle;
        for(int x=0;x<15;x++) {
            angle = random(0,360);
            vector3 sprayDirection = vecFromAngle(angle, pitch+=frandom(-60,60));
            A_SprayDecal("PurpleOrgans", 250, offset:(0,0,frandom(0,80)), direction:sprayDirection);
        }
        for(int x=0;x<15;x++) {
            angle = random(0,360);
            vector3 sprayDirection = vecFromAngle(angle, pitch+=frandom(-60,60));
            A_SprayDecal("OminousPurpleSplat", 250, offset:(0,0,frandom(0,80)), direction:sprayDirection);
        }
        angle = oldangle;
        for(int x=0;x<8;x++)
        {
            A_SpawnDefinedParticle("PurpleSplatterEffectDefinition", random(-10, 10), random(-8,8),frandom(height-10,height+20), random(-3,3), random(-3,3),random(1,6));
        }
		A_SpawnProjectile ("XDeath1Alien", 32, 0, random (0, 360), CMF_ABSOLUTEPITCH, random (-10, -70));
		//TNT1 A 0 A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", random(-10, 10), random(-8,8),frandom(height,height+20), random(-3,3), random(-3,3),random(1,6));
		A_SpawnDefinedParticle("PurpleSplatterEffectDefinition", random(-10, 10), random(-8,8),frandom(height,height+20), random(-3,3), random(-3,3),random(1,6));
		for(int x=0;x<bloodQualitySetting;x++) 
        {
			for(int x=0;x<2;x++) {
				A_SpawnDefinedParticle("PurpleBloodMissileDefinition", frandom(-4, 4), frandom(-4, 4),frandom(height,height-10), frandom(-4, 4), frandom(-4, 4), frandom(3, 10), random(0,360));
			}
        }
        A_SpawnProjectile ("XDeath1Alien", 32, random(-30,30), random (150, 210), 2, random (0, 40));
        if(level.Maptime > 90)
        {
            A_PlaySound("dest/headblow",CHAN_AUTO, 0.5, 0, 0.8, false, frandom(0.86, 1.15));
        }
        A_SpawnDefinedParticleProjectile("PurpleSplatterEffectBigDefinition", 43, frandom(-5, 5), random (-60, 160), 2, random (0, 40));
        A_SpawnDefinedParticle("SuperGoreMistPurpleSmallDefinition");
    }

    virtual void ALotOfGibs() {
        addCornerSlime(4);
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("GIB/STOMP", CHAN_AUTO, 0.8, 0, 0.8);
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.9, 0, frandom(0.8,1.1));
        }
        for(int x=0;x<15;x++) {
            angle = random(0,360);
            vector3 sprayDirection = vecFromAngle(angle, pitch+=frandom(-60,60));
            A_SprayDecal("OminousPurpleSplat", 250, offset:(0,0,frandom(0,80)), direction:sprayDirection);
        }
        for(int x=0;x<15;x++) {
            angle = random(0,360);
            vector3 sprayDirection = vecFromAngle(angle, pitch+=frandom(-60,60));
            A_SprayDecal("PurpleOrgans", 250, offset:(0,0,frandom(0,80)), direction:sprayDirection);
        }
        A_SPAWNITEMEX("PurpleGoreChunk", frandom(-10,10), frandom(-10,10), frandom(10,30), frandom(3,5), 0, frandom(2,5), angle:frandom(0,360));
        A_SPAWNITEMEX("PurpleGoreChunk", frandom(-10,10), frandom(-10,10), frandom(10,30), frandom(3,5), 0, frandom(2,5), angle:frandom(0,360));
		S_SpawnDefinedProjectile("PurpleBloodMissileDefinition", frandom(1, projectileSpeedMulti), 15, 0, random (0, 360), 2, random (0, 180));
        S_SpawnProjectile ("XDeath3Alien", frandom(1, projectileSpeedMulti), frandom(10,55), random(-30,30), random (0, 360), 2, random (-30, -180));
        if (bloodQualitySetting >= 3) {
            S_SpawnProjectile ("XDeath3Alien", frandom(1, projectileSpeedMulti), frandom(10,55), random(-15,15),   random (0, 360), 2, random (-30, -180));
        }
        A_SpawnDefinedParticle("SuperGoreMistPurpleSmallDefinition", frandom(-60,60), frandom(-60,60), 40);
        A_SpawnDefinedParticle("SuperGoreMistPurpleSmallDefinition", frandom(-60,60), frandom(-60,60));
        
        for(int x=0;x<6;x++)
        {
            S_SpawnProjectile ("AlienIntestine", frandom(1, projectileSpeedMulti), random(0,12), random(-30,30), random (0, 360), 2, random (-30, -110));
            A_SpawnDefinedParticle("SuperGorePurpleMistDefinition", frandom(-45,45), frandom(-45,45), frandom(0,40));
        }

        // Spawn AlienIntestines based on BloodQuality settings
        for(int x=0;x<bloodQualitySetting;x++) {
            A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", frandom(-5, 5), frandom(-3,3),frandom(5,25), frandom(-3,3), frandom(-3,3),frandom(1,7));
            A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", frandom(-5, 5), frandom(-3,3),frandom(5,25), frandom(-3,3), frandom(-3,3),frandom(1,7));
            A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", frandom(-5, 5), frandom(-3,3),frandom(5,25), frandom(-3,3), frandom(-3,3),frandom(1,7));
            A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", frandom(-5, 5), frandom(-3,3),frandom(5,25), frandom(-3,3), frandom(-3,3),frandom(1,7));
            A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", frandom(-5, 5), frandom(-3,3),frandom(5,25), frandom(-3,3), frandom(-3,3),frandom(1,7));
            S_SpawnDefinedProjectile("BonePartDefinition", frandom(1, projectileSpeedMulti), random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
            S_SpawnDefinedProjectile("BonePartDefinition", frandom(1, projectileSpeedMulti), random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
            S_SpawnDefinedProjectile("BonePartDefinition", frandom(1, projectileSpeedMulti), random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
            S_SpawnDefinedProjectile("BonePartDefinition", frandom(1, projectileSpeedMulti), random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
            S_SpawnProjectile ("AlienBrainPiece", frandom(1, projectileSpeedMulti), height, 0, random (0, 360), 2, random (-10,-160));
            S_SpawnProjectile ("XDeath3Alien", frandom(1, projectileSpeedMulti+0.06), frandom(5,15), random(-15,15), random (0, 360), 2, random (-70, -180));
            S_SpawnProjectile ("XDeath3Alien", frandom(1, projectileSpeedMulti+0.02), frandom(5,15), random(-15,15), random (0, 360), 2, random (-70, -180));
            S_SpawnProjectile ("AlienIntestine", frandom(1, projectileSpeedMulti), random(0,12), random(-30,30), random (0, 360), 2, random (-30, -110));
            S_SpawnProjectile ("AlienIntestine", frandom(1, projectileSpeedMulti), random(0,12), random(-30,30), random (0, 360), 2, random (-30, -110));
            S_SpawnProjectile ("AlienIntestine", frandom(1, projectileSpeedMulti), random(0,12), random(-30,30), random (0, 360), 2, random (-30, -180));
            S_SpawnProjectile ("AlienIntestine", frandom(1, projectileSpeedMulti), random(0,12), random(-30,30), random (0, 360), 2, random (-30, -180));
        }

        S_SpawnProjectile ("XDeath3Alien", frandom(1, projectileSpeedMulti), frandom(10,55), random(-30,30), random (0, 360), 2, random (-70, -180));
        S_SpawnProjectile ("XDeath3Alien", frandom(1, projectileSpeedMulti), frandom(10,55), random(-30,30), random (0, 360), 2, random (-70, -180));
        S_SpawnProjectile ("XDeath3Alien", frandom(1, projectileSpeedMulti), frandom(10,55), 0, random (0, 360), 2, random (-30, -180));
        if(armCount == 1)
        {
            S_SpawnProjectile ("CutoffArmLeft", frandom(1, projectileSpeedMulti), 16, random(-30,30), random (-170, -190), 2, random (-120, -180));           
        }
        if(armCount == 2)
        {
           S_SpawnProjectile ("CutoffArmright", frandom(1, projectileSpeedMulti), 16, random(-30,30), random (-170, -190), 2, random (-120, -180));         
        }
        if(legCount == 1)
        {
            S_SpawnProjectile ("cutofflegmirror", frandom(1, projectileSpeedMulti), 16, random(-10,10), 0, 2, random (-10, -120));    
        }
        if(legCount == 2)
        {
           S_SpawnProjectile ("cutoffleg", frandom(1, projectileSpeedMulti), 16, random(-10,10), 0, 2, random (-10, -120));     
        }
        S_SpawnProjectile ("cutoffChest", frandom(1, projectileSpeedMulti), 32, random(-30,30), random (170, 190), 2, random (-10, -120));
		A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", random(-5, 5), random(-3,3),random(5,25), random(-3,3), random(-3,3),random(1,7));
        A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", random(-5, 5), random(-3,3),random(5,25), random(-3,3), random(-3,3),random(1,7));
        A_SpawnItem("SuperGorePurpleMist");
    }

    void gibCompletely() {
        ALotOfGibs();
        if(headcount > 0)
        {
            A_SpawnItemEx(headSprite, 0, 0, 32, 2, 2, 5, 0);
        }
        switch(armcount)
        {
            case 2:
                spawnBothArms();
                break;
            case 1:
                spawnOneArm();
                break;
        }

        while(legCount > 0)
        {
            legCount--;
            A_SpawnProjectile ("cutoffleg", 32, 0, random (0, 180), 2, random (0, 40));
        }
    }

    void spawnBothArms () {
        addCornerSlime(1);
        armCount-=2;
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
        }
        A_SpawnProjectile ("CutoffArmRight", 35, random(4,6), 0, 2, 0);
        A_SpawnProjectile ("CutoffArmLeft", 35, random(-4,6), frandom(-125,-180), 2, 0);
    }
    void spawnOneArm () {
        armCount--;
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(40,50), frandom(-5,5), random(0,360), 2, frandom(-10,-160));
        addCornerSlime(2);
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
        }
        A_SpawnProjectile ("CutoffArmLeft", 24, random(-7, 7), frandom(-180,180), 2, 0);
    }
    void spawnRightArm () {
        armCount--;
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(-90, -45), 2, frandom(-10,-160));
        addCornerSlime(2);
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
        }
        A_SpawnProjectile ("CutoffArmLeft", 24, random(4, 7), 0, 2, 0);
    }
    void spawnOneArmLeft () {
        armCount--;
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-5,5), random(0,45), 2, frandom(-10,-160));
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-5,5), random(0,45), 2, frandom(-10,-160));
        addCornerSlime(2);
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 0.9, 0, 0.6, 0, frandom(0.8,1.1));
        }
        A_SpawnProjectile ("CutoffArmLeft", 32, random(14, 17), frandom(-45,-75), CMF_AIMDIRECTION, pitch:frandom(-130,-160));
    }
    void spawnOneArmRight () {
        armCount--;
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-5,5), random(0,45), 2, frandom(-10,-160));
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-5,5), random(0,45), 2, frandom(-10,-160));
        addCornerSlime(2);
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 0.9, 0, 0.6, 0, frandom(0.8,1.1));
        }
        A_SpawnProjectile ("CutoffArmRight", 32, random(-15, -18), frandom(75,45), CMF_AIMDIRECTION, pitch:frandom(-130,-160));
    }
    virtual void spawnOneLeg () {
        legCount--;
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
        A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
        addCornerSlime(2);
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 0.8, 0, 0.6, 0, frandom(0.8,1.1));
        }
        A_SpawnProjectile ("CutoffLeg", 8, random(4, 7), random(0,360), 2, pitch:60);
    }

    virtual void SpawnOneLegMirrored()
    {
        legCount--;
        addCornerSlime(2);
        if(level.Maptime > 90)
        {
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 0.6, 0, 0.6, 0, frandom(0.8,1.1));
        }
        A_SpawnProjectile ("CutoffLegMirror", 4, random(4, 7), random(0,360), 2, pitch:60);        
    }

    void noLongerShootable() {
        bNoPain = true;
        health = 1200;
        A_SetSize(-1, 13);
        ReadyToGib = true;
    }

    Default {
        Species "Alien";
        Radius 16;
        Height 49;
        scale 0.39;
        yscale 0.29;
        +DeathceptionMaster.AutoSleep
        selflighting "383838";
        damageFactor "shotgun", 900;
        damagefactor "magnumbullet", 900;
        damageFactor "explosiveimpact", 2;
        damageFactor "MeleeImpactSplash", 0.2;
        damageFactor "fire", 0;
        damageFactor "FanBlades", 0;
        MaxStepHeight 6;
        Health 1500;
        friction 0.85;
		BloodType "Selaco_PurpleBlood_Armor", "Selaco_PurpleBlood_Armor", "Selaco_PurpleBlood_Armor";
        DeathSound "grunt/death";
        DeathceptionMaster.SoldierSkeleton "Rifleman";
        PainChance 0;
        Mass 1000;
        DamageFactor "DecorationImpact", 0;
        SELACOACTOR.SleepDistance 3096; 
        +SelacoActor.EnemyProjectilePassThru;
        +SELACOACTOR.SleepWhenIdle;
        -SELACOACTOR.WakeNearPlayer;
        DeathceptionMaster.CorpseFaction CT_ALIEN;
        DeathCeptionMaster.projectileSpeedMulti 1;
        +DONTCORPSE;
        +CASTSPRITESHADOW
        -SHOOTABLE;
        +NOBLOODDECALS
        +NODAMAGE
        +Bloodsplatter;
        +FLOORCLIP;
        +NOBLOODDECALS
        +DONTSPLASH;
        +PRECACHEALWAYS;    // We want specific frames for deathceptions to precache, so the deaths don't "pop" in
    }
    states {
        Precache:
            END1 A 0;
            END2 A 0;
            END3 A 0;
            END4 A 0;
            END5 A 0;
            END6 A 0;
            END7 A 0;
            END8 A 0;
            END9 A 0;
            RFD1 A 0;
            RFD2 A 0;
            RFD3 A 0;
            RFD4 A 0;
            RFD5 A 0;
            RFD6 B 0;
            RFD7 A 0;
            RFD8 A 0;
            RFD9 A 0;
            ENH1 A 0;
            ENH2 A 0;
            ENH3 A 0;
            ENH4 A 0;
            ENH5 A 0;
            ENH6 A 0;
            ENH7 A 0;
            ENH8 A 0;
            ENH9 A 0;
            RFH1 A 0;
            RFH2 A 0;
            RFH3 A 0;
            RFH4 A 0;
            RFH5 A 0;
            RFH6 A 0;
            RFH7 A 0;
            RFH8 A 0;
            RFH9 A 0;
            EN01 A 0;
            RF01 A 0;
            Stop;
        Spawn:
        // When a death happens, execute this code.
        TNT1 A 0;
        TNT1 A 0 {
            SetStateLabel("StartDying");
        }
        Death.shotgun:
            TNT1 AAAAA 0 A_SpawnDefinedParticle("SuperGorePurpleMistDefinition", frandom(-90,90), frandom(-90,90), frandom(-10, 100));
            TNT1 A 0
            {
                projectileSpeedMulti = 1.05;
            }
            goto death;
        Death.ExplosiveImpact:
            TNT1 AAAAA 0 A_SpawnDefinedParticle("SuperGorePurpleMistLongerDefinition", frandom(-90,90), frandom(-90,90), frandom(-10, 110));
            TNT1 A 0
            {
                projectileSpeedMulti = 1.15;
            }
            goto death;
        Death:
            TNT1 A 0 {
                ALotOfGibs();
            }
            stop;
    }
}

class AlienCorpseSpawner : Actor {

    string corpseSpawn;
    actor corpseActor;
    bool spawned;

    static const String corpseActors[] =
    {
        "DeathAlienRegular1", "RiflemanDeadLeg", "DeathAlienRegular2", "DeathAlienRegular3", "DeathAlienRegular4", "DeathAlien_LegSweep", 
        "DeathAlien_SpinDrop", "deadalien9", "DeadRiflemanBack", "DeadEngineer9", "EngineerDeadLeg", "DeathEngineerRegular3", "DeathEngineerWallBang", 
        "DeathEngineerOverkill", "DeadEngineerBack"
    };

    override void postbeginPlay()
    {
        string corpseSpawn = corpseActors[(random(0,corpseActors.size()-1))];
        [spawned, corpseActor] = A_SPAWNITEMEX(corpseSpawn);
        destroy();
    }

}

class DeadAlien1: DeathceptionMaster
{
States
    {
    Spawn:
        POSS L -1;
        Stop;
	Death:
		TNT1 A 0;
	Death1:
	    TNT1 A 0; // A_NoBlocking
		TNT1 A 0 A_SpawnProjectile ("XDeath1Alien", 15, 0, random (0, 360), 2, random (0, 180));
		TNT1 A 0 SpawnOneArm();
		TNT1 A 0 A_SpawnProjectile ("PurpleSplatterEffect", 15, 0, random (0, 360), 2, random (0, 180));
        TNT1 A 0 A_SpawnItem ("DeadAlien_NoArm");
		Stop;
    }
}

class DeadAlienCrawler : DeathceptionMaster
{
    
    override void tick()
    {
        super.tick();
        if(health >= 0 && floorHit && level.time % 3 == 0)
        {
            if(random(0,100) <= 20)
            {
                a_playsound("IMPACT/PURPLEDRIP", CHAN_AUTO, 0.3);
            }
            A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", frandom(-10,-12), frandom(-2,2), 5, frandom(-0.1,-0.3), 0, frandom(0.2,1.2));
            A_SPAWNITEMEX("OMINOUS_PurpleSpot");
        }
    }
    
    // Set the target on spawn so Spawn doesn't keep looping when the corpse is out of sight of the player
    override void PostBeginPlay() {
        Super.PostBeginPlay();

        if(!target) target = players[consolePlayer].mo;
    }

    default
    {
        health 30;
        speed 0;
        friction 0.95;
        maxstepheight 8;
        +FRIGHTENED;
        +SelacoActor.PreventSleep;
        -DeathceptionMaster.autosleep;
        
    }
    states
    {
        spawn:
            TNT1 A 0;
            TNT1 A 0 
            {
                A_PLAYSOUND("GIB/STOMP", CHAN_AUTO, 1.0, 0, 0.8);
                spawnOneLeg();
                SpawnOneLegMirrored();
                spawnMeatChunks();
                A_CHANGEVELOCITY(-4, 0, 0, CVF_RELATIVE);
            }
            RFCG ABCDEF 3
            {
                bBuddha = true;
            }
            TNT1 A 0 BodyImpact();
            RFCG GHIJKLMNO 3;
        Looper:
            TNT1 A 0
            {
                bBuddha = false;
                A_CHANGEVELOCITY(3,0,0, CVF_RELATIVE);
            }
            RFCD AAAAACCCCCEEEEE 1;
            RFCD GGGGGIIII 1
            {
                A_CHASE(null, null);
            }
            TNT1 A 0
            {
                A_CHANGEVELOCITY(3,0,0, CVF_RELATIVE);
            }
            RFCD KKKKLLLLLMMMMMMNNNNNOOOOOPPPPPQQQQ 1;
            TNT1 A 0
            {
                if(random(0,1) == 1)
                {
                    A_PLAYSOUND("grunt/meleepain", CHAN_VOICE, 0.3);
                }
                health-=3;
                if(health <= 0)
                {
                    setStateLabel("Death");
                }
            }
            loop;
        Death:
            TNT1 A 0
            {
                BodyImpact();
                NoLongerShootable();
                A_PLAYSOUND("Grunt/death", CHAN_VOICE);
            }
            RFCE ABCDEF 3;
            RFCE F -1
            {
                SleepIndefinite();
            }
    }
}

class DeadAlien9: DeathceptionMaster
{
    
    string DeathSprite;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFD9";
        DeathSprite = "DeadAlien9NoHead";
    }
    default {
        health 50;
    }
States
    {
    Precache:
        RFD9 A 0;
        Stop;
    Spawn:
        TNT1 A 0;
        TNT1 A 0 {
            sprite = GetSpriteIndex(spriteToUse);
        }
        TNT1 ABCD 5;
        TNT1 E 4 
        {
            if(level.Maptime > 90)
            {
                a_playsound("impact/bag", CHAN_AUTO, 0.7, 0, 1.0, 0, 1.1);
            }
        }
        TNT1 FGH 5;
        TNT1 I 5 {
            NoLongerShootable();
            BodyImpact();
        }
        TNT1 JK 4;
        TNT1 K -1;
        Stop;
	Death:
	    TNT1 A 0; // A_NoBlocking
		TNT1 A 0 A_SpawnProjectile (DeathSprite, 15, 0, random (0, 360), 2, random (0, 180));
		TNT1 A 0 SpawnOneArm();
		TNT1 A 0 A_SpawnProjectile ("PurpleSplatterEffect", 15, 0, random (0, 360), 2, random (0, 180));
        TNT1 A 0 {
            spawnHead();
        }
		Stop;
    }
}

class DeadRiflemanBack: DeathceptionMaster
{
    
    string DeathSprite;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFDA";
        DeathSprite = "DeadRiflemanBackHead";
    }
    default {
        height 34;
        radius 25;
        health 50;
    }
States
    {
    Precache:
        RFDA A 0;
        Stop;
    Spawn:
        TNT1 A 0;
        TNT1 A 0 {
            SpawnOneArm();
            sprite = GetSpriteIndex(spriteToUse);
        }
        TNT1 ABCD 4;
        TNT1 E 3;
        TNT1 F 3
        {
            BodyImpact();
        }
        TNT1 GH 3;
        TNT1 I 3 {
            NoLongerShootable();
        }
        TNT1 JKLMNOP 3;
        TNT1 Q -1;
        Stop;
	Death:
	    TNT1 A 0; // A_NoBlocking
        TNT1 A 0 A_SPAWNITEMEX(DeathSprite);
		Stop;
    }
}

class DeadRiflemanBackHead : DeathceptionMaster
{
    string DeathSprite;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFDA";
    }
    states
    {
        Precache:
            RFDA A 0;
            Stop;
        Spawn:
            TNT1 A 0;
    		TNT1 A 0 SpawnOneArm();
            TNT1 A 0 spawnHead();
        StartDying:
            TNT1 A 0;
            TNT1 A 0 {
                NoLongerShootable();
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 RSTUVW 3;
            TNT1 X -1;
            Stop;
    }
}

class DeadEngineerBack : DeadRiflemanBack
{
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENDA";
        DeathSprite = "DeadEngineerBackHead";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states
    {
        Precache:
            ENDA A 0;
            Stop;
    }
}

class DeadEngineerBackHead : DeadRiflemanBackHead
{
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENDA";
    }
    states
    {
        Precache:
            ENDA A 0;
            Stop;
        Spawn:
            TNT1 A 0;
    		TNT1 A 0 SpawnOneArm();
            TNT1 A 0 spawnHead();
            goto startDying;
    }
}


class DeadPlasmaTrooperBack : DeadRiflemanBack
{
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTDA";
        DeathSprite = "DeadPlasmaTrooperBackHead";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states
    {
        Precache:
            PTDA A 0;
            Stop;
    }
}

class DeadPlasmaTrooperBackHead : DeadEngineerBackHead
{
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTDA";
    }
    states
    {
        Precache:
            PTDA A 0;
            Stop;
    }
}


class RiflemanDeadLeg : DeathceptionMaster {

    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFDL";
    }

    default {
        health 20;
        height 25;
        Painchance 255;
    }

    states {
        Precache:
            RFDL A 0;
            Stop;
        StartDying:
            TNT1 A 0;
            TNT1 A 0 
            {
                if(level.Maptime > 90)
                {
                    A_PLAYSOUND("grunt/fatal", CHAN_5);
                }
                sprite = GetSpriteIndex(spriteToUse);
                spawnOneLeg();
            }
            TNT1 A 4 
            {
                A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 7, 14);
            }
            TNT1 B 4 
            {
                A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 9, 13);
            }
            TNT1 C 4 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 3, 4);
            TNT1 A 0 BodyImpact();
            TNT1 A 0 A_SETSIZE(-1, 25);
            TNT1 D 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 1, 5);
            TNT1 E 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 2, 5);
            TNT1 FGHIJKL 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, FRANDOM(13,16), frandom(3,4));
            TNT1 L 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 10, 5);
            TNT1 M 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 9, 6);
            TNT1 N 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 9, 7);
            TNT1 O 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 4, 9);
            TNT1 P 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 1, 10);
            TNT1 Q 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, -3, 11);
            TNT1 R 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, -9, 9);
            TNT1 S 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, -3, 11);
            TNT1 TU 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, FRANDOM(6,8), frandom(7,9));
        death:
            TNT1 A 0 {
                A_SETSIZE(-1, 10);
                if(level.Maptime > 200)
                {
                    A_PLAYSOUND("grunt/meleepain", CHAN_5);
                }
                bNopain = true;
            }
            TNT1 VW 5 A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, FRANDOM(6,8), frandom(7,9));
            TNT1 A 0 BodyImpact();
            TNT1 XXXXXXXXXXXXX RANDOm(5,8) A_SpawnDefinedParticle("PurpleSplatterEffectSmallDefinition", 5, 11, 4, frandom(1,2), frandom(1,2), frandom(0.2,0.4));
            TNT1 X -1;
    }
}

class EngineerDeadLeg : RiflemanDeadLeg {
     override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENDL";
    }   
    states {
        Precache:
            ENDL A 0;
            Stop;
    }
}

class PlasmaTrooperDeadLeg : RiflemanDeadLeg {
     override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTDL";
    }   
    states {
        Precache:
            PTDL A 0;
            Stop;
    }
}


class DeadAlien9NoHead: DeathceptionMaster
{
    
    string DeathSprite;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFD9";
    }
    States  {
        Precache:
            END9 A 0;
            RFD9 A 0;
            Stop;
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 LMNO 5;
            TNT1 P 4 {
                NoLongerShootable();
                BodyImpact();
            }
            TNT1 Q 4;
            TNT1 R -1;
            Stop;
    }
}

class DeadEngineer9NoHead : DeadAlien9NoHead {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "END9";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }

    States  {
        Precache:
            END9 A 0;
            Stop;
    }
}

class DeadEngineer9  : DeadAlien9 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "END9";
        DeathSprite = "DeadEngineer9NoHead";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
        health 80;
    }
    states {
        Precache:
            END9 A 0;
            Stop;
    }
}

class DeadPlasmatrooper9NoHead : DeadAlien9NoHead {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTD9";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }

    States  {
        Precache:
            PTD9 A 0;
            Stop;
    }
}

class DeadPlasmatrooper9  : DeadAlien9 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTD9";
        DeathSprite = "DeadPlasmatrooper9NoHead";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
        health 80;
    }
    states {
        Precache:
            PTD9 A 0;
            Stop;
    }
}

class DeadAlien_Nailgun1 : DeathceptionMaster {

    default
    {
        health 250;
    }

    override void tick() {
        super.tick();
        vel.z = 0;
        vel.x = 0;
        vel.y = 0;
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        SpriteToUse = "RFN1";
    }
    states {
        Precache:
            RFN1 A 0;
            Stop;
        Spawn:
           TNT1 A 0;
           TNT1 AAAAAA 0 A_SPAWNITEMEX("NailgunTracerPermanent", frandom(-5,0), frandom(-15,15), frandom(45,65));
           TNT1 A 0 {
               sprite = GetSpriteIndex(SpriteToUse);
               spawnMeatChunks();
           }
            TNT1 A 0 {
                bNoGravity = true;
            }
            TNT1 GHIJKL 2 {
                vel.z = 0;
            }
            TNT1 M -1;
            stop;
    }
}

class DeadEngineer_Nailgun1 : DeadAlien_Nailgun1 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        SpriteToUse = "ENN1";
    }
    states {
        Precache:
            ENN1 A 0;
            Stop;
    }
}

class EnforcerNailgun1 : DeadAlien_Nailgun1
{
    override void PostBeginPlay() {
        super.PostBeginPlay();
        SpriteToUse = "ECN1";
    }
    states {
        Precache:
            ECN1 A 0;
            Stop;
    }
}

class SiegerNailgun1 : DeadAlien_Nailgun1
{
    override void PostBeginPlay() {
        super.PostBeginPlay();
        SpriteToUse = "SGNI";
    }
    states {
        Precache:
            SGNI A 0;
            Stop;
    }
}


class PlasmaTrooperNailgun1 : DeadAlien_Nailgun1
{

    int bloodSprays;
    CONST MAX_BLOOD_SPRAYS = 100;

    override void tick()
    {
        super.tick();
        if(bloodSprays < MAX_BLOOD_SPRAYS && level.time % 3 == 0)
        {
            bloodSprays++;
            A_SpawnDefinedParticle("PurpleSplatterEffectTinyDefined", 5, 7,24);
        }
    }

    override void PostBeginPlay() {
        super.PostBeginPlay();
        spawnOneLeg();
        SpriteToUse = "PTN1";
    }
    states {
        Precache:
            PTN1 A 0;
            Stop;
    }
}

class DeadAlien_NoArm: DeathceptionMaster
{
    States {
	Spawn:
        POS3 E -1;
        Stop;	
    }
}

class DEATH_EPICSPINOFDEATH : DeathceptionMaster {
    
    override void postbeginPlay() {
        super.postbeginPlay();
        spriteToUse = "RF02";
    }
    default {
        health 70;
        height 15;
        radius 30;
        mass 120;
        friction 1.01;
        gravity 0.87;
        scale 0.37;
        yscale 0.24;
        +CANPUSHWALLS;      // Required to be detected by glass
    }
    states {
        Precache:
            EN02 A 0;
            RF02 A 0;
            Stop;
        startdying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 A_ChangeVelocity(0, 0, 5);
            TNT1 A 0 playDeathSound();
            TNT1 A 0 A_NoBlocking;
            TNT1 A 0 A_RECOIL(3);
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteToUse);
                SpawnOneArm();
                spawnOneLeg();
                if(bloodQuality == 4)
                {
                   spawnMeatChunks(); 
                }
            }
    		TNT1 A 0 A_SpawnProjectile ("XDeath1Alien", 35, 0, random (0, 360), 2, random (0, 160));
            TNT1 AAABBBCCCDDDEEE 1 {
                A_RECOIL(1);
                if (CharacterIsNearWall(30) || abs(vel.x + vel.y) < 0.5 && frame > 2) 
                {
                    for(int x=0;x<bloodQualitySetting;x++) 
                    {
                        for(int x=0;x<=2;x++) 
                        {
                            A_SpawnDefinedParticle("PurpleBloodMissileDefinition", frandom(-4, 4), frandom(-4, 4),frandom(height,height-10), frandom(-4, 4), frandom(-4, 4), frandom(3, 10), random(0,360));
                        }
                    }
                    if(level.Maptime > 90)
                    {
                        A_playSound("impact/wallcollider", CHAN_AUTO, 0.9, 0, 0.9);
                    }
                    SpawnSmashParticles();
                    //spawnMeatChunks();
			        A_SpawnItemEx("MeleeImpactSplash");
                    SetStateLabel("Done");   
                }
                    //A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 15, 0, random (0, 360), 2, random (0, 40));
                    A_SPAWNITEMEX("OMINOUS_PurpleSpot", frandom(-5, 5),frandom(-15, 15));
                    A_SPAWNITEMEX("OMINOUS_PurpleSpot",frandom(-5, 5),frandom(-15, 15));
		            A_SpawnItemEx("SmokeTrailPieceArmorPurpleSlow", random(-4, 4), random(-12, 12), random(6, 12),  frandom(-1, 1), frandom(-1, 1), frandom(-1, 1));
            }
            TNT1 A 0 ThrustThingZ(0,5,0,1);
            TNT1 FFFGGGHHHIIIJJJKKKLLLMMMNNNOOO 1 {
                if (CharacterIsNearWall(30) || abs(vel.x + vel.y) < 0.5) 
                {
                    A_playSound("impact/wallcollider", CHAN_AUTO, 0.9, 0, 0.9);
                    SpawnSmashParticles();
                    //spawnMeatChunks();
			        A_SpawnItemEx("MeleeImpactSplash");
                    SetStateLabel("HitAWall");
                }
                A_SPAWNITEMEX("OMINOUS_PurpleSpot", frandom(-25, 25),frandom(-25, 25));
                A_SPAWNITEMEX("OMINOUS_PurpleSpot", frandom(-25, 25),frandom(-25, 25));
                A_SpawnItemEx("SmokeTrailPieceArmorPurpleSlow", random(-4, 4), frandom(-13, 13), random(6, 12),  frandom(-1, 1), frandom(-1, 1), frandom(-1, 1));
            }
            TNT1 A 0 {
                //bBUDDHA = true;
            }
        Done:
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 A 0 BodyImpact();
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 P -1;
        HitAWall:
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 MLKJIO 3;
            TNT1 P -1;
            STOP;
    }
}

class DEATH_EPICSPINOFDEATHNOBLOOD : DEATH_EPICSPINOFDEATH {
    override void postbeginPlay() {
        super.postbeginPlay();
        spriteToUse = "RFD7";
    }
    states {
        Precache:
            END7 A 0;
            RFD7 A 0;
            Stop;
        startdying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 playDeathSound();
            TNT1 A 0 A_Scream;
            TNT1 A 0 A_NoBlocking;
            TNT1 A 0 A_RECOIL(2);
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteToUse);
                //spawnMeatChunks();
            }
            TNT1 AAABBBCCCDDDEEE 1 
            {
                A_RECOIL(1);
                if (CharacterIsNearWall(30) || abs(vel.x + vel.y) < 0.5 && frame > 2) 
                {
                    A_playSound("impact/wallcollider", CHAN_AUTO, 0.9, 0, 0.9);
                    SpawnSmashParticles();
                    A_CHANGEVELOCITY(-2,0,0,CVF_RELATIVE);
                    //spawnMeatChunks();
			        A_SpawnItemEx("MeleeImpactSplash");
                    SetStateLabel("Done");   
                }
            }
            TNT1 A 0 ThrustThingZ(0,5,0,1);
            TNT1 FFFGGGHHHIIIJJJKKKLLLMMMNNNOOO 1 
            {
                if (CharacterIsNearWall(30) || abs(vel.x + vel.y) < 0.5) 
                {
                    A_CHANGEVELOCITY(-2,0,0,CVF_RELATIVE);
                    A_playSound("impact/wallcollider", CHAN_AUTO, 0.9, 0, 0.9);
                    SpawnSmashParticles();
			        A_SpawnItemEx("MeleeImpactSplash");
                    SetStateLabel("HitAWall");
                }
            }
            TNT1 A 0 {
                //bBUDDHA = true;
            }
        Done:
            TNT1 A 0 BodyImpact();
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 P -1;
    }
}

class DEATH_ENGINEEREPICSPINOFDEATH : DEATH_EPICSPINOFDEATH{
    override void postbeginPlay() {
        super.postbeginPlay();
        spawnOneLeg();
        spriteToUse = "END7";
    }
    states {
        Precache:
            END7 A 0;
            Stop;
    }
}

class DEATH_ENFORCERSPINOFDEATHSHOTGUN : DEATH_EPICSPINOFDEATHNOBLOOD {
    override void postbeginPlay() {
        super.postbeginPlay();
        spriteToUse = "EF02";
    }
    states {
        Precache:
            EF02 A 0;
            Stop;
    }
}

class DEATH_ENGINEERSPINOFDEATHSHOTGUN : DEATH_EPICSPINOFDEATH {
    override void postbeginPlay() {
        super.postbeginPlay();
        spriteToUse = "END7";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            END7 A 0;
            Stop;
    }
}

class DEATH_PLASMATROOPERSPINOFDEATHSHOTGUN : DEATH_EPICSPINOFDEATH {
    override void postbeginPlay() {
        super.postbeginPlay();
        spriteToUse = "PTD7";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states {
        Precache:
            PTD7 A 0;
            Stop;
    }
}

class RIFLEMAN_WALLSIT : DeathceptionMaster {
    bool isSitting;
    
    string DeathSprite;

    override void PostBeginPlay() {
        super.PostBeginPlay();
        SpriteToUse = "RFST";
        spawnOneArm();
        DeathSprite = "DeathAlienWallSitHeadless";
    }

    override void tick() {
        super.tick();
        if(!CharacterIsNearWall() && isSitting && level.Maptime % random(3,5) == 0) {
            isSitting = false;
            SetStateLabel("Death.NoWall");
        }
    }
    default {
        health 50;
        height 62;
        radius 20;
        +solid
    }
    states {
        Precache:
            ENSI A 0;
            RFST A 0;
            Stop;
        startdying:
            TNT1 A 0 {
                A_StopSound(CHAN_7);
                A_RECOIL(3);
                A_NoBlocking();
                sprite = GetSpriteIndex(SpriteToUse);
            }
            TNT1 ABCDEFGHI 4 A_RECOIL(3);
            TNT1 A 0 BodyImpact();
            TNT1 A 0 {
                isSitting = true;
            }
            TNT1 A 0 A_SetSize(-1, 38); 
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 J -1;
        Death:
             TNT1 A 0 spawnHead();
             TNT1 A 0  {
                isSitting = false;
             }
             TNT1 A 0 {
                actor sitActor;
                bool succ;
                [succ, sitActor] = A_SpawnItemEx(DeathSprite);
                if(sitActor) {
                    sitActor.angle = angle;
                }
             }
             stop;
        Death.shotgun:
            TNT1 A 0 A_SpawnItemEx("DeathAlienRegular1Killed");
            stop;
        Death.NoWall:
            TNT1 A 0 {
                isSitting = false;
            }
            POSS L -1;
            stop;
    }
}

class DeathAlienWallSitHeadless : DeathceptionMaster {
    
    override void PostBeginPlay() {
        super.postBeginPlay();
        if(getClassName() != "Enforcer_wallsit")
        {
            spawnOneArm();
        }
        SpriteToUse = "RFST";
    }
    default {
        health 140;
    }
    states {
        Precache:
            RFST A 0;
            Stop;
        spawn:
            TNT1 A 0;
            TNT1 A 0 {
                sprite = GetSpriteIndex(SpriteToUse);
            }
            TNT1 K -1;
            stop;
        Death.shotgun:
            TNT1 A 0 A_SpawnItemEx("DeathAlienRegular1Killed");
            stop;
    }
}

class Engineer_Wallsit : RIFLEMAN_WALLSIT {
    override void PostBeginPlay() {
        Super.PostBeginPlay();
        SpriteToUse = "ENSI";
        DeathSprite = "DeathEngineerWallSitHeadless";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            ENSI A 0;
            Stop;
    }
}

class Plasmatrooper_Wallsit : RIFLEMAN_WALLSIT {
    override void PostBeginPlay() {
        Super.PostBeginPlay();
        SpriteToUse = "PTSI";
        spawnOneArmLeft();
        DeathSprite = "DeathPlasmaTrooperWallSitHeadless";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states {
        Precache:
            PTSI A 0;
            Stop;
    }
}

class Enforcer_wallsit : RIFLEMAN_WALLSIT {
    override void PostBeginPlay() {
        Super.PostBeginPlay();
        SpriteToUse = "EFSI";
        bBuddha = true;
    }
    states {
        Precache:
            EFSI A 0;
            Stop;
    }    
}

class DeathEngineerWallSitHeadless : DeathAlienWallSitHeadless {
    override void PostBeginPlay() {
        Super.PostBeginPlay();
        SpriteToUse = "ENSI";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            ENSI A 0;
            Stop;
    }
}

class DeathPlasmaTrooperWallSitHeadless : DeathAlienWallSitHeadless {
    override void PostBeginPlay() {
        Super.PostBeginPlay();
        SpriteToUse = "PTSI";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states {
        Precache:
            PTSI A 0;
            Stop;
    }
}

class DeathAlienRegular1 : DeathceptionMaster {
    default {
        health 30;
        height 45;
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states {
        Precache:
            RFD1 A 0;
            Stop;
        startdying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0;
            
            TNT1 A 0 A_NoBlocking;
            RFD1 ABCDEFGHIJK 4;
            TNT1 A 0 {
                //bBUDDHA = true;
                A_SetSize(-1, 10);
            }
            TNT1 A 0 BodyImpact();
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            RFD1 L -1;
        Death:
            TNT1 A 0 A_SpawnItemEx("DeathAlienRegular1Killed");
            stop;
    }
}

class DeathAlien_LegSweep : DeathceptionMaster {
    
    override void PostBeginPlay() {
        super.postbeginPlay();
        spriteToUse = "RFD4";
    }

    override void BeginPlay() {
        super.BeginPlay();
        if(censoredMode) {
            A_SpawnItemEx("DeathAlien_SpinDrop");
            destroy();
        }
    }

    default {
        health 7000;
        height 15;
    }
    states {
        Precache:
            END4 A 0;
            RFD4 A 0;
            Stop;
        startdying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                SpawnOneArm();
                spawnOneLeg();
                playDeathSound();
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 A 0 A_RECOIL(6);
            TNT1 A 0 A_NoBlocking;
            TNT1 ABCDEF 3;
            TNT1 A 0 BodyImpact();
            TNT1 GHIJ 3;
            TNT1 K -1;
    }
}

class DeathPlasmaTrooperWallBang : DeathAlien_LegSweep {
    override void PostBeginPlay() {
        super.postbeginPlay();
        spriteToUse = "PTD4";
    }

    default
    {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }

    states
    {
        precache:
            PTD4 ABC 1;
            stop;
    }
}

class DeathEngineerWallBang : DeathAlien_LegSweep {
    override void PostBeginPlay() {
        super.postbeginPlay();
        spriteToUse = "END4";
    }
    states {
        Precache:
            END4 A 0;
            RFD4 A 0;
            Stop;
        startdying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                playDeathSound();
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 A 0 A_RECOIL(6);
            TNT1 A 0 A_NoBlocking;
            TNT1 ABCDEF 3;
            TNT1 A 0 BodyImpact();
            TNT1 GHIJ 3;
            TNT1 K -1;
    }
}

class DeathAlien11 : DeathceptionMaster {
    
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RF01";
    }
    default {
        health 700;
        height 15;
        gravity 0.8;
    }
    states {
        Precache:
            EN01 A 0;
            RF01 A 0;
            Stop;
        startdying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                playDeathSound();
                A_PlaySound("gore/headshot", 2, 0.8);
                Sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 A 0 {
                A_CHANGEVELOCITY(-5,0,7, CVF_RELATIVE);
                if(bloodQuality >= 3)
                {
                   spawnMeatChunksSmall();
                }
                spawnBothArms();
                SpawnOneLegMirrored();
            }
            TNT1 A 0 A_RECOIL(6);
            TNT1 A 0 A_NoBlocking; 
            TNT1 ABCDEF 3;
            TNT1 A 0 BodyImpact();
            TNT1 GHIJ 3;
            TNT1 K -1;
    }
}

class DeathEngineerOverkill : DeathceptionMaster {
    default {
        height 55;
        mass 1000;
        painchance 255;
        Health 55;
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENO1";
    }   
    states {
        Precache:
            ENO1 A 0;
            Stop;
        startdying:
            ENO1 A 0;
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                Sprite = GetSpriteIndex(spriteToUse);
            }   
        Pain:
            TNT1 ABDEFG 4;
            TNT1 HI 4; 
            TNT1 A 0 {
                A_SETSIZE(-1, 15);
                noLongerShootable();
            }
            TNT1 A 0 BodyImpact();
            TNT1 JK 4;
            TNT1 L -1;
            STOP;
        Death:
            TNT1 A 0 A_SPAWNITEMEX("DeathEngineerOverkill2");
            stop;
    }
}

class DeathEngineerOverkill2 : DeathEngineerOverkill {
    default {
        painchance 255;
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENO2";
    }   
    states {
        Precache:
            ENO2 A 0;
            Stop;
        startdying:
            ENO1 A 0;
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                if(level.Maptime > 90)
                {
                    A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
                }
                spawnOneArmLeft();
                Sprite = GetSpriteIndex(spriteToUse);
            }
        Pain:   
            TNT1 BDEFG 4;
            TNT1 HI 4; 
            TNT1 A 0 {
                A_SETSIZE(-1, 15);
                noLongerShootable();
            }
            TNT1 A 0 BodyImpact();
            TNT1 JKL 4;
            TNT1 M -1;
            STOP;
        Death:
            TNT1 A 0 A_SPAWNITEMEX("DeathEngineerOverkill3");
            stop;
    }
}

class DeathEngineerOverkill3 : DeathEngineerOverkill {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENO3";
    }   

    default
    {
        painchance 0;
    }

    states {
        Precache:
            ENO3 A 0;
            Stop;
        startdying:
            ENO3 A 0;
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                if(level.Maptime > 90)
                {
                    A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
                }
                spawnOneArmRight();
                Sprite = GetSpriteIndex(spriteToUse);
            } 
            TNT1 A 0 {
                bxflip = true;
            }
            TNT1 ABCDEFG 4;
            TNT1 HIK 4; 
            TNT1 A 0 {
                A_SETSIZE(-1, 15);
                noLongerShootable();
            }
            TNT1 A 0 BodyImpact();
            TNT1 LMNOP 4;
            TNT1 Q -1;
            stop;
         Death:
            TNT1 A 0 A_SPAWNITEMEX("DeathEngineerOverkill4");
            stop;
    }
}
class DeathEngineerOverkill4 : DeathEngineerOverkill {
    default {
        health 900;
        +NOPAIN;
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENO4";
    }   
    states {
        Precache:
            ENO4 A 0;
            Stop;
        startdying:
            ENO4 A 0;
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                spawnHead();
                if(level.Maptime > 90)
                {
                    A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
                }
                Sprite = GetSpriteIndex(spriteToUse);
                bxflip = random(0,1);
            }
            TNT1 AAAAAAAAAAAAA 0 A_SpawnProjectile ("AlienBrainPiece", height, 0, random (0, 360), 2, random (-140,-160));
            TNT1 A 0 A_SpawnProjectile ("XDeath1Alien", 32, 0, random (0, 360), 2, random (-10, -160));
            TNT1 AAAAAAAAAAAAAAA 0 A_SpawnDefinedParticle("PurpleSplatterEffectDefinition", random(-10, 10), random(-8,8),frandom(height-10,height), random(-3,3), random(-3,3),random(1,6));
            TNT1 A 0 {
                for(int x=0;x<bloodQualitySetting;x++) {
                    for(int x=0;x<=3;x++) {
                        A_SpawnDefinedParticle("PurpleBloodMissileDefinition", frandom(-4, 4), frandom(-4, 4),frandom(height,height-10), frandom(-4, 4), frandom(-4, 4), frandom(3, 10), random(0,360));
                    }
                }
            }
            TNT1 A 0 {
                A_SpawnProjectile("xdeath1Alien", 40, 0, random (0, 360), 2, random (-10, -160));
            }
            TNT1 ABCDEFG 2;
            TNT1 H 4;
            TNT1 A 0 A_SETSIZE(-1, 15);
            TNT1 A 0 BodyImpact();
            TNT1 IJK 4;     
            TNT1 L -1;
            STOP;
        Death:
           TNT1 A 0 ALotOfGibs();
           stop;
    }
}

class DeathRiflemanOverkill4 : DeathEngineerOverkill {
    default {
        health 900;
        +NOPAIN;
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RF04";
    }   
    states {
        Precache:
            RF04 A 0;
            Stop;
        startdying:
            RF04 A 0;
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                A_ChangeVelocity(-9,0,0,CVF_RELATIVE);
                spawnHead();
                SpawnBothArms();
                spawnOneLeg();
                if(level.Maptime > 90)
                {
                    A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
                }
                Sprite = GetSpriteIndex(spriteToUse);
                bxflip = random(0,1);
            }
            TNT1 ABCDEFG 2;
            TNT1 H 4;
            TNT1 A 0 A_SETSIZE(-1, 15);
            TNT1 A 0 BodyImpact();
            TNT1 IJK 4;     
            TNT1 L -1;
            STOP;
        Death:
           TNT1 A 0 ALotOfGibs();
           stop;
    }
}

class DeathEngineerOverkill4Shotgun : DeathEngineerOverkill {
    default {
        health 900;
        +NOPAIN;
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENO4";
    }   
    states {
        Precache:
            ENO4 A 0;
            Stop;
        startdying:
            TNT1 A 0;
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                A_ChangeVelocity(-8,0,0,CVF_RELATIVE);
                spawnHead();
                SpawnBothArms();
                if(level.Maptime > 90)
                {
                    A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
                }
                Sprite = GetSpriteIndex(spriteToUse);
                bxflip = random(0,1);
            }
            TNT1 ABCDEFG 2;
            TNT1 H 4;
            TNT1 A 0 A_SETSIZE(-1, 15);
            TNT1 A 0 BodyImpact();
            TNT1 IJK 4;     
            TNT1 L -1;
            STOP;
        Death:
           TNT1 A 0 ALotOfGibs();
           stop;
    }
}

class DeathPlasmaTrooperOverkill4Shotgun : DeathEngineerOverkill4Shotgun
{
    default
    {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTO4";
        spawnOneLeg();
    }   

    states
    {
        precache:
            PTO4 A 0;
            stop;
    }
}

class DeathEngineer11 : DeathAlien11 {
      override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "EN01";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }

    states {
        Precache:
            EN01 A 0;
            Stop;
    }
}

class DeathAlienRegular1Killed : DeathceptionMaster {
    default {
        health 20000;
    }
    states {
        startdying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                if(bloodQuality == 4)
                {
                   spawnMeatChunks(); 
                }
                spawnOneArm();
            }
            TNT1 A 0 A_NoBlocking;
            RFDI ABCDE 4;
            TNT1 A 0 BodyImpact();
            RFDI F 4;
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 A 0 {
                NoLongerShootable();
            }
            RFDI G -1;
    }
}

class DeathAlienRegular2 : DeathceptionMaster {
    Default {
        health 70;
    }
    states {
        Precache:
            DTHA A 0;
            Stop;
        startdying:
		    TNT1 A 0 A_NoBlocking;
            DTHA ABC 4;
            TNT1 A 0 {
                NoLongerShootable();
            }
            DTHA DE 4;
            TNT1 A 0 BodyImpact();
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 A 0 {
                NoLongerShootable();
            }
            DTHA F -1;
            stop;
        death:
            TNT1 A 0 A_SpawnItemEx("DeathAlienRegular2_Alienated");
            stop;
    }
}

class DeathAlienShotgunBackflip : DeathceptionMaster {
    
    string DeathSprite;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFD3";
    }
    default {
        damageType "MeleeImpactSplash";
        height 10;
    }
    states {
        Precache:
            END3 A 0;
            RFD3 A 0;
            Stop;
    	StartDying:
                TNT1 A 0 {
                    Sprite = GetSpriteIndex(spriteToUse);
                    A_SpawnProjectile ("PurpleBloodHitGravity", 32, 0, random (170, 190), 2, random (0, 40));
                    SpawnBothArms();
                    SpawnOneLegMirrored();
                }
                TNT1 A 0 playDeathSound();
                TNT1 A 0 A_PlaySound("gore/headshot", 2, 0.8);
                TNT1 A 0 ThrustThingZ(0,35,0,1);
                TNT1 A 0 A_Recoil(8);
                TNT1 ABCDE 3 {
                    A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", FRANDOM(0,48), FRANDOM(-22,22), random (170, 190), 2, random (0, 40));
                }
        backflipLooper:
            TNT1 F 3 {
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", FRANDOM(0,48), FRANDOM(-22,22), random (170, 190), 2, random (0, 40));
		        A_SpawnItemEx("SmokeTrailPieceArmorPurpleSlow", random(-4, 4), random(-4, 4), random(6, 12),  frandom(-1, 1), frandom(-1, 1), frandom(-1, 1));
                if (vel.z == 0 || CharacterIsNearWall()) {
                    SpawnSmashParticles();
                    if(bloodQuality == 4)
                    {
                        spawnMeatChunks(); 
                    }
                    S_EXPLODE(50, 30);
                    SetStateLabel("backflipNowDeath");
                }
            }
            loop;
        backflipNowDeath:
                TNT1 A 0 {
                    A_SpawnItemEx("MeleeImpactSplash");
                }
                TNT1 A 0 BodyImpact();
                TNT1 HIJK 3;
                TNT1 A 0 BodyImpact();
                TNT1 A 0 {
                    bSolid = false;
                    bGhost = true;
                }
                TNT1 LM 4;	
                TNT1 O -1;
                stop;
    }
}

class DeathEngineerShotgunBackflip : DeathAlienShotgunBackflip {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "END3";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            END3 A 0;
            stop;
    }
}

class DeathPlasmaTrooperShotgunBackflip : DeathAlienShotgunBackflip {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTD3";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            PTD3 A 0;
            stop;
    }
}
class DeathAlienRegular2_Alienated : DeathceptionMaster  {
    default {
       Health 1500;
    }
    states {
        startdying:
            TNT1 A 0;
            TNT1 A 0 {
                A_RECOIL(2);
                SpawnBothArms ();
                if(bloodQuality == 4)
                {
                   spawnMeatChunks(); 
                }
            }
            DTHA GHIJ 4;
            TNT1 A 0 BodyImpact();
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 A 0 {
                NoLongerShootable();
            }
            DTHA K -1;
            stop;
    }
}

class DeathAlienRegular3 : DeathceptionMaster {
    
    string DeathSprite;
    override void PostBeginPlay() {
        super.postbeginPlay();
        SpriteToUse = "RFD5";
        SpawnOneArm();
        DeathSprite = "DeathAlienRegular3Killed";
    }
    default {
        DeathceptionMaster.soldierSkeleton "Rifleman";
        health 30;
        height 35;
        radius 20;
    }
    states {
        Precache:
            END5 A 0;
            RFD5 A 0;
            Stop;
        StartDying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                sprite = GetSpriteIndex(SpriteToUse);
            }
            TNT1 A 0 A_NoBlocking;
            TNT1 ABCDEF 5;
            TNT1 A 0 {
                NoLongerShootable();
            }
            TNT1 GHIJ 5;
            TNT1 A 0 BodyImpact();
            TNT1 K 4;
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 L -1;
            Stop;
        Death:
            TNT1 A 0 A_SpawnItemEx(DeathSprite);
            TNT1 A 0 {
                spawnHead();
            }
            stop;
    }
}

class DeathAlienRegular3Killed : DeathceptionMaster {
    
    override void PostBeginPlay() {
        super.postbeginPlay();
        SpriteToUse = "RFD5";
    }
    default {
        health 800;
        height 3;
    }
    states {
        Precache:
            END5 A 0;
            RFD5 A 0;
            Stop;
        Death:
        StartDying:
            TNT1 A 0 {
                sprite = GetSpriteIndex(SpriteToUse);
            }
            TNT1 NOPQRSTU 5;
            TNT1 A 0 BodyImpact();
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, 5);
            TNT1 V -1;
            Stop;
    }
}

class DeathEngineerRegular3 : DeathAlienRegular3 {
    override void PostBeginPlay() {
        super.postbeginPlay();
        SpriteToUse = "END5";
        DeathSprite = "DeathEngineerRegular3Killed";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            RFD5 A 0;
            END5 A 0;
            Stop;
    }
}

class DeathEngineerRegular3Killed : DeathAlienRegular3Killed {
    override void PostBeginPlay() {
        super.postbeginPlay();
        SpriteToUse = "END5";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            END5 A 0;
            Stop;
    }
}

class DeathPlasmaTrooperRegular3 : DeathAlienRegular3 {
    override void PostBeginPlay() {
        super.postbeginPlay();
        SpriteToUse = "PTD5";
        DeathSprite = "DeathPlasmaTrooperRegular3Killed";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states {
        Precache:
            RFD5 A 0;
            PTD5 A 0;
            Stop;
    }
}

class DeathPlasmaTrooperRegular3Killed : DeathAlienRegular3Killed {
    override void PostBeginPlay() {
        super.postbeginPlay();
        SpriteToUse = "PTD5";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            PTD5 A 0;
            Stop;
    }
}


class DeathAlien_SpinDrop : DeathceptionMaster {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFD6";
    }

    default {
        health 190;
        scale 0.33;
        yscale 0.20;
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states {
        Precache:
            RFD6 ABCDEF 0;
            stop;
        StartDying:
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 A_NoBlocking;
            TNT1 A 0 {
                SpawnBothArms();
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 A 0 A_Recoil(2);
            TNT1 ABCDEFG 3;
            TNT1 A 0 {
                NoLongerShootable();
            }
            TNT1 A 0 BodyImpact();
            TNT1 HIJ 3;
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 K -1;
            Stop;
    }
}

class PlasmaTrooper_SpinDrop : DeathAlien_SpinDrop {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTD6";
    }

    states {
        Precache:
            PTD6 B 0;
            stop;
    }
}

class DeadAlienHeadshot2  : DeathceptionMaster {
    
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFD2";
    }
    default {
        health 650;
    }
    states {
        Precache:
            END2 A 0;
            RFD2 A 0;
            Stop;
        StartDying:
            TNT1 A 0 A_RECOIL(2);
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteToUse);
            }
		    TNT1 C 0 A_NoBlocking;
		    TNT1 A 0 spawnHead();
		    TNT1 AAAABBBBCCCC 1 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 30, 0, random (0, 360), 2, random (60, 120));
		    TNT1 A 0 BodyImpact();
		    TNT1 DDDDEEEEFFFFGGGG 1 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 A 0 {
                NoLongerShootable();
            }
            TNT1 H -1;
    }
}

class DeadEngineerHeadshot2  : DeadAlienHeadshot2 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "END2";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
        health 1000;
    }
    states {
        Precache:
            END2 A 0;
            Stop;
    }
}
class DeadPlasmaTrooperHeadshot2  : DeadAlienHeadshot2 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTD2";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
        health 1000;
    }
    states {
        Precache:
            PTD2 A 0;
            Stop;
    }
}

class DeadAlienHeadshot3  : DeathceptionMaster {
    
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFD8";
    }
    default {
        health 90;
        height 52;
    }
    states {
        Precache:
            RFD8 A 0;
            Stop;
        StartDying:
            TNT1 A 0 A_RECOIL(2);
		    TNT1 A 0 A_NoBlocking;
	    	TNT1 A 0 {
                sprite = GetSpriteIndex(spriteToUse);
            }
		    TNT1 A 0 spawnHead();
		    TNT1 BBBBBCCCCCDDDDDEEEEFFFFGGGGHHHH 1 {
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 30, 0, random (0, 360), 2, random (60, 120));
            }
		
		    TNT1 A 0 BodyImpact();
		    TNT1 IIIIJJJJKKKKLLLLMMMM 1 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 A 0 {
                a_setsize(-1, 10);
                NoLongerShootable();
            }
            TNT1 N -1;
        Death.shotgun:
        Death:
            TNT1 A 0 {
                if(bloodQuality == 4)
                {
                   spawnMeatChunks(); 
                }
                A_SpawnProjectile ("CutoffLegMirror", 5, 0, random (0, 360), 2, random (0, 90));
            }
		    TNT1 AAAAAAAAAAAAAAA 0 A_SpawnDefinedParticle("PurpleSplatterEffectDefinition", random(-5, 5), random(-3,3),random(7,13), random(-3,3), random(-3,3),random(1,3));
		   	TNT1 AAAA 0 A_SpawnDefinedParticle("PurpleBloodMissileDefinition", frandom(-4, 4), frandom(-4, 4),frandom(0, 2), frandom(-4, 4), frandom(-4, 4), frandom(0, 5), random(0,360));
            TNT1 OOOOPPPP 1  A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            TNT1 Q 1 {
                BodyImpact();
            }
            TNT1 QQQRRRRSSSSTTTT 1  A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            TNT1 U -1;
            stop;
    }
}

class DeadEngineerHeadshot3 : DeadAlienHeadshot3 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "END8";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    // Indexing to prevent crashy crashy
    states {
        Precache:
            END8 A 0;
            Stop;
    }
}

class DeadPlasmaTrooperHeadshot3 : DeadAlienHeadshot3 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTD8";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    // Indexing to prevent crashy crashy
    states {
        Precache:
            PTD8 A 0;
            Stop;
    }
}

class DeadAlienHeadshot4  : DeathceptionMaster {
    string spriteToUse1;
    string spriteToUse2;
    string DeathSprite;
    bool fallingOver;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse1 = "RFH1";
        spriteToUse2 = "RFH2";
        DeathSprite = "DeadAlienHeadshot4Killed";
    }

    override void tick()
    {
        super.tick();
        if(!fallingOver && level.time % random(5,25) == 0)
        {
            A_SpawnProjectile ("AlienIntestineSmall", 35, random(-10,10), random (0, 360), 2, random (-40, -80));
        }
    }

    default {
        health 30;
    }
    states {
        Precache:
            RFH1 A 0;
            RFH2 A 0;
            RFH3 A 0;
            Stop;
        StartDying:
            TNT1 A 0 A_RECOIL(2);
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteToUse1);
            }
		    TNT1 A 0 A_NoBlocking;
		    TNT1 A 0 spawnHead();
		    TNT1 ABCDEFGHIJKLM 4 A_SpawnProjectile("PurpleBloodMissileFast", 40, frandom(-5,5), random (0, 360), 2, pitch:frandom(-60,-80));
            TNT1 A 0 {
                fallingOver = true;
                sprite = GetSpriteIndex(spriteToUse2);
            }
            TNT1 AABBCC 2 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 30, 0, random (0, 360), 2, random (60, 120));
		    TNT1 A 0 {
                BodyImpact();
                NoLongerShootable();
            }
		    TNT1 DDEEFFG 2 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            TNT1 A 0 A_SETSIZE(-1, 10);
            TNT1 G -1;
        Death:
            TNT1 A 0 A_SpawnItemEx(DeathSprite);
            stop;
    }
}

class DeadEngineerHeadshot4 : DeadAlienHeadshot4 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse1 = "ENH1";
        spriteToUse2 = "ENH2";
        DeathSprite = "DeadEngineerHeadshot4Killed";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            ENH1 A 0;
            ENH2 A 0;
            Stop;
    }
}

class DeadPlasmaTrooperHeadshot4 : DeadAlienHeadshot4 {
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse1 = "PTH1";
        spriteToUse2 = "PTH2";
        DeathSprite = "DeadPlasmaTrooperHeadshot4Killed";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states {
        Precache:
            PTH1 A 0;
            PTH2 A 0;
            Stop;
    }
}

class DeadPlasmaTrooperHeadshot4Killed : DeadAlienHeadshot4Killed {
        override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "PTH3";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    states {
        Precache:
            PTH3 A 0;
            Stop;
    }
}

class DeadAlienHeadshot4Killed : DeadAlienHeadshot4 {
    
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RFH3";
    }
    default{
        health 1200;
        height 10;
    }
    states {
        Precache:
            ENH3 A 0;
            RFH3 A 0;
            Stop;
        spawn:
             TNT1 A 0;
             TNT1 A 0 
             {
                fallingOver = true;
                if(bloodQuality >= 3)
                {
                    spawnMeatChunksSmall();
                }
                sprite = GetSpriteindex(spriteToUse);
            }
            TNT1 AAABBBCCCDDDEEEFF 1  A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            TNT1 F 2 {
                BodyImpact();
            }
            TNT1 GGGHHHII 1 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            TNT1 I -1;
            stop;
        Death:
            TNT1 A 0 ALotOfGibs();
            stop;
    }
}

class DeadEngineerHeadshot4Killed : DeadAlienHeadshot4Killed {
        override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "ENH3";
    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
    states {
        Precache:
            ENH3 A 0;
            Stop;
    }
}

class DeadSiegerHeadshot4 : DeadAlienHeadshot4 {
    
    mixin DangerIndicatorHandler;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        //spriteToUse = "RFH3";
        alarmPitch = 1.0;
        timer = 10;
    }

    override void tick()
    {
        super.tick();
        A_SPAWNITEMEX("BodyImpactSmokeSmall", -5, 0, 0, 0 ,0, frandom(0.5,0.9));
        if(isOnFloor && level.Maptime % 10 == 0)
        {
            blinkDangerIndicator(250);
            timer--;
            alarmPitch+=0.01;
            spawnLight(rColor:192, gColor:15, bColor:15, 140, 0, shadowRequirement:-1, overbright: 0, divisionSpeed:1.2, alwaysShow:0);
            if(timer == 0)
            {
                S_EXPLODE(245,250, XF_HURTSOURCE);
                A_SPawnItemEx("ExplosionWithLotsOfSparks");
                A_SPAWNITEMEX("SiegerExplosion");
                A_StopSound(CHAN_6);
                destroy();
            } 
            else 
            {
                A_playsound("sieger/jetpackmalfunction/beep", CHAN_AUTO, 0.5, 0, 0.7, pitch:alarmPitch);
            }
        }
    }

    bool isOnFloor;
    float alarmPitch;
    int timer;
    default{
        +SelacoActor.PreventSleep;
        damageType "ExplosiveImpact";
        health 1200;
        height 10;
        gravity 0.6;
    }
    states {
        Precache:
            Stop;
        spawn:
             TNT1 A 0;
             TNT1 A 0 {
                if(bloodQuality >= 3)
                {
                   spawnMeatChunksSmall();
                }
                sprite = GetSpriteindex(spriteToUse);
            }
            SIHD AAABBBCCCDDDEEEFF 1  A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            TNT1 A 0;
        WaitForLanding:
            SIHD F 2 {
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
                if(vel.z == 0)
                {
                    isOnFloor = true;
                    BodyImpact();
                    setStateLabel("HitFloor");
                }
            }
            loop;
        HitFloor:
            TNT1 A 0 
            {
                A_PLAYSOUND("sieger/jetpackmalfunction/overheat", CHAN_6, 1.0, 0, 0.8);
            }
            SIHD GGGHHHII 1 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            SIHD I 35;
            SIHD JJJKKKLLLMMMNNNOOOPPPQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ 1
            {
                bNoGravity = true;
                setOrigin((pos.x, pos.y,pos.z+0.5), true);
            }
            stop;
        Death:
            TNT1 A 0 ALotOfGibs();
            stop;
    }
}

class DeathAlienRegular4 : DeathceptionMaster {
    default {
        health 30;
    }
    states {
        Precache:  
            ALAN A 0;
            stop;
        startdying:
		    TNT1 A 0 A_NoBlocking;
            TNT1 A 0 A_Recoil(2);
            ALAN ABCDEFG 3;
            TNT1 A 0 {
                NoLongerShootable();
            }
            ALAN HI 3;
            TNT1 A 0 BodyImpact();
            ALAN J -1;

        death:
            TNT1 A 0 {
                SpawnOneArm ();
                spawnMeatChunks();
            }
            TNT1 A 0 A_SpawnItemEx("DeathAlienRegular4Killed");
            stop;
    }
}

class DeathAlienHead2 : DeathceptionMaster {
    default {
        height 42;
    }
    states {
        StartDying:
            TNT1 AA 0 
            {
                if(level.Maptime > 90)
				{
                    A_playsound("GORECHUNK");
                }
            }
            TNT1 A 0 A_FACETARGET;
            //TNT1 A 0 A_Recoil(10);
            //TNT1 A 0 ThrustThingZ(0,35,0,1);
            DTHD A 0 A_XScream;
            
            DTHD A 0 A_NoBlocking;
            TNT1 A 0 spawnHead();
            DTHD BCDEF 5 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 40), 2, random (10, 40));
            TNT1 A 0 BodyImpact();
            DTHD FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 2 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 10, 0, random (0, 360), 2, random (10, 40));
            DTHD F -1;
            Stop;
    }
}

class DeathAlienRegular4Killed : DeathceptionMaster {
    states {
        StartDying:
            ALAN KLM 4;
            TNT1 A 0 {
                NoLongerShootable();
            }
            TNT1 A 0 BodyImpact();
            ALAN NO 3;
            TNT1 A 0 A_SpawnItemEx("FliesSpawner", 1, 1, -50);
            ALAN P -1;
    }
}

// Not really an animation. This just gibs the poor person completely. This is really fucking sad and I hope this gibbing violence from Dawn will stop!
class Gibbed : DeathceptionMaster {
    states {
/*         Spawn:
            TNT1 A 0;
            TNT1 A 0{
                A_PRINTBOLD("RAN.");
                Stats.AddStat(STAT_GIBBED, 1, 0);
            }
            TNT1 A 0 addCornerSlime(4);
            TNT1 A 0 A_SpawnProjectile ("CutoffLeg", frandom(5, 10), 0, random (0, 360), 2, random (0, 90));
            TNT1 A 0 A_SpawnProjectile ("CutoffLegMirror", frandom(5, 10), 0, random (0, 360), 2, random (0, 90));
            TNT1 A 0 A_SpawnProjectile ("CutoffArmRight", frandom(20,38), 0, random (0, 360), 2, 0);
            TNT1 A 0 A_SpawnProjectile ("CutoffArmLeft", random(20,38), 0, random (0, 360), 2, 0);
            TNT1 A 0 A_SpawnProjectile ("CutoffChest", 38, 0, random (0, 360), 2, random (0, 90));
            TNT1 A 0 playDeathSound();
            TNT1 A 0 A_PlaySound("dest/headblow", CHAN_AUTO, 1.0, 0,7, 0, frandom(0.8,1.1));
            TNT1 AA 0 A_SpawnItem("SuperGorePurpleMist", 0,0,frandom(16,45));P
            TNT1 A 0 A_SpawnItem("MeatDeathSmallPurple");
            TNT1 AAAAA 0 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", random(20,70), random(-30,30), random (-120, -240), 2, random (30, 60));
            TNT1 AAAAAAAAAAAAAAAAAA 0 A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", random(-10, 10), random(-10,10),random(10,40), random(-3, -6), random(-6,6),random(2,4));
            TNT1 AAAAAAAAAAAA 0 bright A_SpawnProjectile ("XDeath1Alien", 5, frandom(-10, 10), frandom(-120, -240), 2, random (170, 190));
            TNT1 A 0 spawnHead();
            TNT1 AAAAA 0 A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", random(20,70), random(-30,30), frandom(-120, -240), 2, random (30, 60));
            TNT1 AAAAAAAAAAAAAA 0  A_SpawnDefinedParticleProjectile("BonePartDefinition", random(20,60), frandom(-10,10), random(0,360), 2, frandom(-10,-160));
            TNT1 AAAAAAAA 0 A_SpawnProjectile ("XDeath1Alien", random(0,32), frandom(-15, 15), random (-150, -210), 2, random(-120, -240));
            TNT1 AAAAAA 0 A_SpawnProjectile ("XDeath3Alien", random(15,48), frandom(-35, 35), random (-150, -210), 2, random (170, 190));
            TNT1 AAAAAAAA 0 A_SpawnProjectile ("XDeath2Alien", random(0,32), frandom(-35, 35), random (-150, -210), 2,random (170, 190));
            TNT1 AAA 0 A_SpawnProjectile ("XDeath2Alien", random(30, 55), frandom(-15, 15), random(-150, -210), 2, random (170, 190));
            TNT1 AA 0 A_SpawnProjectile ("XDeath3Alien", random(30, 55), frandom(-15, 15), random(-150, -210), 2, random (170, 190));
            //TNT1 A 0 A_SpawnItem ("CrushedRemainsPurple");
            TNT1 A 0;
            //TNT1 A 1 A_NoBlocking;
            Stop; */
    }
}

class RIFLEMAN_GIBBED : DeathceptionMaster {
    override void BeginPlay() {
        super.BeginPlay();
        sprayWallDecals();
        headsprite = "XDeathAlienHead";
    }
    default
    {
        damageFactor "ExplosiveImpact", 0;
    }
    states {
        Spawn:  
            TNT1 A 0;
            TNT1 A 0;
            TNT1 A 0 {
                projectileSpeedMulti = 1.25;
                Stats.AddStat(STAT_GIBBED, 1, 0);
            }
            TNT1 A 0 addCornerSlime(4);
            TNT1 AAAAA 0 A_SPAWNITEMEX("PurpleGoreChunk", frandom(-10,10), frandom(-10,10), frandom(10,30), frandom(3,5), 0, frandom(2,5), angle:frandom(0,360));
            TNT1 A 0 S_SpawnProjectile ("CutoffLeg", projectileSpeedMulti, frandom(5, 10), 0, random (0, 360), 2, random (0, 90));
            TNT1 A 0 S_SpawnProjectile ("CutoffLegMirror", projectileSpeedMulti, frandom(5, 10), 0, random (0, 360), 2, random (0, 90));
            TNT1 A 0 S_SpawnProjectile ("CutoffArmRight", projectileSpeedMulti, frandom(20,38), 0, random (0, 360), 2, 0);
            TNT1 A 0 S_SpawnProjectile ("CutoffArmLeft", projectileSpeedMulti, random(20,38), 0, random (0, 360), 2, 0);
            TNT1 A 0 S_SpawnProjectile ("CutoffChest", projectileSpeedMulti, 38, 0, random (0, 360), 2, random (0, 90));
            TNT1 A 0 A_SCREAM;
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 S_SpawnProjectile ("AlienIntestine", projectileSpeedMulti, frandom(2,42), random(-30,30), random (0, 360), 2, random (-30, -180));
            TNT1 A 0 
            {
                if(level.Maptime > 90)
				{
                    A_PlaySound("dest/headblow", CHAN_AUTO, 0.9, 0,7, 0, frandom(0.8,1.1));
                }
            }
            TNT1 AAAAAAAAAA 0 A_SpawnDefinedParticle("SuperGorePurpleMistLongDefinition", frandom(-60,60), frandom(-80,80), frandom(-10, 50));
            TNT1 AAAA 0 A_SpawnItem("MeatDeathSmallPurple");
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAA 0 S_SpawnProjectile ("AlienBrainPiece", projectileSpeedMulti, frandom(height-20,height), frandom(-10,10), random (0, 360), 2, random (-10,-160));
            TNT1 AAAAAAAA 0 S_SpawnDefinedProjectile("PurpleBloodMissileDefinition", projectileSpeedMulti, random(20,70), random(-30,30), random (-120, -240), 2, random (30, 60));
            TNT1 AAAAAAAAAAAAAA 0 A_SpawnDefinedParticle("PurpleSplatterEffectGiganticDefinition", random(-10, 10), random(-10,10),random(10,40), random(-6, -6), random(-6,6),random(2,4));
            TNT1 AAAAAAAAAAAAAA 0 bright S_SpawnProjectile ("XDeath1Alien", 5, projectileSpeedMulti, frandom(-10, 10), frandom(-120, -240), 2, random (170, 190));
            TNT1 AAAAA 0 S_SpawnDefinedProjectile("PurpleBloodMissileDefinition", projectileSpeedMulti, random(20,70), random(-30,30), frandom(-120, -240), 2, random (30, 60));
            TNT1 AAA 0  S_SpawnDefinedProjectile("BonePartDefinition", projectileSpeedMulti, random(20,60), random(-40,40), random(0, 360), 2, frandom(-10,-160));
            TNT1 AAAAAA 0 S_SpawnProjectile ("XDeath1Alien", projectileSpeedMulti, frandom(0,32), frandom(-15, 15), random (0, 360), 2, random(-120, -240));
            TNT1 AAAAAAA 0 S_SpawnProjectile ("XDeath3Alien", projectileSpeedMulti, frandom(0,32), frandom(-35, 35), random (0, 360), 2, random (170, 190));
            TNT1 AAAAA 0 S_SpawnProjectile ("XDeath2Alien", 16, projectileSpeedMulti, frandom(-35, 35), random (-150, -210), 2,random (170, 190));
            TNT1 AAA 0  S_SpawnProjectile ("XDeath2Alien", 55, projectileSpeedMulti, frandom(-15, 15), random(-150, -210), 2, random (-170, -190));
            TNT1 AA 0  S_SpawnProjectile ("XDeath3Alien", 55, projectileSpeedMulti, frandom(-15, 15), random(-150, -210), 2, random (-170, -190));
            TNT1 A 0 A_SpawnItemEx(headSprite, 0, 0, 32, random(1,3), random(-3,3), random(9,15), 0);
            //TNT1 A 0 A_SpawnItem ("CrushedRemainsPurple");
            TNT1 A 0;
            //TNT1 A 1 A_NoBlocking;
            TNT1 A 5;
            Stop; 
        }
}


class SOLDIER_PLASMARIFLED : DeathEngineerOverkill {
    default {
        health 900;
        +NOPAIN;
        DeathceptionMaster.SoldierSkeleton "Rifleman";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        spriteToUse = "RF04";
    }   
    states {
        Precache:
            RF04 A 0;
            Stop;
        startdying:
            RF04 A 0;
            // Lots of gore
            TNT1 A 0;
            TNT1 A 0;
            TNT1 A 0 {
                projectileSpeedMulti = 1.25;
                Stats.AddStat(STAT_GIBBED, 1, 0);
            }
            TNT1 A 0 addCornerSlime(4);
            TNT1 A 0 A_SCREAM;
            TNT1 AAAA 0 S_SpawnProjectile ("AlienIntestineSmall", projectileSpeedMulti, frandom(2,42), random(-30,30), random (0, 360), 2, random (-30, -180));
            
            // Particles!
            TNT1 A 0
            {
                for(int x=0;x<25;x++)
                {
                    EmitDefinition('PlasmaMoltenSteelFastDefinition', chance: 0.75, numTries: 20, offset:(random(-25,25),random(-25,25),random(0,60)));
                }
            }
            TNT1 A 0 
            {
                if(level.Maptime > 90)
				{
                    A_PlaySound("dest/headblow", CHAN_AUTO, 0.9, 0,7, 0, frandom(0.8,1.1));
                }
            }
            TNT1 A 0 A_SpawnDefinedParticle("SuperGorePurpleMistDefinition", frandom(-20,20), frandom(-30,30), frandom(-10, 50));
            TNT1 AA 0 S_SpawnDefinedProjectile("PurpleBloodMissileDefinition", projectileSpeedMulti, random(20,70), random(-30,30), random (-120, -240), 2, random (30, 60));
            TNT1 AA 0 S_SpawnDefinedProjectile("PurpleBloodMissileDefinition", projectileSpeedMulti, random(20,70), random(-30,30), frandom(-120, -240), 2, random (30, 60));
            TNT1 AAAAAAAAAAAA 0  S_SpawnDefinedProjectile("BonePartDefinition", projectileSpeedMulti,  random(20,60), random(-40,40), random(0, 360), 2, frandom(-10,-160));
            //TNT1 A 0 A_SpawnItem ("CrushedRemainsPurple");
            TNT1 A 0;
            TNT1 A 0 A_StopSound(CHAN_7);
            TNT1 A 0 {
                A_ChangeVelocity(-2,0,1,CVF_RELATIVE);
                spawnHead();
                SpawnBothArms();
                spawnOneLeg();
                if(level.Maptime > 90)
                {
                    A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.8,1.1));
                }
                Sprite = GetSpriteIndex(spriteToUse);
                bxflip = random(0,1);
            }

            // Animation
            TNT1 ABCDEFG 2;
            TNT1 H 4;
            TNT1 A 0 A_SETSIZE(-1, 15);
            TNT1 A 0 BodyImpact();
            TNT1 IJK 4;     
            TNT1 L -1;
            STOP;
        Death:
           TNT1 A 0 ALotOfGibs();
           stop;
    }
}

class ENGINEER_GIBBED : RIFLEMAN_GIBBED {
    override void PostBeginPlay() {
        super.PostbeginPlay();
        headsprite = "XDeathEngineerHead";
        soldierSkeleton = "Engineer";

    }
    default {
        DeathceptionMaster.SoldierSkeleton "Engineer";
    }
}

class enforcerMaster : DeathceptionMaster {
    default {
        health 1500;
        BloodType "Selaco_Blood_HEAVYARMOR", "SparksPain", "SparksPain";
    }
}

class enforcerDeath5 : enforcerMaster
{
    states
    {
        startDying:
            EFD5 ABCDEFGHIJK 4;
            TNT1 A 0
            {
                BodyImpact();
                noLongerShootable();
            }
            EFD5 LM 4;
        Death:
            EFD5 N -1;
    }
}

class enforcerDeath6 : enforcerMaster
{
    states
    {
        startDying:
            EFD6 ABCDEFGHIJK 4;
        Death:
            EFD6 L -1
            {
                BodyImpact();
                noLongerShootable();
            }
    }
}

class enforcerDeath7 : enforcerMaster
{
    states
    {
        startDying:
            EFD7 ABCDEF 4;
            TNT1 A 0
            {
                BodyImpact();
                noLongerShootable();
            }
            EFD7 GH 4;
        Death:
            EFD7 I -1;
    }
}

// ENFORCERS are heavily armored and I fear that being able to deathception them makes them seem weak.
// Keeping this idea open for upgrades though! Maybe Armor Shredding weapons should allow for death ception?
class DeadEnforcer1 : enforcerMaster {
    states {
        Spawn:
        StartDying:
            EFD1 ABCDEF 4;
            TNT1 A 0 {
                BodyImpact();
            }
            EFD1 GH 4;
        Death:
            EFD1 I -1;
    }
}

// ENFORCER
class DeadEnforcer2 : enforcerMaster {
    states {
        Spawn:
        StartDying:
            EFD2 ABCDEF 5;
            TNT1 A 0 {
                BodyImpact();
            }
            EFD2 GHIJK 5;
            TNT1 A 0 {
                BodyImpact();
                noLongerShootable();
            }
            EFD2 L 5;
        Death:
            EFD2 M -1;
    }
}

class DeadEnforcer4 : enforcerMaster {
    states {
        Spawn:
        StartDying:
            ECD4 ABCDEFG 4;
            TNT1 A 0 {
                BodyImpact();
                noLongerShootable();
            }
            ECD4 HI 4;
        Death:
            ECD4 J -1;
    }
}


class ShotgunDeadEnforcer2 : enforcerMaster {
    default {
        damageType "MeleeImpactSplash";
        height 10;
    }
    states {
        Precache:
            END3 A 0;
            RFD3 A 0;
            Stop;
    	StartDying:
                TNT1 A 0 {
                    A_SpawnProjectile ("PurpleBloodHitGravity", 32, 0, random (170, 190), 2, random (0, 40));
                }
                TNT1 A 0 
                {
                   if(level.Maptime > 90)
				    {
                        playDeathSound();
                        A_PlaySound("gore/headshot", 2);
                    }
                }
                TNT1 A 0 ThrustThingZ(0,35,0,1);
                TNT1 A 0 A_Recoil(8);
                ECD3 ABCDE 3 {
                    A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", FRANDOM(0,48), FRANDOM(-22,22), random (170, 190), 2, random (0, 40));
                }
        backflipLooper:
            ECD3 F 3 {
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", FRANDOM(0,48), FRANDOM(-22,22), random (170, 190), 2, random (0, 40));
		        A_SpawnItemEx("SmokeTrailPieceArmorPurpleSlow", random(-4, 4), random(-4, 4), random(6, 12),  frandom(-1, 1), frandom(-1, 1), frandom(-1, 1));
                if (vel.z == 0 || CharacterIsNearWall()) {
                    SpawnSmashParticles();
                    SpawnMeatChunks();
                    S_EXPLODE(50, 30);
                    SetStateLabel("backflipNowDeath");
                }
            }
            loop;
        backflipNowDeath:
                TNT1 A 0 {
                    A_SpawnItemEx("MeleeImpactSplash");
                }
                TNT1 A 0 BodyImpact();
                ECD3 HIJK 3;
                TNT1 A 0 BodyImpact();
                TNT1 A 0 {
                    bSolid = false;
                    bGhost = true;
                }
                ECD3 LM 4;	
                ECD3 O -1;
                stop;
    }
}

class ShotgunDeadEnforcer1 : EnforcerMaster
{
    states 
    {
        startDying:
        Death:  
            TNT1 A 0;
            TNT1 A 0 A_CHANGEVELOCITY(-12, 0, 4, CVF_RELATIVE);
            EFS1 ABCDEF 3;
            TNT1 A 0 BodyImpact();
            TNT1 A 0 NoLongerShootable();
            EFS1 GHIJK 4;
            EFS1 L -1;
    }
}

class DeathceptionMasterZombie : DeathceptionMaster
{

    override void postbeginPlay()
    {
        super.postBeginPlay();
        for(int x=0;x<35;x++)
        {
           A_SPAWNITEMEX("BloodSplatterEffect", frandom(-5,5), frandom(-35,35), frandom(0,45), frandom(0.4,5), 0, frandom(-3,3), angle:random(0,360));
        }
    }

    void spawnZombieHead()
    {
        A_SpawnProjectile("ZombieHead", 32, angle:-frandom(-140,220), flags:2,pitch:frandom(-120,-160));
        A_PlaySound("dest/headblow", CHAN_AUTO, 0.7, 0, 0.9, 0, frandom(0.8,1.1));
    }

    void spawnZombieLeg () {
        A_SPawnItemEx("BloodChunks", 0, 0, 24, frandom(-6,6), frandom(-6,6), frandom(4,7));
        A_SPawnItemEx("BloodChunks", 0, 0, 24, frandom(-6,6), frandom(-6,6), frandom(4,7));
        A_PLAYSOUND("dismember/limb", CHAN_AUTO, 0.8, 0, 0.6, 0, frandom(0.8,1.1));
        A_SpawnProjectile ("ZombieLeg", 8, random(4, 7), frandom(-130,-240), 2, frandom(-60,-150));
    }

    void spawnZombieLegMirrored () {
        A_SPawnItemEx("BloodChunks", 0, 0, 24, frandom(-6,6), frandom(-6,6), frandom(4,7));
        A_SPawnItemEx("BloodChunks", 0, 0, 24, frandom(-6,6), frandom(-6,6), frandom(4,7));
        A_PLAYSOUND("dismember/limb", CHAN_AUTO, 0.6, 0, 0.6, 0, frandom(0.8,1.1));
        A_SpawnProjectile ("ZombieLegMirror", 8, random(4, 7), frandom(-130,-240), 2, frandom(-60,-150));
    }

    void spawnZombieTenticle () {
        A_PLAYSOUND("dismember/limb", CHAN_AUTO, 0.6, 0, 0.6, 0, frandom(0.8,1.1));
        A_SpawnProjectile ("ZombieClaw", 8, random(4, 7), frandom(-130,-240), 2, frandom(-60,-150));
    }

    void spawnZombieCannon()
    {
        A_PLAYSOUND("dismember/limb", CHAN_AUTO, 0.6, 0, 0.6, 0, frandom(0.8,1.1));
        A_SpawnProjectile ("ZombieCannon", 8, random(4, 7), frandom(-130,-240), 2, frandom(-60,-150));
    }

    override void BodyImpact()
    {
        super.BodyImpact();
        A_PLAYSOUND("CORPSE/ZOMBIE/impact", CHAN_AUTO, 0.47, pitch:1.0);
        for(int x=0;x<8;x++)
        {
           A_SPAWNITEMEX("HumanBloodSplatters", frandom(-45,45), frandom(-45,45));
           A_SPAWNITEMEX("BloodSplatterEffect", frandom(-15,15), frandom(-15,15),0 , 0, 0, 2);
        }
		A_SPAWNITEMEX("DirtDecal", 0, 0, 1);
		A_PlaySound("ricochet/hit",CHAN_AUTO, 1.0, 0, 1.0, false, frandom(0.80, 1.1));
		EmitDefinition('grassparticleDefinition', chance: 1.0, numTries: 2, offset:(-10,0,0));
		EmitDefinition('GrassBladeParticleDefinition', chance: 1.0, numTries: 23, offset:(-10,0,0));
		EmitDefinition('GrassBladeParticleWildDefinition', chance: 1.0, numTries: 32, offset:(-10,0,0));
    }

    override void ALotOfGibs() 
    {
            A_PLAYSOUND("GIB/STOMP", CHAN_AUTO, 1.0, 0, 0.8);
            A_PLAYSOUND("dismember/limb", CHAN_AUTO, 1.0, 0, 0.9, 0, frandom(0.8,1.1));
            int oldAngle = angle;
            for(int x=0;x<25;x++)
            {
                A_SPAWNITEMEX("HumanBloodSplatters", frandom(-65,65), frandom(-65,65));
                for(int x=0;x<5;x++) {
                    angle = random(0,360);
                    vector3 sprayDirection = vecFromAngle(angle, pitch+=frandom(-40,100));
                    A_SprayDecal("BloodSplat", 250, offset:(0,0,frandom(0,80)), direction:sprayDirection);
                }
            }
            for(int i=0;i<15;i++) {
                A_SPAWNITEMEX("MaggotDecal", frandom(0, 145), angle:random(0,360));
            }
            angle = oldangle;
            A_PLAYSOUND("impact/bonehit", CHAN_AUTO, 0.6, 0, 0.6, 0, frandom(0.7,1.1));
            for(int x=0;x<6;x++)
            {
				A_SpawnItemEx("BonePartHumanLarge", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
				A_SpawnItemEx("BonePartHuman", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
                A_SpawnItemEx("BonePartHuman", random(-20,20), random(-20, 20), random(0, 60), frandom(-3.2,3.2), frandom(-3.2,3.2), frandom(0.2,3.4));
            }
            for(int x=0;x<12;x++)
            {
                A_SPAWNITEMEX("SuperGoreRed", frandom(-45,45), frandom(-45,45), frandom(0,40));
            }
            A_SPawnItemEx("BloodChunks", 0, 0, 24, frandom(-6,6), frandom(-6,6), frandom(4,7));
            A_SPawnItemEx("BloodChunks", 0, 0, 24, frandom(-6,6), frandom(-6,6), frandom(4,7));
            A_SpawnProjectile ("BloodSplatterEffect", 32, 0, random (0, 360), 2, random (-10, -70));
            A_SPAWNITEMEX("BloodSplatterEffect", random(-10, 10), random(-8,8),frandom(height,height+20), random(-3,3), random(-3,3),random(1,6));
            for(int x=0;x<30;x++)
            {
                A_SPAWNITEMEX("BloodSplatterEffect", random(-25, 25), random(-25,25),frandom(height,height+20), random(-3,3), random(-3,3),random(1,9)); 
                A_SPAWNITEMEX("MaggotSpawn", frandom(-25,25), frandom(-35,35), frandom(2, 50), frandom(-4,4), frandom(-4,4), frandom(-3,9));
                A_SPAWNITEMEX("MaggotSpawn", frandom(-25,25), frandom(-35,35), frandom(2, 50), frandom(-4,4), frandom(-4,4), frandom(-3,9));
                if(random(0,100) <= 35)
                {
                    A_SpawnProjectile ("HumanBrainPiece", height-5, frandom(-5,5), random (0, 360), 2, random (-140,-160));
                    A_SpawnProjectile ("HumanIntestine", frandom(10,45), random(-30,30), random (0, 360), 2, random (-30, -180));
                }
            } 
            A_SpawnProjectile("ZombieChest", 32, frandom(-5,5), angle:-180, flags:2,pitch:frandom(-60,-150));
            A_SpawnProjectile("ZombieClaw", 24, frandom(-20,20), angle:-180, flags:2,pitch:frandom(-60,150));
    }

    default
    {
        DeathceptionMaster.SoldierSkeleton "Infected";
        DeathceptionMaster.CorpseFaction CT_ZOMBIE;
		Bloodtype "ZombieSplatter", "ZombieSplatter", "ZombieSplatter";
        selflighting "000000";
        scale 0.38;
		yscale 0.31;
    }
    states {
        Death.shotgun:
            TNT1 AAAAA 0 A_SpawnItemex("SuperGoreRed", frandom(-90,90), frandom(-90,90), frandom(-10, 100));
            TNT1 A 0
            {
                projectileSpeedMulti = 1.05;
            }
            goto death;
        Death.ExplosiveImpact:
            TNT1 AAAAA 0 A_SpawnItemex("SuperGoreRed", frandom(-90,90), frandom(-90,90), frandom(-10, 110));
            TNT1 A 0
            {
                projectileSpeedMulti = 1.15;
            }
            goto death;
    }
}

class ZOMBIE_GRUNT_DEATH_1 : DeathceptionMasterZombie
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BLD1"; 
    }

    default
    {
        
    }
    states
    {
        indexer:
            BLD1 A 0;
        Spawn:
        StartDying:
            TNT1 A 0;
            TNT1 A 0
            {
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 ABCDEFG 3;
            TNT1 A 0 
            {
                BodyImpact();
                noLongerShootable();
            }
            TNT1 HIJ 3;
            TNT1 J -1;
            stop;
    }
}

class ZOMBIE_RANGED_DEATH_1 : ZOMBIE_GRUNT_DEATH_1
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BRD1"; 
    }
    states
    {
        indexer:
            BRD1 A 0;
    }
}

class ZOMBIE_GRUNT_DEATH_2 : DeathceptionMasterZombie
{

    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BLD2"; 
    }

    states
    {
        Indexer:
            BLD2 A 0;
        Spawn:
        StartDying:
            TNT1 A 0;
            TNT1 A 0
            {
                sprite = GetSpriteIndex(spriteToUse);
            }
            TNT1 A 0 A_CHANGEVELOCITY(-4,0,0, CVF_RELATIVE);
            TNT1 ACDFG 4;
            TNT1 A 0 
            {
                BodyImpact();
                noLongerShootable();
            }
            TNT1 HIJK 3;
            TNT1 LMOQRSTUVWXY 4;
            TNT1 Z -1;
            stop;
    }
}

class ZOMBIE_RANGED_DEATH_2 : ZOMBIE_GRUNT_DEATH_2
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BRD2"; 
    }
    states
    {
        Indexer:
            BRD2 A 0;
    }
}

class ZOMBIE_GRUNT_DEATH_3 : DeathceptionMasterZombie
{
    states
    {
        Spawn:
        StartDying:
            TNT1 A 0;
            TNT1 A 0 A_CHANGEVELOCITY(-4,0,0, CVF_RELATIVE);
            BLD3 ABCDEFGH 3;
            TNT1 A 0 
            {
                BodyImpact();
                noLongerShootable();
            }
            BLD3 IJ 3;
            BLD3 K -1;
            stop;
    }
}

class ZOMBIE_GRUNT_SHOTGUN_1 : DeathceptionMasterZombie
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BLS1"; 
    }

    states
    {
        Index:
            BLS1 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                A_RECOIL(10);
                spawnZombieLeg();
                spawnZombieHead();
                spawnZombieTenticle();
                sprite = GetSpriteIndex(spriteToUse);
            }
        StartAnimation:
            TNT1 ABCDE 3;
            TNT1 A 0
            {
                BodyImpact();
            }
            TNT1 FGH 3;
            TNT1 I -1;
            stop;
    }
}

class ZOMBIE_RANGED_SHOTGUN_1 : ZOMBIE_GRUNT_SHOTGUN_1
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BRS1"; 
    }

    states
    {
        Index:
            BRS1 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                A_RECOIL(10);
                spawnZombieLeg();
                spawnZombieHead();
                sprite = GetSpriteIndex(spriteToUse);
                setStateLabel("StartAnimation");
            }
            goto StartAnimation;
    }
}


class ZOMBIE_GRUNT_SHOTGUN_2 : DeathceptionMasterZombie
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BLS2"; 
    }

    states
    {
        Index:
            BLS2 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                A_RECOIL(10);
                spawnZombieLeg();
                spawnZombieLegMirrored();
                spawnZombieHead();
                spawnZombieTenticle();
                sprite = GetSpriteIndex(spriteToUse);
            }
        StartAnimation:
            TNT1 ABCDEFG 3;
            TNT1 A 0
            {
                BodyImpact();
            }
            TNT1 HIJ 3;
            TNT1 K -1;
            stop;
    }
}

class ZOMBIE_RANGED_SHOTGUN_2 : ZOMBIE_GRUNT_SHOTGUN_2
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BRS2"; 
    }

    states
    {
        Index:
            BRS2 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                A_RECOIL(10);
                spawnZombieLeg();
                spawnZombieLegMirrored();
                spawnZombieHead();
                spawnZombieCannon();
                sprite = GetSpriteIndex(spriteToUse);
            }
            goto StartAnimation;
    }
}

class ZOMBIE_GRUNT_SHOTGUN_3 : DeathceptionMasterZombie
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BLS3"; 
    }

    states
    {
        Index:
            BLS3 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                A_RECOIL(10);
                spawnZombieLeg();
                spawnZombieLegMirrored();
                spawnZombieTenticle();
                sprite = GetSpriteIndex(spriteToUse);
            }
            goto StartAnimation;
        StartAnimation:
            TNT1 ABCDEF 3;
            TNT1 A 0
            {
                BodyImpact();
            }
            TNT1 GHIJ 3;
            TNT1 K -1;
            stop;
    }
}

class ZOMBIE_RANGED_SHOTGUN_3 : ZOMBIE_GRUNT_SHOTGUN_3
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BRS3"; 
    }

    states
    {
        Index:
            BRS3 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                A_RECOIL(10);
                spawnZombieLeg();
                sprite = GetSpriteIndex(spriteToUse);
            }
            goto StartAnimation;
    }
}

class ZOMBIE_GRUNT_HEAD_1 : DeathceptionMasterZombie
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BLH1"; 
    }

    states
    {
        Index:
            BLH1 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                spawnZombieHead();
                A_RECOIL(3);
                sprite = GetSpriteIndex(spriteToUse);
            }
        StartAnimation:
            TNT1 ABCDEF 3;
            TNT1 A 0
            {
                BodyImpact();
            }
            TNT1 GHIJ 3;
            TNT1 K -1;
            stop;
    }
}

class ZOMBIE_RANGED_HEAD_1 : ZOMBIE_GRUNT_HEAD_1
{
    override void postbeginPlay()
    {
       super.postbeginPlay();
       spriteToUse = "BRH1"; 
    }

    states
    {
        Index:
            BRH1 A 0;
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                spawnZombieHead();
                A_RECOIL(3);
                sprite = GetSpriteIndex(spriteToUse);
            }
            goto StartAnimation;
    }
}

// Juggernauts only have one way of dying (for now!), so we can keep it simple until then.
// Maybe only allow railguns to gib?
class JuggernautDeathception : DeathceptionMaster
{
    default
    {
        +BUDDHA
        mass 10000;
        -pushable
		xScale 0.64;
		yscale 0.47;
		BloodType "Selaco_Blood_HEAVYARMOR", "Selaco_Blood_HEAVYARMOR", "Selaco_Blood_HEAVYARMOR";
    }
}

class JuggernautDeath1 : JuggernautDeathception
{
    states
    {
        Spawn:
        StartDying:
        Death:
    	    TNT1 AAA 0 bright A_SpawnProjectile ("SuperGorePurple", 35, 0, random (170, 190), 2, random (0, 40));
            TNT1 AAAA 0 A_SpawnProjectile ("XDeath1Alien", 32, 0, random (170, 190), 2, random (0, 40));
            TNT1 AAAA 0 A_SpawnProjectile ("XDeath2Alien", 32, 0, random (170, 190), 2, random (0, 40));
            TNT1 AAA 0 A_SpawnProjectile ("XDeath3Alien", 32, 0, random (170, 190), 2, random (0, 40));
            TNT1 AAA 0 A_SpawnDefinedParticleProjectile("PurpleSplatterEffectBigDefinition", 40, 0, random (0, 360), 2, random (30, 90));
            JUD1 ABCDEFGHI  4 {
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 32, 0, random (0, 360), 2, random (30, 60));
                A_SpawnItemex("SmallExplosion", random(-35, 35), random(-35, 35), random(0, 70));
            }
            JUD1 JKL 4  {
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 64, 0, random (0, 360), 2, random (30, 60));
                A_SpawnItemex("SmallExplosion", random(-35, 35), random(-35, 35), random(0, 70));
            }
            TNT1 A 0 
            {

                A_NoBlocking();
                A_SpawnProjectile ("JuggernautLegArmorMirrored", frandom(5, 10), 0, random (-160, -200), 2, random (-60, -90));
                A_SpawnProjectile ("JuggernautLegArmor", frandom(5, 10), 0, random (-160, -200), 2, random (-60, -90));
                A_SpawnProjectile ("JuggernautLegArmorMirrored", frandom(5, 10), 0, random (-160, -200), 2, random (-60, -90));
                A_SpawnProjectile ("JuggernautLegArmor", frandom(5, 10), 0, random (-160, -200), 2, random (-60, -90));
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 64, 0, random (0, 360), 2, random (30, 60));
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 64, 0, random (0, 360), 2, random (30, 60));
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 64, 0, random (0, 360), 2, random (30, 60));
                A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 64, 0, random (0, 360), 2, random (30, 60));

                actor explosionEffectActor;
                bool successExplosionEffect;
                [successExplosionEffect, explosionEffectActor] =  A_SpawnItemEx ("PrettyExplosionParticleRain",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
                if(explosionEffectActor)
                {
                    ExplosionEffect(explosionEffectActor).explosionSoundVolume = 1;
                    ExplosionEffect(explosionEffectActor).explosionAmountMin+=15;
                    ExplosionEffect(explosionEffectActor).explosionAmountMax+=15;
                    ExplosionEffect(explosionEffectActor).explosionSpreadHorizontal+=8;
                    ExplosionEffect(explosionEffectActor).explosionSpreadVertical+= 15;
                    ExplosionEffect(explosionEffectActor).lightRadius = 100;
                }
            }
            JUD1 MNOPQ 4  {
                A_SpawnProjectile ("XDeath1Alien", 32, 0, random (0, 360), 2, random (0, 40));
                A_SpawnProjectile ("XDeath2Alien", 32, 0, random (0, 360), 2, random (0, 40));
                A_SpawnItemex("SmallExplosion", random(-35, 35), random(-35, 35), random(0, 70));
                A_SpawnItemex("SmallExplosion", random(-35, 35), random(-35, 35), random(0, 70));
            }
            TNT1 A 0
            {
                A_SETSIZE(10, 19);
            }
            JUD1 R -1;
            Stop;
    }
}

class ZOMBIE_TANK_DEATH_1 : DeathceptionMasterZombie
{
    default
    {
        scale 0.44;
		yscale 0.34;
    }
    states
    {
        indexer:
            BLD1 A 0;
        Spawn:
        StartDying:
            TNT1 A 0;
            TNT1 A 0
            {
                sprite = GetSpriteIndex(spriteToUse);
            }
            BTD1 ABCDEFGHIJKLMNO 3;
            TNT1 A 0 
            {
                BodyImpact();
                noLongerShootable();
            }
            BTD1 PQRST 3;
            BTD1 U -1;
            stop;
    }
}

class ZOMBIE_TANK_DEATH_2 : DeathceptionMasterZombie
{
    default
    {
        scale 0.41;
		yscale 0.32;
    }
    states
    {
        indexer:
            BLD1 A 0;
        Spawn:
        StartDying:
            TNT1 A 0;
            TNT1 A 0
            {
                spawnZombieLeg();
                sprite = GetSpriteIndex(spriteToUse);
            }
            BTD2 ABCDEF 3;
            TNT1 A 0 
            {
                BodyImpact();
                noLongerShootable();
            }
            BTD2 HIJKL 3;
            BTD2 M -1;
            stop;
    }
}
