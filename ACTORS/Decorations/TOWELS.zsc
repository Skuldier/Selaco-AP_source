class TOWEL_ROLLED : PickupableDecoration
{
    // Player is bumping into the object with force
    override void collidingWithPlayer(actor toucher)
    {
		toucher.A_PLAYSOUND("PLAYER/COLLISION", CHAN_AUTO, pitch:1.25);
		collisionsfxCD = 5;
    }
    
    actor newTowel;
    bool success;

    int frameID;
    override void BeginPlay()
    {
        super.BeginPlay();
        frameID = random(0,3);
    }

    // Runs when thrown
    void searchTowelHook()
    {
        BlockThingsIterator it = BlockThingsIterator.Create(self, 2);
        Actor currentActor;
        while (it.Next()) {
            currentActor = it.thing; // Only continue if it's a towel hook
            if (currentActor.getClassName() == "Towel_Hook" && distance3D(currentActor) < 15)
            {
                // Oh my god, it's a towel hook!
                let towelActor = TOWEL_HOOK(currentActor);
                if(towelActor)
                {
                    towelActor.frameID = frameID;
                    towelActor.becomeTowel();
                    destroy();
                }
            }
        }
    }

    default
    {
        tag "$OBJECT_TOWEL";
        +SHOOTABLE
        +CANPASS
        +SOLID;
        +SelacoActor.thruplayers;
        +NOBLOODDECALS
        -NOBLOOD
        -SELACOACTOR.SlopeAlignment
        -BloodSplatter;
        health 5;
        Radius 4;
        height 6;
        mass 125;
	    Bloodtype "PaperChunk_UP", "PaperChunk_UP", "PaperChunk_UP";
    }

    states{
        Throw:
		ThrowLooper:
			VOXE A 1 {
                frame = frameID;
				bThruActors = false;
			}
			VOXE A 1 
            {
                searchTowelHook();
                frame = frameID;
				if(isTouchingSurface()) 
                {
					[success, newTowel] = A_SPAWNITEMEX("TOWEL_FLAT_MESSY");
                    TOWEL_FLAT_MESSY(newTowel).frameID = frameID;
                    destroy();
				}
			}
			loop;
        PickUp:
        Putdown:
        Spawn:
            TNT1 A 0;
            VOXE A -1 {
                frame = frameID;
            }
            stop;
        Death: 
            TNT1 AAAAAA 0 A_SPAWNITEMEX("PaperDustEffect", frandom(-20,20), frandom(-20,20), random(0,10));
            TNT1 A 0 {
                EmitDefinition('PaperParticleChunkDefinition', 1.0, 25);
            }
            stop;
    }
}

class TOWEL_FLAT : TOWEL_ROLLED {
    default{
        -USESPECIAL;
        Activation THINGSPEC_DEFAULT;
    }
}

class TOWEL_HANGING : TOWEL_FLAT
{

    override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
        A_SPawnItemEx("Towel_hook");
        Super.Die(source, inflictor, dmgflags, MeansOfDeath);
    }

    default
    {
        height 20;
        radius 9;
        +NOGRAVITY;
        +DONTTHRUST;
    }
    states {
        Spawn:
        PickUp:
        Putdown:
        Throw:
        ThrowLooper:
            TNT1 A 0;
            VOXE A -1 {
                frame = frameID;
            } 
            loop;
    }
}

class TOWEL_FLAT_MESSY : TOWEL_ROLLED
{
    states
    {
        PickUp:
        Putdown:
        Throw:
        ThrowLooper:
		VOXE A 1 
        {
           searchTowelHook();
           frame = frameID;
			if(isTouchingSurface()) 
            {
			    setStateLabel("Spawn");
            }
        }
        loop;
        Spawn:
            TNT1 A 0;
            VOXE A -1 {
                frame = frameID;
            }
            stop;
    }
}

class TOWEL_HOOK : SelacoActor
{

    actor newTowel;
    bool success;
    int frameID;

    override void tick()
    {
        super.tick();
        vel = (0,0,0);
    }

    void becomeTowel()
    {
		[success, newTowel] = A_SPAWNITEMEX("TOWEL_HANGING");
        TOWEL_HANGING(newTowel).frameID = frameID;
        destroy();
    }

    default {
        +DONTTHRUST;
        +NOGRAVITY;
        -solid;
        +ThruActors;
        radius 5;
        height 5;
    }
    states
    {
        Spawn:
            VOXE L -1;
    }
}