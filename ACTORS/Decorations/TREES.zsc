
// TO-DO: Crysis Style tree destruction.

enum TREETYPES
{
	TREE_RANDOM             = 0,
	REGULAR_TREE_GREEN      = 1,
	TALL_TREE_GREEN         = 2,
    TALL_TREE_PINK          = 4,
	REGULAR_TREE_PINK       = 3,
	NO_LEAVES               = 99,
}

class Tree_1 : SelacoActor
{
    const RUSTLE_CHANCE = 25; // Chance for leaves to rustle when shot

    bool hitDelay;
    int leafFrames;
    int treeFrame;
    bool leafSuccess;
    actor leafActorOutside;
    actor leafActorInside;
    actor shadowSprite;
    override void postbeginPlay()
    {
        leafFrames = args[1];
        treeFrame = 0;
        if(args[0] == TREE_RANDOM && args[1] != NO_LEAVES)
        {
            bool urmum;
            [urmum, shadowSprite] = A_SPAWNITEMEX("TREE_SHADOW");
            if(shadowSprite && (args[1] == 2 || args[1] == TALL_TREE_PINK))
            {
                shadowSprite.A_SetScale(1.3);
            }
        }
        if(args[1] == TALL_TREE_GREEN || args[1] == TALL_TREE_PINK)
        {
            treeFrame = 1;
            leafFrames = args[1];
        }
    }

    override int takeSpecialDamage (Actor inflictor, Actor source, int damage, Name damagetype) {
		int res = Super.TakeSpecialDamage(inflictor, source, damage, damageType);
        if(!hitDelay)
        {
            hitDelay = true;
            A_PLAYSOUND("impact/tree", CHAN_AUTO, 1.0, pitch:frandom(0.9,1.16));
            // If leaves, drop some.
            if(leafActorOutside)
            {
                if(random(0,100) <= RUSTLE_CHANCE)
                {
                    leafActorOutside.A_PLAYSOUND("step/plant", CHAN_AUTO);
                }
                for(int x=0;x<10;x++)
                {
                    leafActorOutside.A_SPAWNITEMEX("Flowerchunk_short", frandom(-30,30), frandom(-30,30), 25, 0, 0, frandom(-0.4,-2));
                }
            }
            setStateLabel("Pain");
        }
        return res;
	}

    default
    {
        +SOLID;
        +DONTTHRUST
        +SHOOTABLE
        -NOPAIN
        +NOBLOODDECALS;
        +SelacoActor.WakeOnPain
        +SelacoActor.DisallowGravityManipulation;
        +SelacoActor.SleepWhenIdle;
        -SelacoActor.WakeNearPlayer;
        height 130;
        radius 16;
        health 50;
        Mass 1200;
        Painchance 256;
        DeathSound "impact/woodbreak";
        BloodType "BulletImpactEffectWoodShrapnel", "BulletImpactEffectWoodShrapnel", "BulletImpactEffectWoodShrapnel";
    }

    states
    {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 
            {
                if(args[1] != NO_LEAVES)
                {
                // Outer leaves
                    [leafSuccess, leafActorOutside] = A_SPAWNITEMEX("Tree_Leaves", 0, -10, 90);
                    if(leafActorOutside) 
                    {
                        Tree_Leaves(leafActorOutside).frameID = leafFrames;
                        // Enlarge Tall Trees
                        if(args[1] == TALL_TREE_GREEN || args[1] == TALL_TREE_PINK)
                        {
                            leafActorOutside.A_SETSCALE(leafActorOutside.scale.x, leafActorOutside.scale.y+frandom(0.01,0.04)); 
                        }
                    }

                    // Inner Leaves, but only for some trees
                    if(args[1] <= REGULAR_TREE_GREEN || args[1] == REGULAR_TREE_PINK)
                    {
                        [leafSuccess, leafActorInside] = A_SPAWNITEMEX("Tree_Leaves", 0, 0, 100);
                        if(leafActorInside) 
                        {
                            Tree_Leaves(leafActorInside).frameID = leafFrames;
                            leafActorInside.A_SETSCALE(0.6);
                        }
                    }
                }
            }
        Idle:
            VOXE A 4
            {
                frame = treeFrame;
            }
            VOXE A -1
            {
                hitDelay = false;
                frame = treeFrame;
            }
            loop;
        Pain:
            TNT1 A 0 A_PAIN();
            goto Idle;
        Death:
            TNT1 A 0 
            {
                A_PLAYSOUND("TREE/KILL", CHAN_AUTO, 0.8, 0, 0.8);
                actor treeCollapse;
                bool succ;
                if(leafActorInside)
                {
                    leafActorInside.destroy();
                }
                if(shadowSprite)
                {
                    shadowSprite.destroy();
                }
                [succ, treeCollapse] = A_SPAWNITEMEX("TREE_1_COLLAPSING", 0, 0, 28);
                if(treeCollapse && leafActorOutside)
                {
                    leafActorOutside.master = treeCollapse;
                    Tree_Leaves(leafActorOutside).followCollapsingTree();
                }
                A_SPAWNITEMEX("TREE_STUMP");
            }
            stop;
    }
}

class TREE_STUMP : SelacoActorStatic
{
    default
    {
        +SHOOTABLE
        +BUDDHA
        painchance 256;
        radius 15;
        height 15;
        PainSound "impact/tree";
        DeathSound "impact/woodbreak";
        BloodType "BulletImpactEffectWoodShrapnel", "BulletImpactEffectWoodShrapnel", "BulletImpactEffectWoodShrapnel";        
    }
    states
    {
        Spawn:
            VOXE A -1;
            stop;
    }
}

class LEAVES_FALLEN : SelacoActorStatic
{
    default
    {
        +NOINTERACTION;
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class Tree_Leaves : SelacoActor
{
    float warpYOffset;
    float warpZOffset; 
    void followCollapsingTree()
    {
        bPreventSleep = true;
        warpZOffset = 69;
        warpYOffset = -14;
        setStateLabel("FollowCollapsingTree");
    }

    int frameID;
    DEFAULT
    {
        +SelacoActor.DisallowGravityManipulation;
        +BUDDHA
        +DONTTHRUST
        +NOBLOODDECALS
        +SHOOTABLE;
        +THRUACTORS
        +NOINTERACTION
        +HITSCANTHRU
        mass 1000;
        radius 90;
        height 60;
        scale 1;
        painChance 255;
        Painsound "step/plant";
		Bloodtype "FlowerChunk_UP", "FlowerChunk_UP", "FlowerChunk_UP";
    }

    States
    {
        Spawn:
            TNT1 A 0;
            VOXE L -1
            {
                frame = frameID;
            }
            stop;
        Pain:
            TNT1 A 0 A_PAIN();
            goto spawn;
        DoneCollapsing:
            TNT1 AAAAAAAAAAAAAAAAAAAAAAA 0
            {
                A_SPAWNITEMEX("Flowerchunk_short", frandom(-60,60), frandom(-30,30), frandom(0,30), frandom(-2,2), frandom(-2,2), frandom(-1.8,1.8));
            }
            VOXE L -1;
            stop;
    }
}

class TREE_SHADOW : SelacoActorStatic
{
    default
    {
        +FLATSPRITE;
        scale 1.8;
        alpha 0.65;
        renderstyle "translucent";
        +NOINTERACTION;
    }
    states
    {
        Spawn:
            TRSH A -1;
            stop;
    }
}


class TREE_1_COLLAPSING : SelacoActor
{

    const ROLL_AMOUNT = 93;

    float rollSpeed;
    float enlargeSpeed;
    bool collapsed;
    override void tick()
    {
        super.tick();
        fallOver();
    }

    // Animation of the tree falling over

    void fallOver()
    {
        if(roll < ROLL_AMOUNT)
        {
            rollSpeed*=1.04;
            enlargeSpeed*=1.003;
            A_SETSCALE(-1, scale.y + enlargeSpeed*0.15);
            A_SETROLL(roll+rollSpeed);
            if(level.time % random(6,18) == 0)
            {
                A_SPAWNITEMEX("BulletImpactEffectWoodShrapnel", 0, 0, -5);
            }
            if(roll >= ROLL_AMOUNT && !collapsed)
            {
                collapsed = true;
                impactEffects();
                sleepIndefinite();
            }
        }
    }

    // Tree has collapsed
    void impactEffects()
    {
        A_PLAYSOUND("TREE/land", CHAN_AUTO, 1.0, 0, 0.8);
        for(int x=0;x<10;x++)
        {
            A_SPAWNITEMEX("BulletImpactEffectWoodShrapnel", 0, x*8, -1*x);
        }
    }

    override void postbeginPlay()
    {
        super.postBeginPlay();
        rollSpeed = 0.1;
        enlargeSpeed = 0.01;
    }

    default
    {
        +NOGRAVITY
        +SelacoActor.PreventSleep
    }
    states
    {
        Spawn:
            TNT1 A 0;
            VOXE L -1;
            stop;
    }
}