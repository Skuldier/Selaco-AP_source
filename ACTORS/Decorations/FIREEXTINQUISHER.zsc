
class Fire_Extinguisher : SelacoWeapon {
	string weaponToThrow;
	//class<WeaponBase> playerLastWeapon;

	default {
		+WeaponBase.CHEATNOTWEAPON
		WeaponBase.AmmoUse 1;
		WeaponBase.AmmoGive 1;
		WeaponBase.SlotNumber 0;
		Inventory.Icon "WPNTHRO";
		tag "$OBJECT_FIREEXTINGUISHER";
		SelacoWeapon.SlidingSprite "EXTS";
		SelacoWeapon.HideAmmo true;
		SelacoWeapon.VoxelDecorationModel "fireExThrownModel";
		SelacoWeapon.ammoColor "FF 92 C2";
		+SelacoWeapon.DisallowLastWeaponSwitch;
		AttackSound "None";
		WeaponBase.AmmoType "FireExtinquisherAmmo";
		selflighting "787878";
		+WeaponBase.NOAUTOAIM;
		+WeaponBase.NOALERT;
		+WeaponBase.NOAUTOFIRE;
		+FLOORCLIP;
		+DONTGIB;
		Scale 0.4;
	}

	override void AttachToOwner(Actor other) {
		if(other.player && other.player.ReadyWeapon) {
			//playerLastWeapon = other.player.ReadyWeapon.getClass();
		} else {
			Console.Printf("\c[RED]Error: Player didn't have a weapon?");
		}
		Super.AttachToOwner(other);
	}

	override void DetachFromOwner() {
		if(owner && owner.player && Dawn(owner)/*&& playerLastWeapon*/) {
			//ScriptUtil.SetWeapon(owner, playerLastWeapon);
			Dawn(owner).switchToLastWeapon();
		}
		Super.DetachFromOwner();
	}


	states {
		Precache:
			EXTS A 0;
			EXTG A 0;
			stop;
		Spawn:
			FPFP J 1;
			stop;
		ReallyReady:
			TNT1 A 0;
			
		Equip:
		Ready3:
		Ready:
		ShatterWindow:
			FPFP J 1;
		ReallyReady:
			TNT1 A 0 A_TakeInventory("CancelAnimation", 1);
			TNT1 A 0 A_JumpIfInventory("ShowHands",1,"HandRemoved");
			TNT1 A 0 {
				if(invoker.weaponToThrow == "") {
					setWeaponState("Deselect");
				}
			}
			FPFP J 1 {
				if(invoker.weaponToThrow == "") {
					setWeaponState("Deselect");
				}
				A_TakeInventory("ShieldEyes", 1);
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
				CheckPlayerStates();
			}
			loop;

		HandRemoved:
			TNT1 A 0 A_TakeInventory("ShowHands", 1);
			TNT1 A 0 {
				if(invoker.weaponToThrow == "") {
					setWeaponState("Deselect");
				}
			}
			EXTG ABCD 2;
			TNT1 A 0 {
				invoker.interactionSprite = "EXTG";
				invoker.weaponFrame= 4;
			}
			goto HandRemovedLooperGrenade;

		ReturnHands:
			TNT1 A 0 {
				if(invoker.weaponToThrow == "") {
					setWeaponState("Deselect");
				}
			}
			EXTG DCBA 2;
			goto ReallyReady;

		DropExtinguisher:
			TNT1 A 0 A_PlaySound ("impact/cannister", CHAN_AUTO);
			TNT1 A 0 A_TakeInventory("FireExtinquisherAmmo", 1);
			TNT1 A 0 A_TakeInventory("Fire_Extinguisher", 1);
			//TNT1 A 0 ACS_NamedExecute("RetrievePreviousWeapon", 0);
			/*TNT1 A 0 {
				ScriptUtil.SetWeapon(invoker.owner, invoker.playerLastWeapon);
			}*/
			stop;
		MeleeAttack:
		Unequip:
			TNT1 A 0 {
				if(invoker.weaponToThrow != "") {
					A_SPAWNITEMEX(invoker.weaponToThrow, 23, 0, height-12, 2);
					A_PlaySound ("impact/cannister", CHAN_AUTO);
					A_TakeInventory("FireExtinquisherAmmo", 1);	
					invoker.weaponToThrow = "";

					// If the player already selected a weapon, don't force the old one
					/*if(player && player.PendingWeapon != null  && (player.PendingWeapon is 'SelacoWeapon')) {
						invoker.playerLastWeapon = null;
					}*/
				}
			}
			TNT1 A 0 A_SpawnItemEx (invoker.weaponToThrow, 56, 0, 32, 2, 0, 0, 0);
			TNT1 A 0 A_JumpifInventory("FireExtinquisherAmmo", 0, "DropExtinguisher");
		ContinueDeselect:
			TNT1 A 1 A_Lower;
			//TNT1 A 0 ACS_NamedExecute("RetrievePreviousWeapon", 0);
			TNT1 A 0 {
				A_TakeInventory("FireExtinquisherAmmo", 1);
				A_TakeInventory("Fire_Extinguisher", 1);	
			}
			stop;
		Select:
			TNT1 A 3 {
				invoker.weaponToThrow = "fireExThrown";
			}
			FPFP ABCDEFGHI 1 {
				//S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
				A_EnableWeaponShift();
			}
			goto Ready;
		Fire:
			TNT1 A 0 A_TakeInventory("FireExtinquisherAmmo", 100);
			TNT1 A 0 A_FireProjectile(invoker.weaponToThrow, random(-1,1), 0, 5, 0);
			TNT1 A 0 {
				invoker.weaponToThrow = "";
			}
			TNT1 A 0 A_PLAYSOUND("dawn/melee", CHAN_AUTO);
			TNT1 A 0 A_PLAYSOUND("item/throw", CHAN_AUTO, 0.6);
			TNT1 A 0;
			FPTR ABCDEFG 1  {
				if (getCVAR("g_screenshake") > 0 ) {
					A_QuakeEx(2, 2, 2 , 2, 0, 10, 0, 0, 10, 10, 10, 1, 1, 1);
				}
				S_WeaponOffset();
			}
			TNT1 A 6;
			goto ContinueDeselect;
		AltFire:
			TNT1 A 0 A_PlaySound ("impact/cannister", CHAN_AUTO);
			TNT1 A 0 A_TakeInventory("FireExtinquisherAmmo", 100);
			TNT1 A 2;
			goto Deselect;
	}
}

class FireExPickup : SelacoItem
{
	default {
		tag "$OBJECT_FIREEXTINGUISHER";
  		scale 0.5;
  		radius 150;
		+DONTGIB;
	}
  States
  {
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_PlaySound ("impact/cannister", CHAN_AUTO);
		VOXE L -1;
	Pickup:
		TNT1 A 0 A_GiveInventory("Fire_Extinguisher", 1);
		stop;
  }
}

class fireEx: Interactable
{
	mixin DangerIndicatorHandler;

	const extinguishingRange = 250.0;
	override void tick() {
		super.tick();
	}

	override Actor prepareForTelek(Actor owner) {
		if(getClassName() == 'FireEx') {
			if(bShootable) {
				A_NoBlocking();
				bool ignored;
				Actor fex;

				A_SpawnItemEx("FireExtinquisherContainer");	// Replace self
				A_PlaySound ("impact/cannister", CHAN_AUTO);

				// Spawn new object to pick up
				[ignored, fex] = A_SpawnItemEx("FireExtinquisherDetached", 10);

				removeIcon();

				Destroy();

				FireExtinquisherDetached(fex).wasOnWall = true;
				SelacoActor(fex).grabbedTelek();
				let r = SelacoActor(fex).prepareForTelek(owner);
				if(fex) fex.pitch = -90;
				return r;
			} else {
				return null;
			}
		}

		return Super.prepareForTelek(owner);
    }

	override void sleep(int tics) {
		Super.sleep(tics);
		removeIcon();
	}

	Actor iconActor;
	void removeIcon() {
		if(iconActor) {
			iconActor.wake();
			iconActor.die(self, self);
			iconActor = null;
		}
	}


	// Prevent picking up if we already have an extinguisher
	override void activate(actor activator) {
		if(activator.countInv('Fire_Extinguisher')) {
			activationtype = THINGSPEC_Activate;
			return;
		}
		else super.activate(activator);
	}

	override string GetUsePrompt(string highCol) {
		if(players[consolePlayer].mo && players[consolePlayer].mo.countInv('Fire_Extinguisher') > 0) {
            return String.Format("\c[DARKGRAY]%s", StringTable.Localize("$ACT_NOFIREEX"));
        }

		return Super.GetUsePrompt(highCol);
    }


	int sizzleLoops;
	const ticksToDetonate = 40;
	const steamParticleCount = 3;
	default {
		SelacoActor.UseTag "$ACT_GRAB";
		tag "$OBJECT_FIREEXTINGUISHER";
		// FLAGS
		+SelacoActor.thruplayers
		+SHOOTABLE
		+NOGRAVITY
		+NOBLOODDECALS
		+SOLID
		+USESPECIAL 
		+STANDSTILL
		+DONTTHRUST
		// VALUES
		selflighting "646464";
		health 100;
		scale 0.16;
		yscale 0.14;
		Painchance 255;
		radius 15;
		height 30;
		mass 400;
		PainChance "MeleeImpact", 0;
		DamageFactor "MagnumBullet", 8.0;
		DamageFactor "MeleeImpact", 0.0;
		DamageFactor "MeleeImpactSplash", 0;
		DamageFactor "Fire", 100;
		DamageFactor "shotgun", 8.0;
		BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
		Activation THINGSPEC_Activate;
	}
  states
  {
	Check1:
	Spawn:
		EXTT A 0;
		EXTT A 1 {
			A_SpawnItemEx("FireExtinquisherContainerLEDGreen", 6, 5.7, 7.64);
			A_SpawnItemEx("FireExtinquisherLED", 6.2, 0, 17.2);		
		}
		TNT1 A 0 A_JumpIf((Vel.Z  == 0), "Check2");
		loop;
	Check2:
		EXTT A 1 {
			A_SpawnItemEx("FireExtinquisherContainerLEDGreen", 6, 5.7, 7.64);
			A_SpawnItemEx("FireExtinquisherLED", 6.2, 0, 17.2);
		}
		EXTT A 0 A_LookEx(LOF_NOSOUNDCHECK, 0, 210, 0, 5000, "ShowIcon");
		goto Check1;
	ShowIcon:
		EXTT A 1 {
			A_SpawnItemEx("FireExtinquisherContainerLEDGreen", 6, 5.7, 7.64);
			A_SpawnItemEx("FireExtinquisherLED", 6.2, 0, 17.2);
			
			if(!iconActor && getCvar("g_itemicons") > 1) {
				bool dontcare;
				[dontcare, iconActor] = A_SpawnItemEx("EXTINGUISHER_ICON", 6, 0, 25);
			}
		}
		TNT1 A 0 A_LookEx(LOF_NOSOUNDCHECK, 510, 300, 0, 5000, "Check1");
		loop;
		
	Active:
        TNT1 A 0 {
			A_NoBlocking();
			A_SpawnItemEx("FireExtinquisherContainer");

			if(players[consoleplayer].mo) {
				players[consoleplayer].mo.SetInventory('Fire_Extinguisher', 1);
				ScriptUtil.SetWeapon(players[consoleplayer].mo, 'Fire_Extinguisher');
			}
			
			bShootable = false;
			bSolid = false;
			self.A_PlaySound ("PICKUP/EXTINGUISHER", CHAN_AUTO, 0.4);
			A_PlaySound ("impact/cannister", CHAN_AUTO, 0.3);
			removeIcon();
		}
		EXTT AAAAAAAAAA 1 A_FADEOUT(0.15);
		stop;

	Pain:
		TNT1 A 0 A_PlaySound("Extinquisher/leak", CHAN_5, 1, 0.8);
		TNT1 A 0 A_PLAYSOUND("EXTINGUISHER/LEAKBEEP", CHAN_AUTO, 0.6, 1);
		TNT1 A 0;
		TNT1 A 0 {
			blinkDangerIndicator(180);
			bDangerousActor = true;
			activationType = THINGSPEC_Default;
			bPreventSleep = true;
			bNoGravity = true;
			bUseSpecial = false;
			bDisallowGravityManipulation = true;
			bAllowGravityManipulation = false;
			removeIcon();
		}
	Looper:
		EXTT A 1 BRIGHT {
			for(int x=0;x<=steamParticleCount;x++) {
				A_SpawnItemEx("SteamParticle", 0, 0, 7, (0.1)*Random(35, 40), 0, (0.1)*Random(-5, 5), Random(-8, 8));
			}
			blinkDangerIndicator(180);
			sizzleLoops++;
			if (sizzleLoops >= ticksToDetonate) {
				SetStateLabel("Death");
			}
		}
		EXTT A 2;
		loop;

	Death.Gridlock:		
	Death:
		EXTI C 0 {
			removeIcon();
			A_PlaySound("Movers/pressur", CHAN_AUTO, 1.0, 0, 0.6);
			A_PlaySound("Extinquisher/destroy", CHAN_AUTO);
			A_PLAYSOUND("dest/concrete/rareGuaranteed", CHAN_AUTO);
			A_SPAWNITEMEX("ExtinquisherExplosion");
			A_STOPSOUND(CHAN_5);
			A_PlaySound ("impact/cannister", CHAN_AUTO);
			A_SpawnItemEx ("BigSmokes",0,0,45,0,0,0,0,SXF_NOCHECKPOSITION,0);
			A_NoBlocking();
			A_SPAWNITEMEX ("SparkMissile", 25, 0, 0, 3, 0, 2, angle-180);
			bUseSpecial = false;
			EmitDefinition('SparkParticleDefinitionFast', 0.75, 64, pitch:frandom(-60,-120));
		}
		TNT1 AAA 0 A_SpawnProjectile ("WallShrapnelLonger", random(-2, 2), 0, random (-80, 80), 2, random (-10, 40));
		TNT1 AAAAA 0 A_SpawnProjectile ("plasmaEmber", 48, 0, random (0, 360), 2, random (0, 360));
		TNT1 AAA 0 A_SpawnProjectile ("BigplasmaEmber", 42, 0, random (0, 360), 2, random (0, 360));
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMex ("EXTINGUISHERSMOKE", random(-10, 160), frandom(-30,30), random(-10, 42), frandom(0.3, 0.5), frandom(0.2,0.3), 0, frandom(-30,30));
		TNT1 AA 0 A_SpawnItem("WhiteShockwave");
		TNT1 AAA 0 A_SpawnProjectile ("EXTINGUISHERSMOKE", random(1, 24), 0, random (0, 90), 2, random (90, 180));
		TNT1 A 0 {
             if(CheckProximity("Dawn", 700.0, 1, CPXF_SETTARGET)) {
                ACS_NamedExecuteAlways("SpawnHudShake", 0, 17, 17, 35);
				Dawn.ShakeWeapon(10,10);
            }
            A_RadiusGive("ShieldEyes", 260, RGF_PLAYERS | RGF_GIVESELF, 1);
		}
		TNT1 A 0 A_STOP;
		stop;
	deathSoft:
		TNT1 A 0 A_GiveInventory("Fire_Extinguisher", 1);
		TNT1 A 0 A_SetInventory("Fire_Extinguisher", 1);
		EXTI C 2 A_FadeOut (0.1);
		stop;
  }
}

class FireExtinquisherLED : actor
{
	default {
		+NOGRAVITY;
		+STANDSTILL;
		+NOINTERACTION;
		+THRUACTORS;
		radius 2;
		scale 0.16;
	}
	States {
		Spawn:
			TNT1 A 0;
			EXTC F 2 BRIGHT;
		Death:
			TNT1 A 0;
			stop;
	}
}

class FireExtinquisherContainerLEDOn : FireExtinquisherLED
{

	States {
		Spawn:
			TNT1 A 0;
			EXTC E 2 BRIGHT;
		Death:
			stop;
	}
}

class FireExtinquisherContainerLEDGreen : FireExtinquisherLED
{
	States {
		Spawn:
			TNT1 A 0;
			EXTC G 2 BRIGHT;
		Death:
			stop;
	}
}

class FireExtinquisherContainer : actor
{
	default {
		+NOGRAVITY;
		+MISSILE;
		mass 400;
		+DONTTHRUST
		+shootable
		-solid;
		+NOBLOOD
		-NOBLOODDECALS;
		-BloodSplatter
		+STANDSTILL;
		scale 0.16;
		yscale 0.14;
		health 500;
		damagefactor "ExplosiveImpact", 5000;
	}
	States {
		Spawn:
			TNT1 A 0;
			EXTC D 1 A_SpawnItemEx("FireExtinquisherContainerLEDOn", 6, 5.7, 7.64);
			loop;
	}
}

class fireExThrown : Interactable 
{
	const extinguishingRange = 250.0;
	int pitchOffset;
	bool hasBounced;
	bool fireExplosion;

	override void PostBeginPlay() {
		Super.PostBeginPlay();
		hasBounced = false;
		pitchOffset = 45;
	}


	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		// Explode
		if((source) && (source is 'Dawn' || source.bIsMonster || fireExplosion)) 
		{
			RemoveNearbyFlames(extinguishingRange);
			A_PlaySound ("impact/cannister", CHAN_AUTO);
			A_SpawnItemEx ("BigSmokes",0,0,45,0,0,0,0,SXF_NOCHECKPOSITION,0);
			A_NoBlocking();
			A_PlaySound("Extinquisher/destroy", CHAN_AUTO);
			A_SPAWNITEMEX ("SparkMissile", 25, 0, 0, 3, 0, 2, angle-180);
			bUseSpecial = false;
            EmitDefinition('SparkBriefDefintion', 0.75, 30, pitch:frandom(-60,-120), flags:PE_ABSOLUTE_PITCH);
			A_SpawnProjectile ("WallShrapnelLonger", random(-2, 2), 0, random (-80, 80), 2, random (-10, 40));
			A_SpawnProjectile ("plasmaEmber", 48, 0, random (0, 360), 2, random (0, 360));
			A_SpawnProjectile ("BigplasmaEmber", 42, 0, random (0, 360), 2, random (0, 360));
			for(int x=0;x<15;x++)
			{
				A_SPAWNITEMex ("EXTINGUISHERSMOKE", random(0, 100), frandom(-5,5), random(-10, 42), frandom(0.3, 0.5), frandom(0.2,0.3), 0, frandom(0,360));
			}
			A_SpawnItem("WhiteShockwave");
			A_SpawnProjectile ("EXTINGUISHERSMOKE", random(1, 24), 0, random (0, 90), 2, random (90, 180));
			if(CheckProximity("Dawn", 700.0, 1, CPXF_SETTARGET)) 
			{
				ACS_NamedExecuteAlways("SpawnHudShake", 0, 17, 17, 35);
				Dawn.ShakeWeapon(10,10);
			}
			A_RadiusGive("ShieldEyes", 260, RGF_PLAYERS | RGF_GIVESELF, 1);
			destroy();
		}
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}

	override void tick()
	{
		super.tick();
		if(CheckProximity("FireActor", 40.0, 1))
		{
			fireExplosion = true;
			die(self, self);
		}
	}

	default {
		-SelacoActor.DecorativeActor;
		tag "$OBJECT_FIREEXTINGUISHER";
		SelacoActor.UseTag "$INTERACT_CATCH";
		health 5;
		height 16;
		radius 10;
		speed 30;
		gravity 0.6;
		+DoomBounce;
		+DROPOFF;
		+USEBOUNCESTATE;
		+INTERPOLATEANGLES;
		+USESPECIAL;
		+SHOOTABLE;
		-Pushable;
		Activation THINGSPEC_Activate;
		-NOGRAVITY;
		+MISSILE;
		damageType "MeleeImpactExtinguisher";
		BloodType "Stacked_Sparks_lite", "Stacked_Sparks_lite", "Stacked_Sparks_Lite";
		scale 0.16;
		yscale 0.14;
		damage 5;
		BounceCount 3;
		WallBounceFactor 0.25;
		BounceFactor 0.5;
		SeeSound "impact/cannister";
		+SelacoActor.IgnoreEnemyProjectiles
		-solid;
	}
	States {
		Spawn:
			TNT1 A 0;
		Looper:
			VOXE L 2 A_SETPITCH(pitch + pitchOffset, SPF_INTERPOLATE);
			loop;
		Bounce:
			TNT1 A 0 A_SPAWNITEMEX("MeleeImpactEffect");
			TNT1 A 0 {
				if(hasBounced) {
					pitch = 0;
					BounceFactor = 0.3;
					pitchOffset = pitchoffset - 20;
					SetStateLabel("Looper");
				}
			}
			TNT1 A 0 {
				if(!hasBounced) {
					hasBounced = true;
					A_SprayDecal("ScorchMark", 172);
				}
			}
			TNT1 A 0 {
				EmitDefinition('SparkBriefDefintion', 0.75, 30, pitch:frandom(-60,-120), flags:PE_ABSOLUTE_PITCH);
			}
			goto Looper;
		Active:
			TNT1 A 0 {
				if (ACS_NamedExecuteWithResult("ShouldSpawnExtinquisherInstead") == 1) {
					SetStateLabel("Looper");
				}
				ACS_NamedExecuteWithResult("CheckCurrentWeapon", 0);
				ACS_NamedExecuteWithResult("GetFireExtinquisher", 0);
				bShootable = false;
				bSolid = false;
				A_PlaySound ("impact/cannister", CHAN_AUTO);
			}
			stop;
		xdeath:
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0 A_SpawnItemEx("MeleeImpactEffect", -5, 0, 0);
			TNT1 A 0 A_PlaySound ("impact/cannister", CHAN_AUTO, 1.0, 0, 0.6);
		death:
			TNT1 A 0 A_PlaySound ("impact/cannister", CHAN_AUTO, 1.0, 0, 0.6);
			TNT1 A 0 A_SpawnItemEx("FireExtinquisherDetached");
			stop;
	}
}

class fireExThrownModel : fireExThrown
{
	default
	{
		+BUDDHA
		+THRUACTORS
		speed 3;
	}
}

class FireExtinquisherDetached : FireEx {
	int telekTime;
	bool wasOnWall;

	override void tick() {
		super.tick();

		if(wasOnWall && telekOwner && level.totalTime - telekTime < 15) {
			pitch = -90 * (1.0 - ((level.totalTime - telekTime) / 15.0));
		} else {
			wasOnWall = false;
		}

		if(bIsTelekProjectile) {
			pitch += 15;
		}
	}

	override void grabbedTelek() {
		Super.grabbedTelek();
		telekTime = level.totalTime;
	}


	default {
		SELACOACTOR.SleepDistance 0;
		health 5;
		height 12;
		radius 10;
		-SOLID;
		-NOGRAVITY
		+INTERPOLATEANGLES;
		bounceCount 1;
		BounceFactor 0.2;
		damageFactor "MeleeImpactExtinguisher", 0;
		damageFactor "MeleeImpact", 0;
		BloodType "Stacked_Sparks_lite", "Stacked_Sparks_lite", "Stacked_Sparks_Lite";
		Activation THINGSPEC_Switch;
	}
	States {
		Spawn:
			TNT1 A 0 A_PlaySound ("impact/cannister", CHAN_AUTO, 1.0, 0, 0.6);
			TNT1 A 0 {
				activationType = THINGSPEC_Default;
			}
			VOXE L 10;
			TNT1 A 0 {
				activationType = THINGSPEC_Switch;
			}
		Looper:
			VOXE L -1;
			loop;
	Inactive:
	Active:
        TNT1 A 0 {
			/*if (ACS_NamedExecuteWithResult("ShouldSpawnExtinquisherInstead") == 1) {
				SetStateLabel("Looper");
				return;
			}*/
			//ACS_NamedExecuteWithResult("CheckCurrentWeapon", 0);
			//ACS_NamedExecuteWithResult("GetFireExtinquisher", 0);
			if(players[consoleplayer].mo) {
				players[consoleplayer].mo.SetInventory('Fire_Extinguisher', 1);
				ScriptUtil.SetWeapon(players[consoleplayer].mo, 'Fire_Extinguisher');
			}
			bShootable = false;
			bSolid = false;
			A_PlaySound ("impact/cannister", CHAN_AUTO);
		}
		TNT1 A 0;
		stop;
	Pain:
	Death.Gridlock:		
	Death:
		EXTI C 0 {
			A_PlaySound("Movers/pressur", CHAN_AUTO, 1.0, 0, 0.6);
			A_PlaySound("Extinquisher/destroy", CHAN_AUTO);
			A_PLAYSOUND("dest/concrete/rareGuaranteed", CHAN_AUTO);
			A_SPAWNITEMEX("ExtinquisherExplosion");
			RemoveNearbyFlames(extinguishingRange);
			A_STOPSOUND(CHAN_5);
			A_RadiusGive("ShieldEyes", 260, RGF_PLAYERS | RGF_GIVESELF, 1);
			A_PlaySound ("impact/cannister", CHAN_AUTO);
			A_SpawnItemEx ("BigSmokes",0,0,45,0,0,0,0,SXF_NOCHECKPOSITION,0);
			A_NoBlocking();
			A_SPAWNITEMEX ("SparkMissile", 25, 0, 0, 3, 0, 2, angle-180);
			bUseSpecial = false;
			EmitDefinition('SparkParticleDefinitionFast', 0.75, 85, pitch:frandom(-60,-120));
		}
		TNT1 AAA 0 A_SpawnProjectile ("WallShrapnelLonger", random(-2, 2), 0, random (-80, 80), 2, random (-10, 40));
		TNT1 AAAAA 0 A_SpawnProjectile ("plasmaEmber", 48, 0, random (0, 360), 2, random (0, 360));
		TNT1 AAA 0 A_SpawnProjectile ("BigplasmaEmber", 42, 0, random (0, 360), 2, random (0, 360));
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMex ("EXTINGUISHERSMOKE", random(0, 100), frandom(-30,30), random(-10, 42), frandom(0.3, 0.5), frandom(0.2,0.3), 0, frandom(0,360));
		TNT1 AA 0 A_SpawnItem("WhiteShockwave");
		TNT1 AAA 0 A_SpawnProjectile ("EXTINGUISHERSMOKE", random(1, 24), 0, random (0, 90), 2, random (90, 180));
		TNT1 A 0 {
             if(CheckProximity("Dawn", 700.0, 1, CPXF_SETTARGET)) {
                ACS_NamedExecuteAlways("SpawnHudShake", 0, 17, 17, 35);
				Dawn.ShakeWeapon(10,10);
            }
		}
		TNT1 A 0 A_STOP;
		stop;
	}
}