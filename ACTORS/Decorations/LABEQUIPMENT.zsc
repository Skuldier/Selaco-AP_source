class LabEquipment : SelacoActor 
{
    bool explosiveDeath;
    bool spawnedBroken;

    override void postbeginPlay()
    {
        super.postbeginPlay();
        spawnedBroken = args[0];
        if(spawnedBroken)
        {
            setStateLabel("hasDied");
            die(self, self);
        }
    }

    override void tick()
    {
        super.tick();
        if(health > 0 && level.time % random(90,1500) == 0)
        {   
            A_PLAYSOUND("lab/beep", CHAN_AUTO, 0.3, pitch:frandom(0.9,1.1));
        }
    }

	override void die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		setStateLabel("Death");
	}

    default {
        +SOLID;
        +CANPASS;
        +SHOOTABLE;
        +INTERPOLATEANGLES
        +NOBLOODDECALS;
        SelacoActor.SleepDistance 512;
        +SelacoActor.thruplayers;
        +SelacoActor.WakeNearPlayer;
        painchance 255;
        mass 450;
        friction 0.7;
        health 1;
        height 15;
        radius 12;
        BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
        PainSound "impact/hardmetal";
    }

    states {
        Spawn:
            VOXE A -1;
            stop;
        Pain:
            TNT1 A 0 {
                A_PAIN();
            }
        Death:
            TNT1 A 0{
                if(!spawnedBroken)
                {
                    A_SETANGLE(angle+frandom(-25,25), SPF_INTERPOLATE);
                    A_STOPSOUND(CHAN_6);
                    A_PLAYSOUND("impact/hardmetal", CHAN_AUTO);
                    A_PLAYSOUND("destruction/equipmentfailure", CHAN_AUTO);
                    for(int x=0;x<2;x++) {
                        A_SpawnProjectile("circuitboardsmall", random(6,10), angle:random(0,360), CMF_AIMDIRECTION, pitch:frandom(-130,-170));
                    }
                    for(int x=0;x<7;x++)
                    {
                        A_SPAWNITEMEX("LargeGlassParticle1", frandom(-15,15),frandom(-15,15), frandom(0,15), frandom(-2,2), frandom(-2,2), frandom(0,4));
                    }
                    for(int x=0;x<5;x++)
                    {
                        A_SPAWNITEMEX("SmokeTrailPieceFloorExplosion", frandom(-15,15),frandom(-15,15), frandom(0,15), frandom(-0.2,0.2), frandom(-0.2,0.2), frandom(0,0.5));
                    }
                }
            }
        HasDied:
            VOXE B -1;
            loop;
    }
}

class BIOANALYSER_MACHINE : Interactable
{
    actor containerActor;
    bool success;

    actor screenActor;
    bool successScreen;

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        [success, containerActor] = A_SPAWNITEMEX("BIOANALYSER_CONTAINERS", -2, -16,4, flags:SXF_SETMASTER);

    }

    override void activate(actor activator)
    {
        super.activate(activator);
        if(containerActor)
        {
            if(screenActor)
            {
                screenActor.destroy();
            }
            [successScreen, screenActor] = A_SPAWNITEMEX("BIOANALYSER_SCREEN", 4.4, 12.1,6.1, flags:SXF_SETMASTER);
            Usetag = "$ACT_DEACTIVATE";
            A_PLAYSOUND("Analyser/Activate", CHAN_AUTO, 1.0, 0);
            let containerActorProps = BIOANALYSER_CONTAINERS(containerActor);
            containerActorProps.A_SETANGLE(containerActorProps.angle-4, SPF_INTERPOLATE);
            containerActorProps.startup_delayer = 20;
            containerActorProps.rotation_delayer = 0;
            containerActorProps.spinAround = true;
        }
    }

    override void deactivate(actor activator)
    {
        super.deactivate(activator);
        if(containerActor)
        {
            if(screenActor)
            {
                screenActor.destroy();
            }
            Usetag = "$ACT_ACTIVATE";
            A_PLAYSOUND("Analyser/deactivate", CHAN_AUTO, 1.0, 0);
            let containerActorProps = BIOANALYSER_CONTAINERS(containerActor);
            containerActorProps.spinAround = false;
            containerActorProps.rotation_delayer = 2;
            containerActorProps.A_SETANGLE(containerActorProps.angle+4);
            containerActorProps.A_STOPSOUND(CHAN_5);
        }       
    }

    default 
    {
        tag "$OBJECT_BIOANALYSER";
        BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
        PainSound "impact/hardmetal";
        radius 35;
        height 25;
        mass 600;
        Health 5;
        +SHOOTABLE;
        +USESPECIAL
        activation THINGSPEC_SWITCH;
        SelacoActor.UseTag "$ACT_ACTIVATE";
    }

    states {
        Inactive:
        Active:
        Spawn:
            VOXE L -1;
        Death:
            TNT1 A 0 {
                bUseSpecial = false;
                activationType = THINGSPEC_DEFAULT;
                if(screenActor)
                {
                    screenActor.destroy();
                }    
                if(containerActor)
                {
                    containerActor.destroy();
                }
                for(int x=0;x<getCvar("r_ParticleIntensity");x++) {
                    A_SpawnProjectile("circuitboardsmall", random(6,10), angle:random(0,360), CMF_AIMDIRECTION, pitch:frandom(-80,-170));
                }
                for(int x=0;x<35;x++)
                {
                    A_SPAWNITEMEX("LargeGlassParticle1", frandom(-15,15),frandom(-15,15), frandom(0,15), frandom(-2,2), frandom(-2,2), frandom(0,4));
                }
                for(int x=0; x<23;x++) {
                    A_SPAWNITEMEX("YellowSlimeSmall", frandom(-3,3), frandom(-20,-23), frandom(3,5), frandom(-1,1), frandom(-1,1), frandom(1,4));
                }
                A_PLAYSOUND("destruction/glassbreak", CHAN_AUTO, pitch:1.25);
                A_PLAYSOUND("impact/hardmetal", CHAN_AUTO, 1.0, 0, 0.6);               
            }
            VOXE B -1;
    }
}


class BIOANALYSER_SCREEN : SelacoActor
{
    default
    {
        +NOINTERACTION
        +WALLSPRITE
        alpha 0.9;
        RenderStyle "add";
        xscale 0.32;
        yscale 0.26;
    }
    states {
        Spawn:
            ALYS A 21;
        Looper:
            ALYS ABCDEFGHIJKLMNNNNOPQRSTUVWWWWW 1 BRIGHT;
            loop;
    }
}

class BIOANALYSER_CONTAINERS : SelacoActor
{
    bool spinAround;
    const ROTATION_PER_STAGE = 3;
    int currentRotation;
    int rotation_delayer;
    int startup_delayer;
    override void tick()
    {

        super.tick();
        // Animates the containers
        if(spinAround)
        {

            // Move container
            if(currentRotation <= ROTATION_PER_STAGE && rotation_delayer == 0 && startup_delayer < 0)
            {
                A_SETANGLE(angle+6, SPF_INTERPOLATE);
                currentRotation++;
            }

            // Start delay
            if(currentRotation == ROTATION_PER_STAGE)
            {
                rotation_delayer = 28;
            }

            // Bounce back a tiny bit during the delay
            if(rotation_delayer == 23)
            {
                A_SETANGLE(angle-5);
            }
            if(rotation_delayer == 1)
            {
                A_PLAYSOUND("Analyser/Rotate", CHAN_5, 0.6, 0);
            }
            // Reset delayer, reset animation.
            if(rotation_delayer > 0)
            {
                rotation_delayer--;
                currentRotation = 0;
            }
            startup_delayer--;
            // Device has turned on. Start playing sound effect.
            if(startup_delayer == 0)
            {
                A_PLAYSOUND("Analyser/Rotate", CHAN_5, 0.6, 0);
            }
        }
    }

    default 
    {
        +NOINTERACTION;
        +INTERPOLATEANGLES
    }

    states {
        Spawn:
            VOXE L -1;
    }
}

class LabEquipment_1 : LabEquipment { 
    default 
    {
        height 10;
    }
}
class LabEquipment_2 : LabEquipment { 
    default 
    {
        height 25;
    }
}
class LabEquipment_3 : LabEquipment { 
    default 
    {
        height 22;
    }
}
class LabEquipment_4 : LabEquipment { 
    default 
    {
        height 15;
    }
}
class LabEquipment_5 : LabEquipment { 
    default 
    {
        height 10;
    }
}
class LabEquipment_6 : LabEquipment { 
    default 
    {
        height 12;
    }
}
class LabEquipment_7 : LabEquipment { 
    default 
    {
        height 13;
    }
}
class LabEquipment_8 : LabEquipment { 
    default 
    {
        height 13;
    }
}
class LabEquipment_9 : LabEquipment {
    default 
    {
        height 10;
    }
}
class LabEquipment_10 : LabEquipment { 
    default 
    {
        height 9;
    }
}

class SMALL_TOOL : SMALL_PROP
{
    default{
        -NOBLOOD
        bloodtype "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary";
        PickupableDecoration.grabSound "OBJECT/PICKUP/SCREWDRIVER";
        PickupableDecoration.landingsound "OBJECT/LANDING/SCREWDRIVER";
    }
}

class Saw : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_SAW";
    }
}
class COPPERWIRE : SMALL_TOOL
 {
    default
    {
        +THRUACTORS;
        tag "$OBJECT_COPPERWIRE";
    }
}
class DRILL : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_DRILL";
    }
}
class HAMMER : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_HAMMER";
    }
}
class PLIER : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_PLIER";
    }
}

class SCREWDRIVER : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_SCREWDRIVER";
    }
} 

class SCREWDRIVER_A : SCREWDRIVER {}
class SCREWDRIVER_B : SCREWDRIVER {}
class SCREWDRIVER_C : SCREWDRIVER {}

class SOLDERING_IRON : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_SOLDERINGIRON";
    }
}
class WRENCH : SMALL_TOOL 
{
    default{
        tag "$OBJECT_WRENCH";
    }
}
class WRENCH_2 : SMALL_TOOL {
    default{
        tag "$OBJECT_WRENCH";
    }
}


class MULTIFUNCTIONMETER_A : SMALL_PROP 
{   
    default
    {
        +BUDDHA;
        PickupableDecoration.grabSound "PICKUP/MULTIMETER";
        +THRUACTORS
        tag "$OBJECT_MULTIMETER";
        height 4;
        radius 6;
    }
}


struct SecretThing {
    Vector3 location;
    Actor thing;
    int sector;
}


class MULTIFUNCTIONMETER_B : MULTIFUNCTIONMETER_A {
    
    SecretThing secrets[30];
    int8 numSecrets;
    int16 beepTime, curBeepTime;
    int8 closest;

    default {
        PickupableDecoration.HoldDistance 40;
        PickupableDecoration.HoldHeight -18.5;
        -PickupableDecoration.TranslucentPickup;
        -PickupableDecoration.HoldFromFront;
        +PickupableDecoration.HoldFromBack;
        PickupableDecoration.HoldOffset -10;
        -SelacoActor.SleepWhenIdle;
        //SelacoActor.SleepDistance 512;
        //+SelacoActor.WakeNearPlayer;
        +SELACOACTOR.ThruDecorations;
        -SelacoActor.DecorativeActor;
        -SelacoActor.Crushable;

        tag "$OBJECT_MULTIMETER_EPIC";
        
        +PUSHABLE;
        -THRUACTORS;
        height 7;           // A bit tall, but this is so we can pick it up again when sitting on other objects
    }

    override void PostBeginPlay() {
        Super.PostBeginPlay();

        findSecrets();
    }

    void findSecrets() {
        numSecrets = 0;

        // Find secret objects
        let iterator = ThinkerIterator.Create();
        Actor mobj;

        while(mobj = Actor(iterator.Next())) {
            SelacoItem si = SelacoItem(mobj);
            if(mobj.bCountSecret || mobj is 'SecretTrigger' || (si && si.bUpgradeItem)) {
                // Filter out some specific upgrade items
                if(si) {
                    WeaponKit wk = WeaponKit(si);
                    if(wk && wk.dontCountAsUpgrade()) {
                        continue;
                    }
                }

                secrets[numSecrets].location = mobj.pos;
                secrets[numSecrets].sector = -1;
                secrets[numSecrets].thing = mobj;
                numSecrets++;
            }
        }

        // Identify secret sectors
        for(int x = level.sectors.size() - 1; x >= 0; x--) {
            if(level.sectors[x].isSecret()) {
                // Find a reasonable center point for the sector
                Vector2 center = level.sectors[x].centerspot;

                // Get floor height
                double floorHeight = level.sectors[x].NextLowestFloorAt(center.x, center.y, -999999, 0 );
                secrets[numSecrets].location = (level.sectors[x].centerspot, floorHeight);
                secrets[numSecrets].sector = x;
                secrets[numSecrets].thing = null;

                numSecrets++;
            }
        }

        if(developer > 0) Console.Printf("Found %d secrets", numSecrets);

        closest = -1;
    }


    override void prepareForTravel(DawnLevelTransitioner trans) {
		Super.prepareForTravel(trans);
		numSecrets = 0;
	}


	override void finishedTravel(PlayerPawn newPP, DawnLevelTransitioner transitioner) {
		Super.finishedTravel(newPP, transitioner);
		
        findSecrets();
	}


    const UNIT_DIST = 256.0;
    const TICKS_PER_UNIT = 3.0;      // This will be multiplied by 5 because beep ticks happen every 5 game ticks
    

    override void tick() {
        super.tick();

        if(isPickedUp())
        {
            pitch = 45;
            WorldOffset.z += (7.5 - WorldOffset.z) / 6.0;
        } else {
            WorldOffset.z += (-WorldOffset.z) / 3.0;
        }

        if(health > 0 && level.mapTime % 5 == 0) {
            if(--beepTime <= 0 && isPickedUp() && WorldOffset.z >= 6.5) {
                beepDevice();
            }

            // Find closest point to determine new beeptime
            closest = -1;
            double cLength = double.MAX;
            for(int x = 0; x < numSecrets; x++) {
                // Make sure this is still a secret
                if(!secrets[x].thing && secrets[x].sector <= 0) continue;
                if(secrets[x].thing && !(secrets[x].thing.bCountSecret || secrets[x].thing is 'SecretTrigger' || (SelacoItem(secrets[x].thing) && SelacoItem(secrets[x].thing).bUpgradeItem))) continue;
                if(secrets[x].sector >= 0 && !level.sectors[secrets[x].sector].isSecret()) continue;

                Vector3 dv = pos - secrets[x].location;
                double d = dv.x*dv.x + dv.y*dv.y;// + dv.z*dv.z;

                if(d < cLength || x == 0) {
                    cLength = d;
                    closest = x;
                }
            }

            if(closest >= 0) {
                double dist = sqrt(cLength);
                int newBeepTime = clamp(int((dist / UNIT_DIST) * TICKS_PER_UNIT), 1, 150);

                // Beeptime will only go up after a beep, but can reduce before a beep
                if(beepTime <= 0) {
                    beepTime = newBeepTime;
                    curBeepTime = newBeepTime;
                } else if(newBeepTime < curBeepTime) {
                    beepTime -= curBeepTime - newBeepTime;
                    curBeepTime = newBeepTime;
                }
            } else if(beepTime <= 0) {
                beepTime = 150;
            }
        }
    }

    void beepDevice()
    {
        // Increase pitch as we get closer
        let dist = closest >= 0 ? (secrets[closest].location.xy - pos.xy).length() : 1024;
        double pitch = 1.15 - clamp((dist / 512.0) * 0.2, 0, 0.2);
        double vol = clamp(0.5 - (dist / 1024.0 * 0.5), 0, 0.5);
        spawnLight(65, 100, 180, 8, 0, shadowRequirement:-1, xOffset:-10, divisionSpeed:1.25, ignoreLightLimit:1);
        A_SPAWNITEMEX("BlueFlareSecretTracker", -8, -4, 16, flags:SXF_SETMASTER);
        A_PLAYSOUND("object/secrettracker/beep", CHAN_AUTO, 0.2 + vol, attenuation: ATTN_STATIC, pitch: pitch);
    }

    /*static double lengthSquared(Vector3 a) {
        return a.x*a.x + a.y*a.y + a.z*a.z;
    }*/
}


