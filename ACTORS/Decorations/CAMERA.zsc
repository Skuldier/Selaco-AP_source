class CameraNew : SelacoActor  {
    mixin MEDIUM_METAL_PROP;
    bool isRotatingCamera;
    int spawnAngle;
    int angleIncrement;
    int direction;
    const ROTATE_ANGLE = 25;
    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        A_SpawnItemEx("CameraFoot", -25, 4, 15, flags:SXF_SETMASTER);
        spawnAngle = angle;
        if(args[1] == 1)
        {
            isRotatingCamera = true;
        }
    }
	
		
	void cameraKilled()
	{
		if(self.tid > 0)
		{
			LineIdIterator lines = Level.CreateLineIdIterator(self.tid);
			textureid screenstatic = TexMan.CheckForTexture("NOISA0",TexMan.TYPE_ANY);			

			While(true)
			{
				int itline = lines.Next();				
				if(itline <= -1) {break;}
				
				Line CameraLine = Level.Lines[itline];
				
				CameraLine.Special = 0;
				CameraLine.Activation = 0;

				For(int cSide = 0; cSide < 2; cSide++)
				{
					Side checkSide = CameraLine.Sidedef[cSide];
					if(checkSide)
					{
						For(int portion = 0; portion < 3; portion++)
						{
							textureid thisTexture = checkSide.GetTexture(portion);
							if(thisTexture)
							{
								string thisTextureName = TexMan.GetName(thisTexture);
								thisTextureName = thisTextureName.left(7);
								if(thisTextureName == "TCAMTEX")
								{
									checkSide.SetTexture(portion,screenstatic);
								}
							}
						}
					}
				}
			}
			
		}
	}
    default
    {
        -SelacoActor.SlopeAlignment;
        +SHOOTABLE;
        +DONTTHRUST
        +NOGRAVITY;
        SelacoActor.SleepDistance 0;
        health 25;
        mass 500;
        height 20;
        radius 25;
    }
	States {
		Spawn:
			VOXE L 1;
            TNT1 A 0
            {
                if(isRotatingCamera)
                {
                    A_PLAYSOUND("CAMERA/LEFT", CHAN_AUTO, 0.3, attenuation: 1.2, pitch:0.5);
                    setStateLabel("ScanLeft");
                }
            }
            VOXE L -1;
        ScanLeft:
            VOXE L 1
            {
                angle+=1.1;
                invoker.angleIncrement++;
                if(invoker.angleIncrement >= ROTATE_ANGLE)
                {
                    setStateLabel("PauseLeft");
                }
            }
            loop;
        PauseLeft:
            VOXE L 75;
            TNT1 A 0 A_PLAYSOUND("CAMERA/RIGHT", CHAN_AUTO, 0.5, attenuation: 1.2, pitch:0.5);
            goto ScanRight;
        ScanRight:
            VOXE L 1
            {
                angle-=1.1;
                invoker.angleIncrement--;
                if(invoker.angleIncrement <= -1*ROTATE_ANGLE)
                {
                    setStateLabel("PauseRight");
                }
            }
            loop;
        PauseRight:
            VOXE L 75;
            TNT1 A 0 A_PLAYSOUND("CAMERA/LEFT", CHAN_AUTO, 0.5, attenuation: 1.2, pitch:0.5);
            goto scanLeft;
        Death:
            TNT1 A 0 
            {
                //ACS_NamedExecute("cameratip", 0, tid);
                A_PLAYSOUND("dest/snap", CHAN_AUTO);
                angle = spawnAngle;
			cameraKilled();
            }
            TNT1 A 0 A_SpawnProjectile ("SparkEmberUpward", 12, 0, random (0, 70), 2, random (0, 190));
			TNT1 A 0 A_SpawnItemEx("CameraLens", 0, 0, 0, frandom(-1, -2),frandom(-4, 4),0);
			TNT1 A 0 A_SpawnItemEx("CameraServo", 0, 0, 0, frandom(1, 2),frandom(-4, 4),0);
            TNT1 A 0 A_SpawnItemEx("CameraFootBroken", -24, 4, 15);
			stop;
	}
}

class CameraFoot : SelacoActor  {

    override void tick()
    {
        super.tick();
        if(!master && self is "CameraFoot")
        {
            destroy();
        }
    }

    default
    {
        +NOBLOODDECALS
        -SOLID
        +Shootable
        +NOGRAVITY
        +NOINTERACTION;
        MASS 100;
        Health 150;
        radius 20;
    }
	states {
		Spawn:
			VOXE L -1;
	}
}

class CameraFootBroken : CameraFoot { }

class CameraLens : SelacoActorDecorationMissile {
    
    default
    {
        +missile;
        +DoomBounce;
        gravity 0.8;
        radius 5;
        height 5;
        BounceFactor 0.5;
        BounceCount 3;
    }
	states {
		Spawn:
            TNT1 A 0;
        Looper:
            VOXE L 3
            {
                A_SETPITCH(pitch+15);
                EmitDefinition('SparkParticleDefinition', chance: 1.0, numTries: 12, angle:random(0,360), pitch:frandom(-45, 15), speed:frandom(3.4,5.5), offset:(frandom(-3,3), frandom(-3,3),frandom(-3,3)));	
            }
            loop;
		Death:
            TNT1 A 0 
            {
                A_SETPITCH(0);
            }
			VOXE LLLLLLLLLLLLLLLLLL random(35,45) A_SpawnProjectile ("SparkEmberUpward", 12, 0, random (0, 70), 2, random (0, 190));
			VOXE L -1;
	}
}

class CameraServo : CameraLens {
	states {
		Death:
			VOXE L -1;
			stop;
	}
}