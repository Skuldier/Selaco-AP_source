class WallDestroyer : SelacoActorStatic 
{
    override int takeSpecialDamage (Actor inflictor, Actor source, int damage, Name damagetype) {
		int res = Super.TakeSpecialDamage(inflictor, source, damage, damageType);
        if(validateDestruction(damagetype))
        {
            successfulDestruction();
        }
        return res;
	}

    // Override with whatever damagetype should trigger a success.
    virtual bool validateDestruction(Name damagetype)
    {
        return damageType == "ExplosiveImpact" || damageType == "MeleeImpactSplash";
    }


    virtual void successfulDestruction()
    {
        // Logic
        if(special == 0)
        {
            ACS_NamedExecuteWithResult("BreakWall", args[0]);
        }

        // Kill the actor
        die(self, self);
    }

	default {
        +HITSCANTHRU
        +NOGRAVITY;
        +DONTTHRUST
        +NOPAIN;
        +NOBLOOD;
        -BloodSplatter;
        +Shootable;
        +NOBLOODDECALS;
        +USESPECIAL
        +WALLSPRITE;
        +THRUACTORS;
        +DONTTHRUST
        +BUDDHA

        radius 25;
        height 30;
    	Scale 0.8;
	    alpha 0.75;
        Renderstyle "none";
    }
	States {
		Spawn:
            TNT1 A 0;
			CRAK A -1;
			stop;
	}
}

// A visible crack in the wall. Similar to a 1996 game.
class WallDestroyerCracked : WallDestroyer 
{

    override void postBeginPlay()
    {
        super.PostbeginPlay();	
        handleDecalShimmer();
    }


    void handleDecalShimmer()
    {
        // Check if the player has a Master Key, if so, brighten the decal
		PlayerPawn pawn=players[consolePlayer].mo;
		let d = Dawn(pawn);
		if(d.hasWeaponUpgrade('UpgradeShotgunMasterKey'))
		{
			setStateLabel("Shimmer");
		}	
    }

    override bool validateDestruction(Name damagetype)
    {
        bool hasMasterKey;
		PlayerPawn pawn=players[consolePlayer].mo;
		let d = Dawn(pawn);
		if(d)
        {
            hasMasterKey = (d.hasWeaponUpgrade("UpgradeShotgunMasterKey") && damagetype == "Shotgun");
        }

        return damageType == "ExplosiveImpact"  || hasMasterKey || damageType == "MeleeImpactSplash" ;
    }


    override void successfulDestruction()
    {
        Stats.AddStat(STAT_DEMOLITION, 1, 0);
        for(int x=0;x<20;x++)
        {
            A_SPAWNITEMEX("SpawnImpactSmokeBig", frandom(0,29), frandom(-35,35), frandom(-15,15), 0, frandom(-1,1), frandom(-1,1));
        }
        A_PLAYSOUND("DESTRUCTION/WALLCRACK", CHAN_AUTO, 0.8, 0, 0.9);
        super.successfulDestruction();
    }

	default {
	    Renderstyle "Translucent";
    }

	States {
		Spawn:
            TNT1 A 0;
			CRAK A -1;
			loop;
        Shimmer:
            CRAK Z -1;
            loop;
	}

}

// Ceiling crack
class WallDestroyerCrackedCeiling : WallDestroyerCracked {
	default {
        radius 3;
        height 3;
	    Renderstyle "Translucent";
    }
}

// A visible crack in the wall, can only be destroyed by Railgun
class WallDestroyerRailgun : WallDestroyerCracked 
{
    default
    {
        SelfLighting "454545";
        height 30;
        radius 30;
    }
    override bool validateDestruction(Name damagetype)
    {
        return (damageType == "RailAttack");
    }
}

class WallDestroyerCrackedYELLOW : WallDestroyer {


    override bool validateDestruction(Name damagetype)
    {
        return damageType == "YellowBarrel";
    }

	default {
        +BUDDHA
        SelfLighting "8c842b";
	    Renderstyle "Translucent";
    }

	States {
		Spawn:
            TNT1 A 0;
			VOXE L -1 {
                frame = random(0,4);
            }
			stop;
		Death:
			stop;
	}
}

class ExplosiveTarget : WallDestroyer
{

    override void successfulDestruction()
    {
        if(special == 0)
        {
            ACS_Execute(args[0]);
        }
    }
}


class DamageTrigger : WallDestroyer {

    override int takeSpecialDamage (Actor inflictor, Actor source, int damage, Name damagetype) 
    {
        int res = Super.TakeSpecialDamage(inflictor, source, damage, damageType);
		die(self,self);
        return res;
	}

    default 
    {
        tag "Damage Trigger";
        damageFactor 10000;
        health 400;
        height 5;
        radius 40;
        BloodType "Stacked_Sparks_lite", "Stacked_Sparks_lite", "Stacked_Sparks_lite";
    }
    states
    {
        death:
			TNT1 A 0 ACS_Execute(args[0]);
            stop;
    }
}

class RadiusTrigger : SelacoActor {
	//$Category SelacoFeatures
    default {
	    +STANDSTILL
	    +NOGRAVITY
	    +NOPAIN
	    +SHOOTABLE
        +useSpecial
        +NOINTERACTION
	    -SOLID
	    +THRUACTORS
	    tag "Radius Trigger";
	    Health 100000;
    }
	states {
		Spawn:
			TNT1 A 0;
        Looper:
			TNT1 A 5
            {
                PlayerPawn pawn = players[0].mo;
                let d = Dawn(pawn);
                if(players[consoleplayer].mo && distance3D(players[consoleplayer].mo) <= args[0])
                {
                    setStateLabel("Death");
                }
            }
			loop;
		Death:
            TNT1 A 0 
            {
                ACS_Execute(args[1], 0);
                destroy();
            }
            TNT1 A 0;
			stop;
	}
}

class MasterMarker : MapMarker 
{
    meta string mapIcon, legendIcon;
    meta string mapLabel;

    bool isCleared;

    private int MapMarkerFlags;

    property MapLabel   : MapLabel;
    property MapIcon    : MapIcon;
    property LegendIcon : LegendIcon;

    flagdef FollowingIcon               : MapMarkerFlags, 0;    // This icon will follow the master
    flagdef ShowsInLegend               : MapMarkerFlags, 1;    // Show on legend in automap 

    default {
        +NOINTERACTION;
        scale 0.12;
        MasterMarker.MapIcon "DBGABX";
        +MasterMarker.ShowsInLegend;
    }


    override void BeginPlay() {
        if(getClassName() == "StorageCabinetUnlocked") {
            Stats.AddStat(STAT_STORAGECABINETS_OPENED , 1, 0);
        }
        args[2] = 1;
        A_SetArg(2,1);

        super.BeginPlay();
    }

    override void PostBeginPlay() {
        Super.PostBeginPlay();

        updateMapIcons(getCvar("g_iconSize"), getCvar("g_enablemapicons"), getCvar("g_showcompletedicons"));

        // Required so legend shows up in map and updateMapIcons is called
        // If the map label is empty we won't show either
        if(bShowsInLegend || Default.mapLabel == "") {
            LocalLevelHandler.Instance().NewMapMarkerAdded(self);
        }
    }

    override void OnDestroy() {
        let handler = LocalLevelHandler.Instance();
        if(handler && !bDestroyed) {
            handler.mapMarkerDeleted(self);
        }
        Super.OnDestroy();
    }

    override void tick() {
        super.tick();
        
        if(master && bFollowingIcon) {
            A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
        }
    }

    virtual void updateMapIcons(int size, bool enable, bool showCompleted) {
        switch(size) {
            case 1: A_SetScale(0.2); break;
            case 2: A_SetScale(0.3); break;
            case 3: A_SetScale(0.5); break;
        }

        if(!enable) {
            A_SetRenderStyle(1.0, STYLE_None);
        } else if(enable && !isCleared) {
            A_SetRenderStyle(1.0, STYLE_Normal);
        }
    }

	//float iconSize;
}

class MasterMarkerCleared : MasterMarker 
{

    default {
        -MasterMarker.ShowsInLegend;
    }

    override void PostBeginPlay() {
        super.PostBeginPlay();
        isCleared = true;
    }

    override void updateMapIcons(int size, bool enable, bool showCompleted) {
        super.updateMapIcons(size, enable, showCompleted);
        if(enable && showCompleted) {
            A_SetRenderStyle(1.0, STYLE_Normal);
        }  else {
            A_SetRenderStyle(1.0, STYLE_NONE);
        }
    }
}

class PlasmaShieldActor : SelacoActor {

    protected int shieldFlags;
    flagdef weakShield          :  shieldFlags, 0; // Weak Shields are blue shields, these have less complexity

	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		if((inflictor) && ((inflictor is "PlasmaProjectilePlayer" && !bWeakShield)) || MeansOfDeath == "MeleeImpactTaser" || MeansOfDeath == "StunningShock" )
        {
            A_EXPLODE(5, 200, flags: XF_EXPLICITDAMAGETYPE, damageType:"StunningShock");
        }
        Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}


    default {
        +SelacoActor.ThruDecorations;
        +SelacoActor.thruplayers; 
        +SelacoActor.EnemyProjectilePassThru;
        +SelacoActor.DisallowGravityManipulation;
        -SelacoActor.AllowGravityManipulation;
	    +NOGRAVITY
        +STANDSTILL
		+WALLSPRITE
        +SHOOTABLE
        -REFLECTIVE
		+ROLLSPRITE;
        +NOBLOODDECALS;
        -SOLID  
        +CASTSPRITESHADOW 
		SelacoActor.SleepDistance 0;
        MASS 1500;
        Painchance 255;
        radius 28;
        Health 255;
        height 55;
        RenderStyle "add";
        BloodType "RedPlasmaPuff", "RedPlasmaPuff", "RedPlasmaPuff";
		damageFactor "Plasma", 3.5;
        damageFactor "MeleeImpact", 10;
        damageFactor "MeleeImpactTaser", 10000;
        damageFactor "StunningShock", 1000;
        scale 0;
		yscale 0.24;
        Alpha 0.4;
    }   
}

// Controls icons that spawn near enemies. In case we want to use them for things beyond just Squad Leaders
class EnemyRings : SelacoActor {

    int particleLifetime;
    string particleColor;
    property ParticleColor : particleColor;
/*     override void tick() {
        super.tick();
        if(master) {
            if(level.time % 2 == 0) {
                for(int x=0;x<=360;x+=30) {
                    A_SpawnParticle(particleColor, SPF_FULLBRIGHT, lifetime:random(10,14), size:4, angle:random(0,360),xoff:20,velz:2, fadestepf:frandom(0.08,0.1));
                }            
            }
        }
    } */
    default {
        SELACOACTOR.sleepDistance 0;
	    +NOGRAVITY;
        +NOINTERACTION;
	    scale 0.45;
    }

    default {
        EnemyRings.ParticleColor "Red";
    }
}

// Runs specified action when destroyed
class Padlock : SelacoActor
{
    default
    {
        +SelacoActor.DisAllowGravityManipulation
        -SelacoActor.slopealignment;
        +SHOOTABLE
        +NOGRAVITY
        +DONTTHRUST
        +USESPECIAL
        +NOBLOODDECALS
        radius 10;
        height 10;
        health 10;
        -PUSHABLE
        SelfLighting "070707";
		BloodType "";
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Xdeath:
        Death:
            TNT1 A 0;
            TNT1 A 0 A_SpawnDefinedParticleProjectile("BulletImpactEffectMetalZpuffTransparantSmallDefinition");
            TNT1 A 0 A_SPAWNITEMEX("Padlock_top", 3, 0, 16, frandom(1,1.5), frandom(-0.2,0.2));
            TNT1 A 0 A_SPawnItemEx("Padlock_bottom", 3, 0, 0, frandom(0.3,0.7), frandom(-0.2,0.2));
            TNT1 A 0 A_PLAYSOUND("PADLOCK/BREAK", CHAN_AUTO);
            stop;
    }
}

class Padlock_top : SelacoActorDecorationMissile 
{ 
    default
    {
        radius 2;
        bouncecount 2;
    }
    override void bounceEffects()
    {
        EmitDefinition('ShortSpark360ParticleDefinition', chance: 1.0, numTries: 15, angle:random(0,259), pitch:frandom(-25, -15), speed:frandom(-1.4,-2.5), offset:(frandom(-3,3), frandom(-3,3),frandom(-3,3)), velocity:(frandom(0.4,1), frandom(0.4,1), frandom(1,4)));
        A_PLAYSOUND("impact/fanslam", CHAN_AUTO, 0.25);
    }
}

class Padlock_bottom : Padlock_top 
{

}

// Spawns around Squadmates and follow them around.
class SquadMemberRing : EnemyRings {
	States {
		Spawn:
            TNT1 A 0;
			SQDL B 1 bright {
                if(master) {
                    A_Warp(AAPTR_TARGET, 0, 0, 0, 0, WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_NOCHECKPOSITION);
                } else {
                    destroy();
                }
            }
			loop;
	}
}

class SquadLeaderAura : EnemyRings {
    default {
        EnemyRings.ParticleColor "yellow";
    }
	States {
		Spawn:
            TNT1 A 0;
			SQDL A 1 bright {
                if(master) {
                    A_Warp(AAPTR_TARGET, 0, 0, 0, 0, WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_NOCHECKPOSITION);
                } else {
                    destroy();
                }
            }
			loop;
	}
}

class SquadLeaderIcon : SelacoActor {
    default {
        SelacoActor.sleepdistance 0;
        scale 0.20;
        +NOINTERACTION;
    }
	States {
		Spawn:
            TNT1 A 0;
			SQDL C 1 bright {
                if(master) {
                    A_Warp(AAPTR_TARGET, 0, 0, 80, 0, WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_NOCHECKPOSITION);
                } else {
                    destroy();
                }
            }
			loop;
	}
}

class SquadMemberIcon : SelacoActor {
    default {
        scale 0.20;
        SelacoActor.sleepdistance 0;
        +NOINTERACTION;
    }
	States {
		Spawn:
            TNT1 A 0;
			SQDL D 1 bright {
                if(master) {
                    A_Warp(AAPTR_TARGET, 0, 0, 80, 0, WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_NOCHECKPOSITION);
                } else {
                    destroy();
                }
            }
			loop;
	}
}

class SetSoundScape : SectorAction 
{
	Default
	{
		Health SECSPAC_Enter;
	}

	override bool TriggerAction (Actor triggerer, int activationType)
	{
		if (activationType & SECSPAC_Enter && triggerer.player != null)
		{
            ACS_NamedExecuteWithResult("SetEAX", args[0]);
            return true;
		}
        return false;
	}

}

// Used to find AOS Speaker locations for Zscript
class AOS_SPEAKER : SelacoActorStatic
{
    void playVoiceLine(string voiceLine, string subtitle)
    {
        A_PLAYSOUND(voiceLine, CHAN_VOICE, getCvar("snd_dialogvolume"));
        Notification.Subtitle("$CHARACTER_AOS", subtitle, 10.0);
    }

    default
    {
        +NOINTERACTION;
    }
    states
    {
        Spawn:
            TNT1 A -1;
            stop;
    }
}