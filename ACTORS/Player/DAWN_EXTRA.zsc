// This file exists just to keep the mostly duplicated GZDoom code seperate from the DAWN class
// IE: For readability 
extend class Dawn {
	struct AutoAimTarget {
		Actor target;
		double score;
		Vector3 pos;
	};

	AimTracer autoAimTracer;
    AutoAimTarget aimTargets[20];
	int numAimTargets;
	int lastPainSound;
	double headVel;		// Velocity of head travel after dying
	Vector3 deltaDeathVel;

	bool altAttackDown;
	transient int weaponWheelUp;

	// Bitmask: Keep track of what levels we have notified the player about
	Array<int> levelCompletion;

	const PAIN_SOUND_TIMEOUT = 30;
	const BOB_HEIGHT_THRESHOLD = 80; // Distance required from the floor before we stop bobbing.

	bool hasCompletedLevelGroup(int group) {
		if(levelCompletion.find(group) < levelCompletion.size()) return true;
		return false;
	}

	void setCompletedLevelGroup(int group) {
		if(levelCompletion.find(group) < levelCompletion.size()) return;
		levelCompletion.push(group);
	}

	override bool Grind(bool items) {
        return Super.Grind(items);
    }

	action void A_DawnPain() {
		if(level.totalTime - invoker.lastPainSound > PAIN_SOUND_TIMEOUT && invoker.WaterLevel < 3) {
			invoker.lastPainSound = level.totalTime;
			A_PAIN();
		}
	}

    void DawnCheckWeaponFire() {
		let player = self.player;
		let weapon = SelacoWeapon(player.ReadyWeapon);
        
		if (weapon == NULL || player == null)
			return;

		if(!automapactive && player.camera == self && waterLevel < 3) {
			// Check for fire. Some weapons do not auto fire.
			if ((player.WeaponState & WF_WEAPONREADY) && (player.cmd.buttons & BT_ATTACK) && (!curLadder || player.ReadyWeapon is 'RoaringCricket'))
			{
				if (!player.attackdown || !weapon.bNoAutofire)
				{
					player.attackdown = true;
					FireWeapon (NULL);
					return;
				}
			} else if(!holdingObject) {	// holding object code will handle unsetting attackdown
				player.attackdown = false;
			}
			
			if ((player.WeaponState & WF_WEAPONREADYALT) && (player.cmd.buttons & BT_ALTATTACK) && (!curLadder || (player.ReadyWeapon is 'RoaringCricket' && !weapon.hasUpgradeClass("AltFireCricketZoom"))))
			{
				if (!altAttackDown || !weapon.bNoAutofire)
				{
					altAttackDown = true;
					FireWeaponAlt (NULL);
					return;
				}
			}
			else
			{
				altAttackDown = false;
			}
		} else {
			altAttackDown = false;
			player.attackdown = false;
		}
	}


	static const string markerColors[] = {"RedMarker", "BlueMarker", "YellowMarker", "GreenMarker", "PurpleMarker"};
	int currentMarkerIndex;
	void placeMarker(int index = -1)
	{

		string markerClass = markerColors[index >= 0 ? index : currentMarkerIndex];
		bool foundDuplicate;

		if(index >= 0) currentMarkerIndex = index;	// Reset marker index to manual selection
		else {
			// Check if there's a duplicate nearby, only if this isn't a manual color selection
			for(int x;x<markerColors.size()-1;x++)
			{
				if(markerColors[x] && checkProximity(markerColors[x],125))
				{
					foundDuplicate = true;
					console.printf("Found: %s", markerColors[x]);
					markerClass = markerColors[x];
					break;
				}
			}
		}
		
		FLineTraceData RemoteRay;
		double pz = height * 0.5 - floorclip + player.mo.AttackZOffset*player.crouchFactor;
		LineTrace(angle,4096, pitch,offsetz: pz,offsetforward:10, data: RemoteRay);
		if (RemoteRay.HitType) {
			// Get the hit location
			vector3 hitLocation = RemoteRay.HitLocation;
			
			// We need to move it a few units towards the player to prevent it from clipping into walls
			vector3 hitNormal = RemoteRay.HitDir;
			float spawnDistance = -30.0;
			vector3 spawnLocation = hitLocation + hitNormal * spawnDistance;

			// Spawn the marker at the offset position
			spawn(markerClass, spawnLocation);
		}

		// Increment the marker index and wrap around to the start if needed
		if(!foundDuplicate || index >= 0)
		{
			currentMarkerIndex++;
			if(currentMarkerIndex >= markerColors.size())
			{
				currentMarkerIndex = 0;
			}
		}
	}


    override void TickPSprites() {
		let player = self.player;
		let pspr = player.psprites;

		while (pspr) {
			// Destroy the psprite if it's from a weapon that isn't currently selected by the player
			// or if it's from an inventory item that the player no longer owns. 
			if ((pspr.Caller == null ||
				(pspr.Caller is "Inventory" && Inventory(pspr.Caller).Owner != pspr.Owner.mo) ||
				(pspr.Caller is "WeaponBase" && pspr.Caller != pspr.Owner.ReadyWeapon)))
			{
				pspr.Destroy();
			}
			else
			{
				pspr.Tick();
			}

			pspr = pspr.Next;
		}

		if ((health > 0) || (player.ReadyWeapon != null && !player.ReadyWeapon.bNoDeathInput))
		{
			if (player.ReadyWeapon == null)
			{
				if (player.PendingWeapon != WP_NOCHANGE) {
					player.mo.BringUpWeapon();
				} else {
					// When there is no weapon, we still need to check button presses
					if(!(player.cmd.buttons & BT_ALTATTACK)) {
						altAttackDown = false;
					}
				}
			}
			else
			{
				CheckWeaponChange();
				if (player.WeaponState & (WF_WEAPONREADY | WF_WEAPONREADYALT))
				{
					DawnCheckWeaponFire();
				}
				// Check custom buttons
				CheckWeaponButtons();
			}
		}
	}


	// ValidTargets can contain lower level classes, for instance you can include 'PickupableDecoration' or 'SelacoMug'
	// For human/alien targets we might want to focus on head-height aim
	// TODO: Special handling for head-height of each type of enemy
	Actor FindAutoAimTarget(Array< class<Actor> > validTargets, double maxAngle = 20, double distance = 512, bool headHeight = false, double minRadius = 10, double minHeight = 10, bool gravityTargets = false) {
		Vector3 viewPos = Pos;
		viewPos.z = Player.viewz;
		Vector3 dir = LookAtTracer.VecFromAngle(Angle, Pitch);

		// TODO: Do we really need the linetrace? If this function is expecting fuzzy aim this might/
		// actually point to something farther away that we did not intend to target
		// First do a linetrace, if that hits something directly we probably want that object
		if(!autoAimTracer) autoAimTracer = new('AimTracer');
		/*autoAimTracer.validTargets.Copy(validTargets);
		autoAimTracer.onlyActor = null;
		autoAimTracer.ignoredActor = self;
		
		if(autoAimTracer.Trace(viewPos, CurSector, dir, distance, TRACE_NoSky)) {
			if(autoAimTracer.Results.HitType == TRACE_HitActor) {
				return autoAimTracer.Results.HitActor;
			}
		}*/

		// If the linetrace fails, scan the crosshair area and pick the closest-to-center object
		// TODO: Weight selection based on distance as well as angle from center
		// TODO: For props maybe weight selection based on size as well, or at least filter out small ones
		Actor closest = null;
		Vector2 ang = (Angle, Pitch);
		double minAng = maxAngle;
		numAimTargets = 0;

		for (let i = BlockThingsIterator.Create(self, 512); i.Next();) {
			Actor t = i.thing;

			if (t == self) {
				continue;
			} else if(validTargets.Size() > 0) {
				bool found = false;

				for(int x = 0; x < validTargets.Size(); x++) {
					if(t is validTargets[x]) {
						found = true;
						break;
					}
				}

				if(!found) continue;
			}

			// Adjust height to center or head-height
			Vector3 tCenter = t.pos;
			tCenter.z += t.height * (headHeight ? 0.8 : 0.5);
			
			// Compute how close the other actor is to the player's crosshairs.
			Vector3 sphericalCoords = LevelLocals.SphericalCoords(viewPos, tCenter, ang);
			double angleFromCenter = sphericalCoords.XY.Length();

			if (angleFromCenter < minAng && t.height >= minHeight && t.radius >= minRadius) {
				// Generate a score based on angle from center and distance
				// Larger score is less desirable of a target
				double score = angleFromCenter + ((tCenter - viewPos).Length() * 0.1);
				if(gravityTargets) {
					let sa = SelacoActor(t);
					if(sa && sa.bHighPriorityGravTarget) {
						score -= 10;
					}
				}

				// Insert into the list, sorted
				for(int x = 0; x <= numAimTargets && x < aimTargets.Size(); x++) {
					if(aimTargets[x].score > score || numAimTargets == 0) {
						// Shuffle targets upwards
						for(int y = MIN(aimTargets.Size() - 1, numAimTargets); y > x; y--) {
							aimTargets[y].target = aimTargets[y - 1].target;
							aimTargets[y].score = aimTargets[y - 1].score;
							aimTargets[y].pos = aimTargets[y - 1].pos;
						}

						if(numAimTargets < aimTargets.Size()) numAimTargets++;
						aimTargets[x].target = t;
						aimTargets[x].score = score;
						aimTargets[x].pos = tCenter;
						break;
					}
				}
			}
		}

		if(numAimTargets > 0) {
			// Print list
			/*for(int x = 0; x < numAimTargets; x++) {
				Console.Printf("Target: %s Score: %0.3f", aimTargets[x].target.getClassName(), aimTargets[x].score);
			}*/

			for(int x = 0; x < numAimTargets; x++) {
				let t = aimTargets[x].target;

				// Make sure we can actually reach that object with a line trace
				autoAimTracer.validTargets.Clear();
				autoAimTracer.onlyActor = t;
				autoAimTracer.ignoredActor = self;

				if(	autoAimTracer.Trace(viewPos, CurSector, (aimTargets[x].pos - viewPos).Unit(), distance, TRACE_NoSky) && 
					autoAimTracer.Results.HitType == TRACE_HitActor && 
					autoAimTracer.Results.HitActor == t) {
					closest = t;
					break;
				}
			}
		}

		return closest;
	}

	override void CheckPitch() {
		if(menuActive != Menu.Off || automapactive) {
			return;
		}

		Super.CheckPitch();
	}

	override void DeathThink ()
	{
		let player = self.player;
		//int dir;
		//double delta;

		player.Uncrouch();
		TickPSprites();

		// Set head velocity if we just hit the ground
		if(!player.onground && (pos.Z <= floorz)) {
			if(deltaVel.Z <= 0) {
				headVel += deltaDeathVel.Z;
			}
		}

		player.onground = (pos.Z <= floorz);
		if (self is "PlayerChunk")
		{ // Flying bloody skull or flying ice chunk
			player.viewheight = 6;
			player.deltaviewheight = 0;
			if (player.onground)
			{
				if (Pitch > -19.)
				{
					double lookDelta = (-19. - Pitch) / 8;
					Pitch += lookDelta;
				}
			}
		}
		else if (!bIceCorpse)
		{ // Fall and bounce off the ground (if not frozen)
			player.deltaviewheight = 0;

			if(player.onground) {
				headVel -= 0.35;
			}

			player.viewheight += headVel;

			if (player.viewheight < 6)
			{	
				// Bounce
				if(headVel < 0 && player.onground) headVel = MIN(6, headVel * -0.25);
				player.viewheight = 6;
			}
			if (Pitch < 0)
			{
				Pitch += 3;
			}
			else if (Pitch > 0)
			{
				Pitch -= 3;
			}
			if (abs(Pitch) < 3)
			{
				Pitch = 0.;
			}
		}
		player.mo.CalcHeight ();
			
		if (player.attacker && player.attacker != self)
		{ // Watch killer
			/*double diff = deltaangle(angle, AngleTo(player.attacker));
			double delta = abs(diff);
	
			if (delta < 10)
			{ // Looking at killer, so fade damage and poison counters
				if (player.damagecount)
				{
					player.damagecount--;
				}
				if (player.poisoncount)
				{
					player.poisoncount--;
				}
			}
			delta /= 8;
			Angle += clamp(diff, -5., 5.);*/
		}
		else
		{
			if (player.damagecount)
			{
				player.damagecount--;
			}
			if (player.poisoncount)
			{
				player.poisoncount--;
			}
		}		

		// Commented out for now, the death menu is responsible for respawning the player now
		/*if ((player.cmd.buttons & BT_USE || player.cmd.buttons & BT_USER1 ||
			((deathmatch || alwaysapplydmflags) && sv_forcerespawn)) && !sv_norespawn)
		{
			if (Level.maptime >= player.respawn_time && ((player.cmd.buttons & BT_USE || player.cmd.buttons & BT_USER1) && player.Bot == NULL)) {
				player.playerstate = (multiplayer || level.AllowRespawn || sv_singleplayerrespawn || G_SkillPropertyInt(SKILLP_PlayerRespawn)) ? PST_REBORN : PST_ENTER;
				if (special1 > 2)
				{
					special1 = 0;
				}
			}
		}*/
		deltaDeathVel = Vel;
	}


	// Validation system for Quick Saves
	// Defaults to autosave type, otherwise is quicksave
	void checkSaveValidation(bool isQuicksave = false, int enemyRange = 2000) {
		PlayerPawn pawn=players[consolePlayer].mo;
		let d = Dawn(pawn);
		d.beginSaveValidation = false;
		d.quicksaveTimerCurrent++;

		if(isQuicksave)
		{
			if(d.quicksaveTimerCurrent >= d.QUICKSAVE_DELAY_TIMER) {
				// Check 1 - Check if the player is playing Hardcore Mode
				if(d.countinv("HardcoreMode")) {
					denySave("$DENIEDSAVE_HARDCORE", isQuicksave);
					return;
				}

				// Skip Check 2, 3 and 4 if the player has the Save Scum mutator
				bool shouldRunExtraValidation = !(g_allowsavescumming && skill <= SKILL_CAPTAIN);
				if(shouldRunExtraValidation) {
					// Check 2 - Player is not in a critical state
					if(d.countinv("DangerStateActive")) {
						denySave("$DENIEDSAVE_DANGERSTATE", isQuicksave);
						return;
					}

					// Check 3 - Check if enemies have seen Dawn recently and if any of they are close.
					if(d.seenByEnemySaveValidation)
					{
						ThinkerIterator it = ThinkerIterator.Create("SelacoEnemy");
						SelacoEnemy enemyActor = SelacoEnemy(it.Next());

						for (; enemyActor; enemyActor = SelacoEnemy(it.Next())) 
						{
							if(enemyActor && EnemySoldier(enemyActor)  && enemyActor.target) {
								EnemySoldier(enemyActor).saveValidationChecker();
							}
							if(!(enemyActor.target is "Dawn") || enemyActor.dawnNearbyCooldown > 0 || enemyActor.distance3DSquared(d) > 2000*2000)
							{
								continue;
							}
							denySave("$DENIEDSAVE_ALERTEDENEMY", isQuicksave);
							return;
						}
					}

					// Check 4 - No nearby hazard -- This must be improved.
					BlockThingsIterator it2 = BlockThingsIterator.Create(d, 600);
					Actor hazardousActor; 
					while (it2.Next()) {
						hazardousActor = it2.thing;
						let hazardousActorProps = SelacoActor(hazardousActor);
						if((hazardousActorProps) && hazardousActorProps.bDangerousActor && d.Distance2DSquared(hazardousActor) < 400*400) {
							denySave("$DENIEDSAVE_DANGEROUOBJECT", isQuicksave);
							return;
						}
					}
				}
			}
			d.A_playsound("UI/QUICKSAVE", CHAN_AUTO, 0.7);
		}
		saveAccepted(isQuicksave);
	}

	void saveAccepted(bool isQuicksave)
	{
		PlayerPawn pawn=players[consolePlayer].mo;
		let d = Dawn(pawn);

		// No errors, start save game.
		d.A_PRINTBOLD("");
		d.quicksaveTimerCurrent = QUICKSAVE_DELAY_TIMER;
		d.beginSaveValidation = false;
	
		//d.ACS_NamedExecute("StartSave", 0);
		if(isQuicksave) LevelEventHandler.StartQuickSave();
		else LevelEventHandler.StartAutoSave();
	}
	
	void denySave(string denyMessage = "$DENIEDSAVE_DANGER", bool isQuicksave = false)
	{
		string localizedMessage = stringTable.localize(denyMessage);
		PlayerPawn pawn=players[consolePlayer].mo;
		let d = Dawn(pawn);
		d.A_PLAYSOUND("UI/DENYQUICKSAVE", CHAN_AUTO);
		d.A_PRINTBOLD(string.format("\c[orange]%s", localizedMessage));		
	}

	void onItemPickedUp(Inventory item, int amount = 1) {
		// Notify current crosshair so it can animate
		if(player) {
			let weapon = SelacoWeapon(player.ReadyWeapon);
			if(weapon && weapon.activeCrosshair) {
				weapon.activeCrosshair.onItemPickedUp();
			}
		}

		
		let si = SelacoItem(item);
		if(si && si.pickupTag != "" && amount > 0) {
			// If we picked up a SelacoItem, add it to the pickup element
			// Special case, if we are picking up health and we are over max, report this as bonus health
			if(si is "HealingItem" && healingItem(si).bAllowOverHealing && player.health > getMaxHealth()) {
				LevelEventHandler.addItemPickup("BonusHealthDummy", amount);
			} else LevelEventHandler.addItemPickup(si.getClass(), amount);
		}
	}

	// Tried to pick up an item that is full
	void onItemFull(Inventory item, int amount = 1) {
		let si = SelacoItem(item);
		if(si && si.pickupTag != "") {
			LevelEventHandler.addItemFull(si.getClass());
		}
	}

	void onFoodEaten(FoodItem food, int amount) {
		// Use health shard as template for food eating
		LevelEventHandler.addItemPickup("HealthShardPickup", amount);
	}

	override void CalcHeight()
	{
		let player = self.player;
		double angle;
		double bob;
		bool still = false;

		// Regular movement bobbing
		// (needs to be calculated for gun swing even if not on ground)

		// killough 10/98: Make bobbing depend only on player-applied motion.
		//
		// Note: don't reduce bobbing here if on ice: if you reduce bobbing here,
		// it causes bobbing jerkiness when the player moves from ice to non-ice,
		// and vice-versa.
		if (player.cheats & CF_NOCLIP2)
		{
			player.bob = 0;
		}
		// Reduce view bob when far from the floor.
		else if (abs(pos.z-floorz) >= BOB_HEIGHT_THRESHOLD && !bOnMobj)
		{
			player.bob = 0.25;
		}
		else
		{
			player.bob = player.Vel dot player.Vel;
			if (player.bob == 0)
			{
				still = true;
			}
			else
			{
				player.bob *= player.GetMoveBob();

				if (player.bob > MAXBOB)
					player.bob = MAXBOB;
			}
		}

		double defaultviewheight = ViewHeight + player.crouchviewdelta;

		if (player.cheats & CF_NOVELOCITY)
		{
			player.viewz = pos.Z + defaultviewheight;

			if (player.viewz > ceilingz-4)
				player.viewz = ceilingz-4;

			return;
		}

		if (still)
		{
			if (player.health > 0)
			{
				angle = Level.maptime / (120 * TICRATE / 35.) * 360.;
				bob = player.GetStillBob() * sin(angle);
			}
			else
			{
				bob = 0;
			}
		}
		else
		{
			angle = Level.maptime / (20 * TICRATE / 35.) * 360.;
			bob = player.bob * sin(angle) * (waterlevel > 1 ? 0.25f : 0.5f);
		}

		// move viewheight
		if (player.playerstate == PST_LIVE)
		{
			player.viewheight += player.deltaviewheight;

			if (player.viewheight > defaultviewheight)
			{
				player.viewheight = defaultviewheight;
				player.deltaviewheight = 0;
			}
			else if (player.viewheight < (defaultviewheight/2))
			{
				player.viewheight = defaultviewheight/2;
				if (player.deltaviewheight <= 0)
					player.deltaviewheight = 1 / 65536.;
			}
			
			if (player.deltaviewheight)	
			{
				player.deltaviewheight += 0.25;
				if (!player.deltaviewheight)
					player.deltaviewheight = 1/65536.;
			}
		}
		
		if (player.morphTics || player.cheats & CF_FLY || bFlyCheat || !g_viewbob)
		{
			bob = 0;
		}
		player.viewz = pos.Z + player.viewheight + (bob * clamp(ViewBob, 0. , 1.5)); // [SP] Allow DECORATE changes to view bobbing speed.
		if (Floorclip && player.playerstate != PST_DEAD
			&& pos.Z <= floorz)
		{
			player.viewz -= Floorclip;
		}
		if (player.viewz > ceilingz - 4)
		{
			player.viewz = ceilingz - 4;
		}
		if (player.viewz < floorz + 4)
		{
			player.viewz = floorz + 4;
		}
	}
}


// Tracer to check for actors that are not blocked by walls
// With specific class support, or specific actor
class AimTracer : LineTracer {
	Array< class<Actor> > validTargets;
    Actor ignoredActor, onlyActor;

    // Ignore walls in return, but block on them
    override ETraceStatus TraceCallback() {
        // Linedefs
        if(Results.HitType == TRACE_HitWall) {
            if(Results.HitLine.Flags & Line.ML_BLOCKEVERYTHING) {
                return TRACE_Stop;
            }

            if(Results.Tier == TIER_Middle) {
				if(Results.HitLine.flags & (Line.ML_BLOCKING | Line.ML_BLOCKEVERYTHING | Line.ML_BLOCKPROJECTILE | Line.ML_BLOCKHITSCAN)) {
					return TRACE_Stop;
				}
				return TRACE_Skip;
            }
        }


        // Actors
        if(Results.HitType == TRACE_HitActor) {
            if(Results.HitActor == null) {
                return TRACE_Skip;  // Avoid a null pointer crash, this scenario is not ideal
            }

			// If we are only searching for one actor, skip everything else
			if(onlyActor && Results.HitActor != onlyActor) return TRACE_Skip;

            // Skip the player
            if(Results.HitActor == ignoredActor) return TRACE_Skip;

			// Only select valid targets
			if(validTargets.Size()) {
				bool found = false;

				for(int x = 0; x < validTargets.Size(); x++) {
					if(Results.HitActor is validTargets[x]) {
						found = true;
						break;
					}
				}

				
				if(!found) return TRACE_Skip;
			}
        }

		return TRACE_Stop; // Return STOP ends the raycast with the last hit object/line
	}
}

const WORLD_MARKER_DEPTH = 8;
class MarkerClass : Interactable { 
	

	actor automapIcon;
	actor spinnerIcon;
	bool fadeActors; // Called when the player presses use on a Marker
	bool cockIsANerd;

	array<actor> spawnedMarkerItems; // We have to kill these actors when replaced, so store everything we spawn in an array
 
	override void postbeginPlay()
	{
		super.postbeginPlay();
		if(master)
		{
			A_PRINTBOLD("Got Master.");
			A_FACE(master);
		}
		A_PLAYSOUND("ui/marker/place", CHAN_AUTO);

		// Find if this marker already exists in the world. If so, delete.
		ThinkerIterator it = ThinkerIterator.Create("MarkerClass");
		MarkerClass markerActor = MarkerClass(it.Next());
		for (; markerActor; markerActor = MarkerClass(it.Next())) {
			if(markerActor.getClassName() == getClassName() && (markerActor != self))
			{
				markerActor.die(markerActor, markerActor);
			}
		}

		spawnAutomapIcon();
		spawn3DPointer();
		spawn3DSpinner();
	}

	void spawnAutomapIcon()
	{
		String automapClassName;
		automapClassName.AppendFormat("%s%s", getClassName(), "Automap");
		[cockIsANerd, automapIcon] = A_SPAWNITEMEX(automapClassName);
		spawnedMarkerItems.push(automapIcon);		
	}

	void spawn3DPointer()
	{
		float xOffset;
		String worldMarkerClassName;
		worldMarkerClassName.AppendFormat("%s%s", getClassName(), "World", 0.24);		
		for(int x=0;x<WORLD_MARKER_DEPTH;x++)
		{
			actor worldMarkerActor;
			bool success;
			xOffset+=0.2;
			[success, worldMarkerActor] = A_SPAWNITEMEX(worldMarkerClassName, xOffset, 0, 25, flags:SXF_SETMASTER);
			worldMarkerActor.A_FACE(master);
			spawnedMarkerItems.push(worldMarkerActor);
		}
	}

	void spawn3DSpinner()
	{
		String spinnerClassName;
		spinnerClassName.AppendFormat("%s%s", getClassName(), "WorldSpinner");
		[cockIsANerd, spinnerIcon] = A_SPAWNITEMEX(spinnerClassName, 0, 0, 0);	
		spawnedMarkerItems.push(spinnerIcon);
	}

	// Kill automap icon 
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) 
	{
		if(spawnedMarkerItems.size() > 0)
		{
			for(int x=0;x<spawnedMarkerItems.size();x++)
			{
				if(spawnedMarkerItems[x])
				{
					spawnedMarkerItems[x].destroy();
				}
			}
		}
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}


	override void tick()
	{
		super.tick();
		if(fadeActors && spawnedMarkerItems.size() > 0)
		{
			for(int x=0;x<spawnedMarkerItems.size();x++)
			{
				if(spawnedMarkerItems[x])
				{
					spawnedMarkerItems[x].A_FADEOUT(0.1);
					if(spawnedMarkerItems[x] && spawnedMarkerItems[x].alpha <= 0.05)
					{
						die(self,self);
					}
				}
			}
		}
	}

	override void activate(actor activator)
	{
		A_PLAYSOUND("ui/marker/Remove", CHAN_AUTO);
		fadeActors = true;
		bUseSpecial = false;
		activationtype = THINGSPEC_DEFAULT;
	}


	default
	{
		+USESPECIAL
		+SELACOACTOR.PREVENTSLEEP
		SelacoActor.UseTag "$INTERACT_REMOVE";
		tag "$OBJECT_MARKER";
		scale 0.5;
		gravity 100;
		Activation THINGSPEC_ACTIVATE;
		radius 30;
		height 70;
	}

	states
	{
		death:
			stop;
	}

}

// Holder
class RedMarker : MarkerClass { 
	states
	{
		Spawn:
			TNT1 A -1;
			stop;
	}
}
class GreenMarker : RedMarker { }
class YellowMarker : RedMarker { }
class BlueMarker : RedMarker { }
class PurpleMarker : RedMarker { }

class RedMarkerAutomap : MasterMarker
{
	default {
		MasterMarker.MapLabel   "$MAPICON_USER";
		MasterMarker.MapIcon    "1CONAX";
	}
	states
	{
		spawn:
			1CON A -1;
			stop;
	}
}

class RedMarkerWorld : SelacoActor { 
	const ANIMATION_UNITS_DOWNWARD = 12; // How many units do we move this downward after spawning?
	int downwardUnits;
	bool completedFade;

	override void beginPlay()
	{
		super.beginPlay();
		setOrigin((pos.x, pos.y, floorz+25), true);
	}

	override void tick()
	{
		super.tick();
		A_SETANGLE(angle-4);
		if(downWardUnits <= ANIMATION_UNITS_DOWNWARD)
		{
			setOrigin((pos.x, pos.y, pos.z-1), true);
			downwardUnits++;
		}
		if(alpha < 1.0 && !completedFade)
		{
			A_FADEIN(0.02);
			if(alpha >= 1.0)
			{
				completedFade = true;
			}
		}
	}

	default
	{
		+INTERPOLATEANGLES;
		scale 0.2;
		alpha 0;
		RenderStyle "Translucent";
		+NOINTERACTION
		+WALLSPRITE;
		SelacoActor.SleepDistance 1500;
	}
	states
	{
		Spawn:
			2CON A -1 BRIGHT;
			stop;
	}
}

class BlueMarkerWorld : RedMarkerWorld { 
	states
	{
		Spawn:
			2CON B -1 BRIGHT;
			stop;
	}
}
class YellowMarkerWorld : RedMarkerWorld { 
	states
	{
		Spawn:
			2CON C -1 BRIGHT;
			stop;
	}
}
class GreenMarkerWorld : RedMarkerWorld { 
	states
	{
		Spawn:
			2CON D -1 BRIGHT;
			stop;
	}
}
class PurpleMarkerWorld : RedMarkerWorld { 
	states
	{
		Spawn:
			2CON E -1 BRIGHT;
			stop;
	}
}

class RedMarkerWorldSpinner : SelacoActor
{
	bool completedFade;
	override void tick()
	{
		super.tick();
		A_SETANGLE(angle+2);
		if(alpha < 1.0 && !completedFade)
		{
			A_FADEIN(0.02);
			if(alpha >= 1.0)
			{
				completedFade = true;
			}
		}
	}

	override void beginPlay()
	{
		super.beginPlay();
		setOrigin((pos.x, pos.y, floorz+2), true);
	}


	default
	{
		+INTERPOLATEANGLES;
		+FLATSPRITE;
		+NOINTERACTION;
		RenderStyle "TRANSLUCENT";
		scale 0.2;
		alpha 0;
		SelacoActor.SleepDistance 1500;
	}

	states
	{
		Spawn:
			3CON A -1 BRIGHT;
			stop;
	}
}
class BlueMarkerWorldSpinner : RedMarkerWorldSpinner
{
	states
	{
		Spawn:
			3CON B -1;
			stop;
	}
}
class YellowMarkerWorldSpinner : RedMarkerWorldSpinner
{
	states
	{
		Spawn:
			3CON C -1;
			stop;
	}
}
class GreenMarkerWorldSpinner : RedMarkerWorldSpinner
{
	states
	{
		Spawn:
			3CON D -1;
			stop;
	}
}
class PurpleMarkerWorldSpinner : RedMarkerWorldSpinner
{
	states
	{
		Spawn:
			3CON E -1;
			stop;
	}
}
class BlueMarkerAutomap : MasterMarker
{
	default {
		MasterMarker.MapLabel   "$MAPICON_USER";
		MasterMarker.MapIcon    "1CONBX";
	}
	states
	{
		spawn:
			1CON B -1;
			stop;
	}
}
class YellowMarkerAutomap : MasterMarker
{
	default {
		MasterMarker.MapLabel   "$MAPICON_USER";
		MasterMarker.MapIcon    "1CONCX";
	}
	states
	{
		spawn:
			1CON C -1;
			stop;
	}
}
class GreenMarkerAutomap : MasterMarker
{
	default {
		MasterMarker.MapLabel   "$MAPICON_USER";
		MasterMarker.MapIcon    "1CONDX";
	}
	states
	{
		spawn:
			1CON D -1;
			stop;
	}
}
class PurpleMarkerAutomap : MasterMarker
{
	default {
		MasterMarker.MapLabel   "$MAPICON_USER";
		MasterMarker.MapIcon    "1CONEX";
	}
	states
	{
		spawn:
			1CON E -1;
			stop;
	}
}