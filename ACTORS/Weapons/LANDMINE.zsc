class PulseMineThrown : SelacoActor
{
    bool hasAnnihilation;
    override void postbeginPlay()
    {
        super.postbeginPlay();

		PlayerPawn pawn=players[0].mo;
		let weapon = SelacoWeapon(pawn.FindInventory('MineWeapon'));

        // Speed up when Annihilation
        if(weapon && weapon.hasUpgradeClass('AltFireMineAnnihilation') == 1)
        {
            hasAnnihilation = true;
            A_ScaleVelocity(4);
        }
    }

    override void tick()
    {
        // Check for VAC-BOTS during the flight
        super.tick();
        if(vel.length() > 0) {
            BlockThingsIterator it = BlockThingsIterator.Create(self, 5);
            Actor currentMo;
            while (it.Next()) {
                currentMo = it.thing; // Get the Actor it's currently on
                if (!currentMo || !(currentMo is "VAC_BOT") || Distance2DSquared(currentMo) > 15*15)
                    continue;
    
                let vacBotActor = VAC_BOT(currentMo);
                if(vacBotActor.bDoesCleaning)
                {
                    vacBotActor.A_SPAWNITEMEX("PulseMinePlaced", flags:SXF_SETMASTER);
                    vacBotActor.enterMineMode();
                    destroy();
                }
    
            }
        }
    }

    default {
        SelacoActor.SleepDistance 0;
        Radius 15;
        Height 10;
        Speed 11;
        gravity 0.3;
        PROJECTILE;
        BounceFactor 0.01;
        BounceCount 3;
        Gravity 0.95;
        -NOGRAVITY;
        +THRUGHOST;
        +THRUACTORS;
        -BLOODSPLATTER;
        +CANNOTPUSH;
        +EXPLODEONWATER;
        +INTERPOLATEANGLES;
    }
    States  {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 ThrustThingZ(0,random(12,14),0,1);
        Looper:
            VOXE L 1;
            loop;
        Death:
        XDeath:
            TNT1 A 0 
            {
                if(hasAnnihilation)
                {
                    actor mineActor;
                    bool success;
                    [success, mineActor] = A_SPAWNITEMEX("PulseMinePlaced");
                    mineActor.setStateLabel("Explode");
                    for(int x=0;x<65;x++)
                    {
                        A_SpawnItemEx ("LargeExplosionSmokeSlow",frandom(-130,130), frandom(-130,130),frandom(0,135), 0, frandom(-0.6,0.6), angle:random(0,360));
                    }
                    destroy();
                }
            }
            VOXE L 5;
            TNT1 A 0 {
                A_PlaySound("pulsemine/ACTIVE", CHAN_AUTO, 0.7, 0, 1.0, 0, 1.05);
                A_SpawnItemEx("BodyImpactSmokeSmall",frandom(-2,2), frandom(-2,2));
                A_SpawnItemEx("BodyImpactSmokeSmall",frandom(-2,2), frandom(-2,2));
                
            }
        WaitForFloor:
            VOXE L 2
            {
                if(vel.z == 0)
                {
                    setStateLabel("ArmMine");
                }
            }
            loop;
        ArmMine:
            VOXE LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL 1 {
                bNoInteraction = true;
                EmitDefinition('DebrisChunkParticleUpwardShortDefinition', chance: 0.75, numTries: 4, speed:-2, offset:(frandom(-5,5), frandom(-5,5), 0), scaleBoost:0.4, particleSpawnOffsets:5);
                if(random(0,1) == 1) {
                    A_SpawnItemEx("BodyImpactSmokeSmall",frandom(-2,2), frandom(-2,2));
                }
                A_CHANGEVELOCITY(0,0,-0.04, CVF_REPLACE);
                A_SETANGLE(angle+15, SPF_INTERPOLATE);
            }
            TNT1 A 0 A_SpawnItemEx("PulseMinePlaced", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION,0);
            Stop;
	}
}

class PulseMinePlaced : Interactable
{

    
    string oldTag;
    bool hasFaceHopper;
    bool hasSecondCharge;
    bool hasShockMine;
    bool hasAnnihilation;
    bool hasExtractor;
    bool primed;
    int explosionRange;
    int explosionDamage;
    int detonationRange;

    property DetonationRange : detonationRange;

    actor flareActor;
    bool flareActorSuccess;

    override void BeginPlay()
    {
        super.beginPlay();
		int totalClasses = AllClasses.size();
		for(int x = 0; x < totalClasses; x++) 
		{
			if(AllClasses[x] is 'SelacoWeapon')
			{
				Inventory i = players[0].mo.FindInventory((class<SelacoWeapon>)(AllClasses[x]));
				if(i)
				{
					if(i is "MineWeapon")
					{
						SelacoWeapon w = SelacoWeapon(i);
						explosionDamage = w.weaponDamage;
						explosionRange = w.weaponAreaOfEffect;
					}
				}
			}
		}

		PlayerPawn pawn=players[0].mo;
		let weapon = SelacoWeapon(pawn.FindInventory('MineWeapon'));

        if(weapon)
        {
            if(weapon.hasUpgradeClass('UpgradeMineRadius') == 1) 
            {
                explosionRange+=100;
            }
            if(weapon.hasUpgradeClass('UpgradeMineDamage') == 1) 
            {
                explosionDamage*=1.50;
            }
            if(weapon.hasUpgradeClass('UpgradeMineFaceHopper') == 1)
            {
                hasFaceHopper = true;
                detonationRange*=1.25;
            }
            if(weapon.hasUpgradeClass('AltFireMineShock') == 1) 
            {
                hasShockMine = true;
            }
            if(weapon.hasUpgradeClass('UpgradeMineExtractor') == 1) {
                hasExtractor = true;
                bUseSpecial = true;
                activationType = THINGSPEC_Activate;
            }
            if(weapon.hasUpgradeClass('AltFireMineSecondCharge') == 1)
            {
                explosionDamage*=0.75;
                hasSecondCharge = true;
                oldTag = getTag();
                // Change tag to show the amount of charges we've got left
                settag(string.format("%s (%d %s)", oldTag, 2, stringtable.localize("$CHARGES")));
            }
            if(weapon.hasUpgradeClass('AltFireMineAnnihilation') == 1)
            {
                hasAnnihilation = true;
                explosionDamage*=1.15;
                explosionRange*=1.15;
            }
        }
    }

    override void tick()
    {
        super.tick();
        // If mounted on top of VAC-BOT, follow the VAC_BOT
        if(master && master is "VAC_BOT")
        {
            A_Warp(AAPTR_MASTER, 0, 0, master.height-2, 0, WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_NOCHECKPOSITION);
        }

        // Hop towards target (Janky, for now.)
        if(target && primed && hasFaceHopper)
        {
            A_FACE(target);
            gravity = 0.25;
            A_CHANGEVELOCITY(0.7,0,0.5, CVF_RELATIVE);
        }

    }

    // Target found!
    void primeDetonator()
    {
        primed = true;
    }

    void detonate()
    {
        Radius_Quake (2, 54, 0, 15, 0);
        bFLOORCLIP = 0;
        A_AlertMonsters();
        damageType = "ExplosiveImpact";
        if(target && hasFaceHopper && target is "SelacoEnemy")
        {
            warpToTarget();
        }
        for(int x=0;x<5;x++)
        {
            A_SPAWNITEMEX("ScorchMarkFloor", frandom(-35,35), frandom(-35,35));
        }
        // KABOOM
        A_SETSIZE(-1,20);
        A_Explode(explosionDamage,explosionRange);
        A_SpawnItem("PrettyExplosionParticleRain");
        A_PlaySound("Explosion",3);
        
        // Allow the mine to explode again, but with reduced damage.
        if(hasSecondCharge)
        {
            ActivationType = THINGSPEC_SWITCH;
            bUseSpecial = false;
            explosionDamage*=0.75;
            hasSecondCharge = false;
            // Change tag to show the amount of charges we've got left
            settag(string.format("\c[darkgrey]%s (%d %s)", oldTag, 1, stringtable.localize("$CHARGE")));
            setStateLabel("LooperCD");
        } else
        {
            destroy();
        }
    }

    void warpToTarget()
    {
        SetOrigin((target.pos.x, target.pos.y, target.pos.z+5), true);
    }

    default {
        +FLOORCLIP
        +FRIENDLY
        +SHOOTABLE
        -EXPLODEONWATER
        +MOVEWITHSECTOR
        +NOBLOOD
        +THRUACTORS
        +INTERPOLATEANGLES
        -USESPECIAL;
        +SelacoActor.PreventSleep
        PulseMinePlaced.DetonationRange 160;
        Radius 10;
        Height 18;
        tag "$WEAPON_MINE";
        SelacoActor.UseTag "$INTERACT_DISARM";
        Activation THINGSPEC_DEFAULT;
        Mass 650;
        Health 10;
        Damagetype "ExplosiveImpact";
    }
	States    {
		Spawn:
			TNT1 A 0;
            TNT1 A 0 FindFloorCeiling();
        Looper:
			VOXE LLLLLLL 5
            {
                A_LookEx(LOF_NOSOUNDCHECK,0,detonationRange,0,360,"Death");
            }
			VOXE L 4 {
				A_LookEx(LOF_NOSOUNDCHECK,0,detonationRange,0,360,"Death");
				A_PlaySound ("Pulsemine/Pulsing", CHAN_AUTO);
                spawnLight(rColor:165, gColor:397, bColor:567, 35, 0, shadowRequirement:-1, overbright: 0, divisionSpeed:1.75, alwaysShow:1,weaponFlash:0, ignoreLightLimit: 1);
				[flareActorsuccess, flareActor] = A_SpawnItemEx("pulseMineFlare",0,0,6);
                flareActor.master = self;
			}
			loop;

		Active:
			TNT1 A 0 A_PLAYSOUND("Pulsemine/pulseDisable", CHAN_AUTO, 1.0, 0, 1.0, 0, 1.1);
            // If mine rests on VAC_BOT, remove Mine Mode from VAC_BOT
            TNT1 A 0 
            {
                if(master && master is "VAC_BOT")
                {
                    VAC_BOT(master).disengageMineMode();
                }
            }
			VOXE LLLLLL 1 {
				bNoGravity = true;
				if(random(0,1) == 1) {
					A_SpawnItemEx("BodyImpactSmokeSmall",frandom(-2,2), frandom(-2,2));
				}
				A_SETANGLE(angle-35, SPF_INTERPOLATE);
			}
			VOXE LLLLLLL 1 {
				if(random(0,1) == 1) {
					A_SpawnItemEx("BodyImpactSmokeSmall",frandom(-2,2), frandom(-2,2));
				}
				A_CHANGEVELOCITY(0,0,0.2);
				A_SETANGLE(angle-35, SPF_INTERPOLATE);
			}
			TNT1 A 0 A_SPAWNITEMEX("MineAmmoPickupSmall");
			Stop;

        LooperCD:
            VOXE L 30;
            goto looper;
		Death:
            TNT1 A 0
            {
                primeDetonator();
            }
			VOXE LLLLL 4 Bright {
				A_PlaySound ("Pulsemine/Pulsing");
				[flareActorsuccess, flareActor] = A_SpawnItem ("pulseMineFlare",0,6);
                flareActor.master = self;
			}
        CheckUpgrades:
            TNT1 A 0
            {
                // Shock Explosion instead of a normal explosion
                if(hasShockMine)
                {
                    hasShockMine = false;
                    setStateLabel("ShockExplosion");
                    A_SETTICS(1);
                } 
            }
        Explode:
            VOXE L 1;
			EXPL A 0 {
                detonate();
            }
			Stop;
        ShockExplosion:
            TNT1 A 0
            {
                if(target && hasFaceHopper && target is "SelacoEnemy")
                {
                    warpToTarget();
                }
                bBuddha = true;
                A_SETSIZE(-1,20);
                damageType = "StunningShock";
                invoker.explosionDamage = 5;
                invoker.explosionRange*=1.25;
                if(getCvar("g_Screenshake") >= 1) 
                {
                    A_QuakeEx(1, 1, 1, 25, 0, 700, 0, 0, 0, 0, 0, 0, 2, 2, 4);
                }
                A_Explode(invoker.explosionDamage,invoker.explosionRange);
                A_STOPSOUND(CHAN_7);
                A_STOPSOUND(CHAN_6);
                A_PLAYSOUND("Sparks/Spawn", CHAN_AUTO);
                EmitDefinition('SparkOrbShorterDefinition', chance: 0.75, numTries: 180, angle:random(0,360), pitch:frandom(-90, 90), speed:frandom(0.3,0.6), velocity:(0,0,frandom(0,2)));
                A_PLAYSOUND("dest/JunctionBox", CHAN_AUTO, 1.0, 0, 0.6);
                A_SPAWNITEMEX("WhiteShockWave", 0, 0, 0);
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(0,6));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(0,6));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(0,6));
                for(int x=0;x<27;x++)
                {
                    A_SpawnItemEx ("LargeExplosionSmokeSlow",frandom(-30,30), frandom(-30,30),frandom(0,35), 0, frandom(-0.6,0.6), angle:random(0,360));
                }
            }
            VOXE LLLLLL 0 {
                A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-32, 32),frandom(-48, 48),frandom(0, 35));
			    A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-32, 32),frandom(-48, 48),frandom(0, 35));
                A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-43,35), frandom(15,20));
                //A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-35,35), frandom(-10,30));
               // A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-35,35), frandom(-10,30));
               destroy();
            }
            stop;
	}
}