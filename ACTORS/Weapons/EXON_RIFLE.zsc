///////////////////////////////////////////////
// +++ THIS FILE HAS BEEN STRIPPED DOWN FOR DEMO PURPOSES. ALL CONTENTS NOT REQUIRED FOR THE DEMO IS NOT IN HERE. +++
///////////////////////////////////////////////


Class UseGadget : Inventory  {	
	default {
		inventory.maxamount 1;
	}
}

Class HasCluster : Inventory {
	default {
		inventory.maxamount 1;
	}
}


// Increases magazine capacity
class UpgradeRifleAmmo : WeaponUpgrade {
	default {
		WeaponUpgrade.UpgradeImage 'UPGRD4';
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 1;
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.TechModuleRequirement 1;
		WeaponUpgrade.UpgradeName 			"$UPGRADE_AR_AMMO", "$UPGRADE_AR_AMMO_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_AR_AMMO_DESC";
		WeaponUpgrade.UpgradePointerPosition 	410, 205;
		WeaponUpgrade.UpgradePosition			125, 330;
		WeaponUpgrade.UpgradeCost          	200;

		WeaponUpgrade.MagazineSizeMod 			10;
	}
}

// Decreases recoil
class UpgradeRifleRecoil : WeaponUpgrade {
	default {
		WeaponUpgrade.UpgradeImage 'UPGRD32';
		Inventory.MaxAmount 1;
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_RIFLE_RECOIL", "$UPGRADE_RIFLE_RECOIL_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_RIFLE_RECOIL_DESC";
		WeaponUpgrade.TechModuleRequirement 1;
		WeaponUpgrade.UpgradePointerPosition 	640, 50;
		WeaponUpgrade.UpgradePosition			715, -120;
		WeaponUpgrade.UpgradeCost          	200;
		WeaponUpgrade.RecoilMod					-0.07;
	}	
}

// Framework Upgrade
class UpgradeRifleFramework : WeaponUpgrade {
	default {
		WeaponUpgrade.UpgradeImage 'UPGRD39';
		Inventory.MaxAmount 1;
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_RIFLE_FRAMEWORK", "$UPGRADE_RIFLE_FRAMEWORK";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_RIFLE_FRAMEWORK_DESC";
		WeaponUpgrade.TechModuleRequirement 3;
		WeaponUpgrade.UpgradePointerPosition 	510, 50;
		WeaponUpgrade.UpgradePosition			510, -100;
		WeaponUpgrade.UpgradeCost          	0;
		WeaponUpgrade.RecoilMod				-0.01;
		WeaponUpgrade.DamageMod				2;
		WeaponUpgrade.SpreadMod				-0.10;
	}	
}


// Increases ammo drop chance on kill
class UpogradeRifleSteadySupply : WeaponUpgrade {
	default {
		WeaponUpgrade.UpgradeImage 'UPGRD31';
		Inventory.MaxAmount 1;
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_RIFLE_STEADYSUPPLY", "$UPGRADE_RIFLE_STEADYSUPPLY_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_RIFLE_STEADYSUPPLY_DESC";
		WeaponUpgrade.TechModuleRequirement 1;
		WeaponUpgrade.UpgradePointerPosition 	440, 320;
		WeaponUpgrade.UpgradePosition			270, 425;
		WeaponUpgrade.UpgradeCost          	200;
	}	
}

// Reduces spread
Class UpgradeRifleSpread : WeaponUpgrade {
	default {
		Inventory.Amount 1;
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeImage 'UPGRD5';
		WeaponUpgrade.TechModuleRequirement 2;
		WeaponUpgrade.UpgradeName 			"$UPGRADE_AR_SPREAD", "$UPGRADE_AR_SPREAD_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_AR_SPREAD_DESC";
		WeaponUpgrade.UpgradePointerPosition 	30, 75;
		WeaponUpgrade.UpgradePosition			150, -60;
		WeaponUpgrade.UpgradeCost          300;
		WeaponUpgrade.SpreadMod				-0.25;
	} 
}


// Increases damage output
Class UpgradeRifleDamage : WeaponUpgrade { 	
	default {
		Inventory.Amount 1;
		WeaponUpgrade.UpgradeImage 'UPGRD11';
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_AR_DMG", "$UPGRADE_AR_DMG_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_AR_DMG_DESC";
		WeaponUpgrade.UpgradePointerPosition 	420, 45;
		WeaponUpgrade.UpgradePosition			350, -70;
		WeaponUpgrade.TechModuleRequirement 3;
		WeaponUpgrade.UpgradeCost          350;
		WeaponUpgrade.DamageMod				2;
		WeaponUpgrade.SpreadMod				0.25;
		WeaponUpgrade.RecoilMod				0.03;
	} 
}

// Decreases Reload Speed -- UNUSED, RELOAD WAS FAST ENOUGH!
/* Class UpgradeRifleReloadSpeed : WeaponUpgrade { 	
	override void onEnabled() {
		getWeapon("rifle").hasSpeedLoader = true;
		Super.onEnabled();
	}

	override void onDisabled() {
		getWeapon("rifle").hasSpeedLoader = false;
		Super.onDisabled();
	}

	default {
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeImage 'UPGRD8';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_AR_RELOAD", "$UPGRADE_AR_RELOADG_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_AR_RELOAD_DESC";
		WeaponUpgrade.UpgradePointerPosition 	555, 340;
		WeaponUpgrade.UpgradePosition			725, 460;
		WeaponUpgrade.TechModuleRequirement 3;
		WeaponUpgrade.UpgradeCost          200;
	} 
} */

Class UpgradeRiflePressurePoint  : WeaponUpgrade { 	
	default {
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeImage 'UPGRD35';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_AR_PRESSURE", "$UPGRADE_AR_PRESSURE";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_AR_PRESSURE_DESC";
		WeaponUpgrade.UpgradePointerPosition 	555, 340;
		WeaponUpgrade.UpgradePosition			725, 460;
		WeaponUpgrade.TechModuleRequirement 3;
		WeaponUpgrade.UpgradeCost          350;
	} 
}

// Decreases recoil and spread
class UpgradeRifleRecoil2 : WeaponUpgrade {
	default {
		WeaponUpgrade.UpgradeImage 'UPGRD5';
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_RIFLE_RECOIL2", "$UPGRADE_RIFLE_RECOIL_LONG2";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_RIFLE_RECOIL_DESC2";
		WeaponUpgrade.UpgradePointerPosition 	875, 80;
		WeaponUpgrade.UpgradePosition			875, -35;
		WeaponUpgrade.TechModuleRequirement 	4;
		WeaponUpgrade.UpgradeCost          	400;

		WeaponUpgrade.RecoilMod					-0.02;
		WeaponUpgrade.SpreadMod					-0.3;
	}
}

class UpgradeRifleMelee : WeaponUpgrade {
	override void onEnabled() {
		// @Cockatrice - We can NOT give the melee upgrade item here, because it points to this object! 
		// The object has to remain in the player inventory so we don't have to buy the upgrade every time
		// we want to enable it.
		// Replace countinv(meleeUpgradeName) with hasUpgradeClass(meleeUpgradeName) from now on
		//let r = Rifle(getWeapon("rifle"));
		//owner.A_GiveInventory(r.meleeUpgradeName, 1);
		Super.onEnabled();
	}
	override void onDisabled() {
		// @Cockatrice - We can NOT give the melee upgrade item here, because it points to this object! 
		// The object has to remain in the player inventory so we don't have to buy the upgrade every time
		// we want to enable it.
		// Replace countinv(meleeUpgradeName) with hasUpgradeClass(meleeUpgradeName) from now on
		//let r = Rifle(getWeapon("rifle"));
		//owner.A_TakeInventory(r.meleeUpgradeName, 1);
		Super.onDisabled();
	}
	default {
		WeaponUpgrade.TechModuleRequirement 	3;
		WeaponUpgrade.Weapon 				'rifle';
		WeaponUpgrade.UpgradeImage			'UPGRD17';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_MLE", "$UPGRADE_MLE_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_MLE_DESC";
		WeaponUpgrade.UpgradePointerPosition 	780, 220;
		WeaponUpgrade.UpgradePosition			860, 350;
	}	
}

/* Rifle Alt-Fires =========================*/
class AltFireRifleBurst : WeaponAltFire {
	default {
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$ALTFIRE_RIFLE_BURST", "$ALTFIRE_RIFLE_BURST";
		WeaponUpgrade.UpgradeDescription 	"$ALTFIRE_RIFLE_BURST_DESC";
	}

	override void onEnabled() {
		// Necessary for crosshair
		let r = Rifle(getWeapon("rifle"));
		if(r) r.burstFireModeHipfire = true;

		Super.onEnabled();
	}

	override void onDisabled() {
		// This is necessary to fix crosshair issues
		let r = Rifle(getWeapon("rifle"));
		if(r) r.burstFireModeHipfire = false;
		
		Super.onDisabled();
	}
}

class AltFireRifleBurstZoom : WeaponAltFire {
	default {
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$ALTFIRE_RIFLE_BURST_ZOOM", "$ALTFIRE_RIFLE_BURST_ZOOM";
		WeaponUpgrade.UpgradeDescription 	"$ALTFIRE_RIFLE_BURST_ZOOM_DESC";
	}

	override void onEnabled() {
		// Necessary for crosshair
		let r = Rifle(getWeapon("rifle"));
		if(r) r.burstFireModeZoom = true;

		Super.onEnabled();
	}

	override void onDisabled() {
		// This is necessary to fix crosshair issues
		let r = Rifle(getWeapon("rifle"));
		if(r) r.burstFireModeZoom = false;
		
		Super.onDisabled();
	}
}

class AltFireRifleZoom : WeaponAltFire {
	default {
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$ALTFIRE_ZOOM", "$ALTFIRE_ZOOM";
		WeaponUpgrade.UpgradeDescription 	"$ALTFIRE_RIFLE_ZOOM_DESC";
		WeaponAltFire.WorkshopOrder			-1;		// Zoom should always be first
	}
}

class AltFireRifleLauncher : WeaponAltFire {
	override void onEnabled() {
		getWeapon("rifle").isZooming = false;
		Super.onEnabled();
	}
	default {
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$ALTFIRE_RIFLE_LAUNCHER", "$ALTFIRE_RIFLE_LAUNCHER";
		WeaponUpgrade.UpgradeDescription 	"$ALTFIRE_RIFLE_LAUNCHER_DESC";
	}
}

class AltFireScarabMode : WeaponAltFire 
{
	override void onEnabled() 
	{
		getWeapon("rifle").isZooming = false;
		Super.onEnabled();
	}

	default 
	{
		WeaponUpgrade.Weapon 'rifle';
		WeaponUpgrade.UpgradeName 			"$ALTFIRE_RIFLE_SCARAB", "$ALTFIRE_RIFLE_SCARAB";
		WeaponUpgrade.UpgradeDescription 	"$ALTFIRE_RIFLE_SCARAB_DESC";
		WeaponAltFire.WorkshopOrder			999; // Always last
		-WeaponUpgrade.WorkshopPreview;
	}

}


class Rifle : SelacoWeapon
{
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		
		setCrosshair('RifleCrosshair');
	}

	override void swapAltFire() {
		super.swapAltFire();
		SetWeaponState("SwapZoom_UNZOOM");
	}

	override void PlayerIsFiring() {
		super.playerIsFiring();
		adjustedDamage = adjustedDamage + frandom(-3,3);
		// ALT FIRES
		if (burstFireModeHipfire == 0) {
			A_SetCrosshair(42);
		} else {
			A_SetCrosshair(16);
		}
	}

	action void attackSound()
	{
		A_PlaySound("WEAPON/MECHANICAL", CHAN_AUTO, 0.4);
		if(getCvar("g_legacyUC36Sound") == 1)
		{
			invoker.isFiring = 1;
			A_PLAYSOUND(invoker.WeaponSound, CHAN_WEAPON , 0.95, 1, pitch:1.1);
		}
		else
		{
			invoker.isFiring = 0;
			A_PLAYSOUND("rifle/testshot", CHAN_AUTO , getWeaponVolume(0.05)-0.1, 0, pitch:frandom(0.74,0.92));
		}
		A_PLAYSOUND("RIFLE/SHOT/FLAVOR1", CHAN_AUTO, getWeaponVolume(-0.05)-0.8, pitch:frandom(0.9,1.1));
	}

	action void spawnCosmeticBulletTracer() {
		if(pitch > -25 && pitch < 25 && level.time % 3 == 0)
		{
			A_RailAttack(-1, spawnofs_xy:8, 1, flags:RGF_NOPIERCING, pufftype:"RifleTracer", frandom(-6,6), spread_z:frandom(-4,4), range:1900, sparsity:13, driftspeed:1,spawnClass:"RifleTracer",spawnofs_z: -4);
		}
	}

	int flashFrame;
	bool ejectTheMagazine;
	int flashID;
	int loaded;
	float screenSpread;
	int shotsPerBurst;
	int shotsFired;
	int burstFireModeHipfire;
	int burstFireModeZoom;
	bool magRemoved;
	
	bool firstShotFired;
	int firstShotAngle;
	int firstShotPitch;
	// ALT FIRES:
	// 0 == MAIN
	// 1 == BURST FIRE
	default {
	//$Category Weapons/custom
		WeaponBase.AmmoGive1 30;
		WeaponBase.AmmoGive2 0;
		WeaponBase.AmmoType1 "RifleReserve";
		WeaponBase.AmmoType2 "RifleAmmo";
		WeaponBase.SelectionOrder 120;
		WeaponBase.SlotNumber 4;
		SelacoWeapon.BulletDamageToGlass 35;
		SelacoWeapon.rumbleIntensity 0.3;
		SelacoWeapon.WeaponOffsetIncrement 1.9;
		SelacoWeapon.lowAmmoThreshold 10;

		SelacoWeapon.WeaponDamage  26;

		SelacoWeapon.WeaponSpread 2.9;
		SelacoWeapon.weaponSpreadReductionSpeed 1.5; // Per tick
		SelacoWeapon.weaponSpreadIncreasePerShot 4.8; // Per shot
		SelacoWeapon.weaponSpreadMaximum 4.8;
		SelacoWeapon.weaponStatistic STAT_RIFLESHOT;

		SelacoWeapon.WeaponRecoil 0.17;
		SelacoWeapon.weaponRecoilReductionSpeed 0.03;
		SelacoWeapon.weaponRecoilIncreasePerShot 18;

		SelacoWeapon.weaponFireRate 4;
		SelacoWeapon.WeaponSound "weapons/uc36fire";
		SelacoWeapon.SlidingSprite "RIFX";
		SelacoWeapon.InteractionSprite "RIFT";
		SelacoWeapon.MeleeUpgradeName "UpgradeRifleMelee";
		SelacoWeapon.ReadySound "Weapons/rifle/ready";
		SelacoWeapon.deselectSound "Weapons/rifle/unready";
		SelacoWeapon.MagazineSize 30;
		SelacoWeapon.SupportsADS true;

		SelacoWeapon.AmmoColor "FF F9 7A";

		Inventory.Icon "WPNRIFLE";
		+FLOORCLIP;
		+FLOAT;
		+NOGRAVITY;
		+DONTGIB;
		AttackSound "None";
		Scale 0.25;
		Tag "UC-36 Assault Rifle";
	}


	States
	{

	Flashlight:
		OFLA A 1 BRIGHT;
		stop;
	Precache:
		RIF4 ABCDE 0;			// First few fire frames
		RIFO HGF 0;			// Ready frames
		RIF3 ABCDE 0;			// Fire
		RIF2 AB 0;			// Zoom
		RIF7 AB 0;			// Zoom
		RIFM ABCDE 0;		// MELEE
		RIFT ABCDEF 0;		// Interaction
		RIGS ABCDEF 0;
		RIGL ABCDEFGHIJKLMNOPQRSTUVW 0;
		MUZZ ABCDEF 1;
		Stop;				// PRECACHE MUST ALWAYS STOP;
	Steady:
		RIFX A 0;
		TNT1 A 1;
		Goto Ready;
		//TNT1 A 0 A_SetUserVar("user_weaponUpgraded", 0);
	Equip:
		TNT1 A 0 A_SetCrosshair(42);
		TNT1 A 0 A_SETTICS(invoker.WEAPON_SWAP_SPEED);
		TNT1 A 0 
		{
			invoker.checkLowAmmo();
		}
		RIF7 ABC 0;
		TNT1 A 0 A_EquipNewWeapon();
		RIFO HGFEDCBA 1 {
			S_WeaponOffset();
		}
		//RIF5 ABCDEFGHHHHHHHHIJKLMNO 2;
        //TNT1 A 0 A_SetCrosshair(16);
	Ready3:
		TNT1 A 0 {
			if(checkIfZooming()) {
				SetWeaponState("Ready3ButZoomed");
			}
		}
		RIFG A 1;
		goto ReallyReady;
	Ready3ButZoomed:
		RIF7 C 1;
	ReallyReady:
		TNT1 A 0 A_JumpIfInventory("ShowHands",1,"HandRemoved");
		TNT1 A 0 A_JumpIfInventory("PushButtonNow", 1, "PushButton");
		TNT1 A 0 {
			if(invoker.isGrenadeLauncherMode)
			{
				setWeaponState("Ready_GrenadeMode");
			}

			if (invoker.isFiring == 1) {
				A_STOPSOUND(CHAN_WEAPON);
				A_Playsound("weapons/uc36firee", CHAN_AUTO);
				invoker.isFiring = 0;
			}

			// Check if the player uses Zoom alt fire. If not, keep zoom disabled.
			if(invoker.hasUpgradeClass("AltFireRifleZoom") || invoker.hasUpgradeClass("AltFireRifleBurst") || invoker.hasUpgradeClass("AltFireRifleBurstZoom"))
			{
				if(checkIfZooming()) 
				{
					SetWeaponState("Ready_ZOOM");
				} 
			} else 
			{
				invoker.iszooming = false;
			}

		}

	Ready_NOZOOM:
		TNT1 A 1 {
				breathWobble("RIFG", 20);
				A_EnableWeaponShift();
				A_ZOOMFACTOR(1.0);
				if (CheckInventory("FlashLightOn", 1)) {
					A_Overlay(-217, "Flashlight");
				}
				invoker.SlidingSprite = "RIFX";
				CheckPlayerStates();
				invoker.screenSpread = 0.38;
				S_WeaponReady(WRF_ALLOWRELOAD);
/* 				dawn(player.mo).allowSlideState(); */
				S_WeaponOffset();
			}
		Loop;

    Ready_ZOOM:
		TNT1 A 0 {
			A_EnableWeaponShift(true, multiplier: 0.025);
			if (invoker.isFiring == 1) {
				//A_STOPSOUND(CHAN_WEAPON);
				//A_Playsound("weapons/uc36firee", CHAN_AUTO);
				invoker.isFiring = 0;
			}
			if (getCvar("g_ironsights") == 0) {
				SetWeaponState("ReadyOldSkool");
			}
		}
		TNT1 A 0 A_JumpIfInventory("ShowHands",1,"HandRemoved");
		TNT1 A 0 A_JumpIfInventory("PushButtonNow", 1, "PushButton");
		RIF2 D 1
			{
				S_WeaponOffset();
				A_SetCrosshair(3);
				CheckPlayerStates(1);
				CheckUnZoom();
				S_WeaponReady();
			}
		Loop;
	ReadyOldSkool:
		RIF7 C 1
			{
				if (CheckInventory("FlashLightOn", 1)) {
					A_Overlay(-217, "Flashlight");
				}    
				A_ZOOMFACTOR(zoomRange);
				A_SetCrosshair(16);
				CheckPlayerStates(1);
				CheckUnZoom();
				S_WeaponOffset();
				S_WeaponReady();
			}
		goto ReallyReady;

	Ready_GrenadeMode:
		RIGL I 1 {
				A_EnableWeaponShift();
				A_ZOOMFACTOR(1.0);
				CheckPlayerStates();
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			}
		Loop;

	ShatterWindow:
		TNT1 A 0 A_QuakeEx( 5, 4, 4, 10, 0, 20, 0, 0, 10, 10, 10, 6, 2, 2);
		RIF9 ABCD 2  {
				A_SetPitch(pitch + 1);
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			
		}
		RIF9 E 6  {
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
		}
		RIF9 DCBA 2  {
				A_SetPitch(pitch - 1);
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
		}
		goto Ready3;
	MoveGunDown:
		RIF6 ABCD 2  {
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			
		}
		RIF6 E 25  {
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
		}
		RIF6 DCBA 2  {
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
		}
		goto Ready3;

	AutoCrosshair:
		TNT1 A 0 A_SetCrosshair(42);
		goto Ready3;

	BurstCrosshair:
		TNT1 A 0 A_SetCrosshair(16);
		goto Ready3;


	ReadyADS:
	Unequip:
        TNT1 A 0 S_ZOOMFACTOR(1.0);
		TNT1 A 0 A_SetSpeed(0.3);
	    TNT1 A 0 A_PlaySound("weapons/changing", 1);
		TNT1 A 0 {
			invoker.isGrenadeLauncherMode = false;
			A_STOPSOUND(CHAN_WEAPON );
			setZoomStatus(false);
			invoker.isFiring = 0;
			A_UNEQUIPWEAPON();
		}
		TNT1 A 0 ACS_NamedExecute("AddHand", 0);
		RIFO AB 1;
		TNT1 A 0 {
			A_PlaySound("dawn/deselect", CHAN_AUTO);
		}
		RIFO CDEFGH 1 {
			//S_WeaponReady(WRF_NOFIRE);
			S_WeaponOffset();
		}
		TNT1 A 1;
		TNT1 AAAAAAAAAAAAAAAAAA 0 A_Lower();
		TNT1 A 1;
		Wait;

	FireScarab:
        TNT1 A 0 A_JumpIfInventory("RifleAmmo",1,2);
		TNT1 A 0 dryFire();
        Goto reloadweapon;
		TNT1 A 0;
		TNT1 A 0 {
			if(skill == SKILL_SMF)
			{
				// Bye.
				A_DIE();
			}
			// First shot? Intense shake!
			if(invoker.weaponSpread == invoker.adjustedSpread)
			{
				switch(getCvar("g_screenshake")) {
					case 1:
						A_QuakeEx(1, 1, 1 , 4, 0, 20, 0, 0, 10, 10, 10, 2, 1, 1, 1);
						break;
					case 2:
						A_QuakeEx(1, 1, 1 , 7, 0, 20, 0, 0, 10, 10, 10, 2, 1, 1, 1);
						break;
				}
			}
			invoker.flashID = random(0,1);
			invoker.playerIsFiring();
			emberEffect(emberCount:2);
			//attackSound();
			A_PLAYSOUND("WEAPONS/plasmafire", CHAN_AUTO, 1.0, pitch:0.8);
			A_SELACORECOIL(-1*invoker.adjustedRecoil + 0.04, 0, frandom(invoker.adjustedRecoil+0.43*-1, invoker.adjustedRecoil+0.43));
			invoker.adjustedWeaponOffset = frandom(-1*invoker.weaponOffsetIncrement, invoker.weaponOffsetIncrement);
		}
		RIFF A 1 {
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 0;
			} else
			{
				invoker.flashNumber = 2;
			}
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.15);
			invoker.flarePos = frandom(10,15);
			A_PLAYSOUND("weapon/mecha", 3, 0.30);
			A_SetCrosshair(44);
			S_WeaponReady(WRF_NOFIRE);
			A_FireProjectile("muzzleFlashSpawnerRifle",0,0,invoker.flarepos,5);
			switch(getCvar("g_screenshake")) {
				case 1:
					A_QuakeEx(frandom(0.5, 0.55), frandom(0.5, 0.55), frandom(0.150000, 0.200000) , 3, 0, 20, 0, 0, 10, 10, 10, 6, frandom(0.100000, 0.150000), frandom(0.100000, 0.150000));
					break;
				case 2:
					A_QuakeEx(1, 1, frandom(0.300000, 0.350000) , 4, 0, 20, 0, 0, 10, 10, 10, 6, frandom(0.4500000, 0.520000), frandom(0.350000, 0.450000));
					break;
			}
			A_FireProjectile("RifleCaseSpawn",5,0,17,7, 0, 18);
			ACS_NamedExecuteAlways("SpawnHudShake", 0, 4, 4, 3);
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.14, 0);
			S_WeaponOffset(frandom(0.5,1), invoker.adjustedWeaponOffset);
			A_FireProjectile("ScarabProjectile", 0, 0, 11, -5);
			S_ZOOMFACTOR(0.982);
			A_AlertMonsters();
		}
		RIFF B 1 {
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 1;
			} else
			{
				invoker.flashNumber = 3;
			}
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.1);
			S_WeaponReady(WRF_NOFIRE);
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.10, 0);
			S_WeaponOffset(frandom(2.2,3),invoker.adjustedWeaponOffset);
			S_ZOOMFACTOR(0.990);
			CheckPlayerStates();
		}
		RIFF C 1 {
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 2;
			} else
			{
				invoker.flashNumber = 4;
			}
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.1);
			S_WeaponReady(WRF_NOFIRE);
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.08, 0);
			S_WeaponOffset(frandom(3,3.5),invoker.adjustedWeaponOffset);
			S_ZOOMFACTOR(0.995);
			CheckPlayerStates();
		}
		RIFF D 1 {
			CheckPlayerStates();
			S_WeaponReady(WRF_NOFIRE);
			if (CheckInventory("FlashLightOn", 1)) {
					A_Overlay(-217, "Flashlight");
			}
			S_WeaponOffset(frandom(2,2.9),invoker.adjustedWeaponOffset);
			S_ZOOMFACTOR(0.995);
			if(countinv("RifleAmmo") == 0) {
				A_PLAYSOUND("WEAPONS/UC36EMPTY", CHAN_AUTO, 0.4, pitch:frandom(0.9,1.1));
			}
		}
		RIFG AAAA 1 {
			CheckPlayerStates();
			S_WeaponReady();
			A_Refire();
			S_WeaponOffset(1,invoker.adjustedWeaponOffset);
			if (CheckInventory("FlashLightOn", 1)) {
				A_Overlay(-217, "Flashlight");
			}
		}
		TNT1 A 0 A_SetCrosshair(42);
		TNT1 A 0 S_WeaponOffset(1);
		TNT1 A 0 A_Refire();
		TNT1 A 0 A_SetCrosshair(42);
		Goto ReallyReady;


    Fire:
		TNT1 A 0 {
			if(invoker.isGrenadeLauncherMode)
			{
				setWeaponState("FireGrenadeLauncher");
				return;
			}
		}
		TNT1 A 0 {
			if(checkIfZooming()) {
				SetWeaponState("FireZoomed");
				return;
			}
			if (altFireCheck("AltFireRifleBurst")) {
				SetWeaponState("BurstFire");
			} 
		}
		TNT1 A 0 {
			invoker.TakeWeaponAmmo();
		}
		TNT1 A 0 {
			// First shot? Intense shake!
			if(invoker.weaponSpread == invoker.adjustedSpread)
			{
				switch(getCvar("g_screenshake")) {
					case 2:
						A_QuakeEx(2, 2, 1 , 7, 0, 10, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 10, 10, 10, 2, 2, 0, 3);
					case 1:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 9, 9,2);
						invoker.firstShotFired = true;
						invoker.firstShotAngle = frandom(-0.2,0.2);
						invoker.firstShotPitch = frandom(-1.2,-1.6);
				}
			}
			A_SetPitch(pitch+invoker.firstShotPitch, SPF_INTERPOLATE);
			A_SETANGLE(angle+invoker.firstShotAngle, SPF_INTERPOLATE);
			invoker.flashID = random(0,1);
			invoker.playerIsFiring();
			emberEffect(emberCount:2);
			attackSound();
			A_SELACORECOIL(-1*invoker.adjustedRecoil + 0.04, 0, frandom(invoker.adjustedRecoil+0.43*-1, invoker.adjustedRecoil+0.43));
			invoker.adjustedWeaponOffset = frandom(-1*invoker.weaponOffsetIncrement, invoker.weaponOffsetIncrement);
		}
		TNT1 A 0 A_JumpIfInventory("Zoomed",1,"Fire2");
		RIFF A 1 {
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 0;
			} else
			{
				invoker.flashNumber = 2;
			}
			A_WeaponReady(WRF_NOPRIMARY);
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.15);
			invoker.flarePos = frandom(10,15);
			A_SetCrosshair(44);
			S_WeaponReady(WRF_NOFIRE);
			A_FireProjectile("muzzleFlashSpawnerRifle",0,0,invoker.flarepos,5);
			switch(getCvar("g_screenshake")) {
				case 1:
					A_QuakeEx(1, 1, 0, 3, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 0, 4, 3, 1, 0, 3);
					break;
				case 2:
					A_QuakeEx(1, 1, 0.5, 4, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 0, 4, 3, 1, 0, 3);
					break;
			}
			A_FIREPROJECTILE("GunFireSmoke",6,0,4, 0, 0,18);
			A_FIREPROJECTILE("GunFireSmoke",3,0,4, 0, 0,-90);
			A_FIREPROJECTILE("GunFireSmoke",4,0,5, 0, 0,18);
			A_FIREPROJECTILE("GunFireSmoke",3,0,3, 0, 0,-90);
			A_FireProjectile("RifleCaseSpawn",5,0,17,7, 0, 18);
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.14, 0);
			S_WeaponOffset(frandom(0.5,1), invoker.adjustedWeaponOffset);
			FireBullets(-1*invoker.adjustedSpread, invoker.adjustedSpread, -1, invoker.adjustedDamage, "HitPuffMachinegun", flags:FBF_NORANDOM);
			S_ZOOMFACTOR(0.982);
			A_AlertMonsters();
			//CheckPlayerStates();
		}
	Fire_Continue:
		RIFF B 1 {
			A_WeaponReady(WRF_NOPRIMARY);
			ACS_NamedExecuteAlways("SpawnHudShake", 0, 4, 4, 3);
			spawnCosmeticBulletTracer();
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 1;
			} else
			{
				invoker.flashNumber = 3;
			}
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.1);
			S_WeaponReady(WRF_NOFIRE);
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.10, 0);
			S_WeaponOffset(frandom(2.2,3),invoker.adjustedWeaponOffset);
			S_ZOOMFACTOR(0.990);
			CheckPlayerStates();
		}
		RIFF C 1 {
			A_WeaponReady(WRF_NOPRIMARY);
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 2;
			} else
			{
				invoker.flashNumber = 4;
			}
			A_PLAYSOUND("weapon/mecha", CHAN_AUTO, 0.2);
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.1);
			S_WeaponReady(WRF_NOFIRE);
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.08, 0);
			S_WeaponOffset(frandom(3,3.5),invoker.adjustedWeaponOffset);
			S_ZOOMFACTOR(0.995);
			CheckPlayerStates();
		}
		RIFF D 1 {
			A_WeaponReady(WRF_NOPRIMARY);
			if(invoker.firstShotFired)
			{
				invoker.firstShotFired = false;
				A_SetPitch(pitch-invoker.firstShotPitch, SPF_INTERPOLATE);
				A_SETANGLE(angle-invoker.firstShotAngle, SPF_INTERPOLATE);
				invoker.firstShotAngle = 0;
				invoker.firstShotPitch = 0;
			}
			else
			{
				if(random(0,100) <= 10)
				{
					A_PLAYSOUND("WEAPON/FIRSTPERSON/BULLETWHIZ", CHAN_AUTO, 0.9, pitch:1.0);
				}
			}
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.08, 0);
			CheckPlayerStates();
			S_WeaponReady(WRF_NOFIRE);
			if (CheckInventory("FlashLightOn", 1)) {
					A_Overlay(-217, "Flashlight");
				}
			S_WeaponOffset(frandom(2,2.9),invoker.adjustedWeaponOffset);
			S_ZOOMFACTOR(0.995);
			if(countinv("RifleAmmo") == 0) {
				A_PLAYSOUND("WEAPONS/UC36EMPTY", CHAN_AUTO, 0.7, pitch:frandom(0.7,0.8));
			}
		}
		RIFG AAA 1 {
			A_WeaponReady(WRF_NOPRIMARY);
			CheckPlayerStates();
			S_WeaponReady();
			A_Refire();
			S_WeaponOffset(1,invoker.adjustedWeaponOffset);
			if (CheckInventory("FlashLightOn", 1)) {
				A_Overlay(-217, "Flashlight");
			}
		}
		TNT1 A 0 A_SetCrosshair(42);
		TNT1 A 0 S_WeaponOffset(1);
		TNT1 A 0 A_Refire();
		TNT1 A 0 A_SetCrosshair(42);
		Goto ReallyReady;

	RifleShot:
		TNT1 A 0 {
			invoker.TakeWeaponAmmo();
		}
		RIFF A 1 {
			invoker.playerIsFiring();
			invoker.flashNumber = 0;
			if(upgradeCheck("UpgradeRifleDamage") == 0) {
				if(invoker.flashID == 0) {
					A_overlay(-215, "flash1");
					A_OverlayRenderStyle(-215, STYLE_ADD);
					A_OverlayRotate(-215, frandom(-5,5));
				} else {
					A_overlay(-215, "flash4");
					A_OverlayRenderStyle(-215, STYLE_ADD);
					A_OverlayRotate(-215, frandom(-5,5));
				}
			}
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.1);
			invoker.flashNumber++;
			A_PlaySound("rifle/semishot",CHAN_AUTO, 1.0, 0, 1.0, false, pitch:frandom(1.0, 1.2));
			invoker.xPos = frandom(-3.1, 3.1);
			invoker.yPos = frandom(-3.1, 3.1);
			S_WeaponOffset(2);
			FireBullets(-1*invoker.adjustedSpread +2.2, invoker.adjustedSpread -2.2, -1, invoker.adjustedDamage+1 , "HitPuffMachinegun", flags:FBF_NORANDOM);
			S_ZOOMFACTOR(0.982);
			A_FireProjectile("muzzleFlashSpawnerRifle",0,0,invoker.flarepos,5);
			switch(getCvar("g_screenshake")) {
				case 1:
					A_QuakeEx(1, 1, 0, 3, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 0, 4, 3, 1, 0, 1);
					break;
				case 2:
					A_QuakeEx(1, 1, 1, 4, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 0, 4, 3, 1, 0, 1);
					break;
			}
			A_SetAngle(angle + frandom(-0.9, 0.9));
			A_SetPitch(pitch + frandom(-0.2, -0.2));
			A_FIREPROJECTILE("GunFireSmoke",6,0,4, 0, 0,18);
			A_FIREPROJECTILE("GunFireSmoke",3,0,4, 0, 0,-90);
			A_FIREPROJECTILE("GunFireSmoke",4,0,5, 0, 0,18);
			A_FIREPROJECTILE("GunFireSmoke",3,0,3, 0, 0,-90);
			ACS_NamedExecuteAlways("SpawnHudShake", 0, 4, 4, 3);
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.14, 0);
			S_WeaponOffset(frandom(0.5,1), invoker.adjustedWeaponOffset);
			S_ZOOMFACTOR(0.982);
			A_AlertMonsters();
		}
		RIFF B 1 {
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.1);
			invoker.flashNumber++;
			if(upgradeCheck("UpgradeRifleDamage") == 1) {
				if(invoker.flashID == 0) {
					A_overlay(-215, "flash2E");
				} else {
					A_overlay(-215, "flash5E");
				}
			}
			S_WeaponOffset(3);
			S_ZOOMFACTOR(0.990);
		}
		RIFF C 1 {
			S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.1);
			invoker.flashNumber++;
			if(upgradeCheck("UpgradeRifleDamage") == 1) {
				if(invoker.flashID == 0) {
					A_overlay(-215, "flash3E");
				} else {
					A_overlay(-215, "flash6E");
				}
			}
			A_FireProjectile("RifleCaseSpawn",5,0,17,7, 0, 18);
			S_WeaponOffset(1);
			S_ZOOMFACTOR(0.995);
		}
		Goto BurstFire;

	BurstFire:
		TNT1 A 0;
		TNT1 A 0 {
			A_SetCrosshair(16);
			invoker.shotsPerBurst = 2;
			if (invoker.shotsFired <= invoker.shotsPerBurst) {
				invoker.shotsFired++;
				SetWeaponState("RifleShot");
			} else {
				invoker.shotsFired = 0;
			}
			
		}
		RIFG AAAAAA 1 {
			invoker.shotsFired = 0;
			S_WeaponOffset();
		}
		goto ReallyReady;


	FireGrenadeLauncher:
		// Can we fire?
		TNT1 A 0 
		{
			if(countinv("HandGrenadeAmmo") <= 0)
			{
				dryFire();
				setWeaponState("ExitGrenadeMode");
			}
		}
		TNT1 A 0;
		RIGF A 1 {
			A_TakeInventory("HandGrenadeAmmo", 1);
			if(ShootingRangeHandler.instance().inShootingRangeSession)
			{
				invoker.PlayerIsFiring();
				A_GiveInventory("HandgrenadeAmmo");
			}
			actor grenadeAttack;
			A_PLAYSOUND("RIFLE/GRENADELAUNCHER/FIRE", CHAN_AUTO, 0.8);
			grenadeAttack = A_FireProjectile("ThrownGrenade1", 0, 0, 6);
			S_SelacoMuzzleFlash("MUZB", invoker.flashFrame, frandom(0,0.45),0, xOffset:0, yOffset:0);
			invoker.flashFrame++;
			if(grenadeAttack)
			{
				ThrownGrenade1(grenadeAttack).grenadeDamage*=1.15;
				ThrownGrenade1(grenadeAttack).A_SCALEVELOCITY(2);
				ThrownGrenade1(grenadeAttack).underslungGrenade = true;
				ThrownGrenade1(grenadeAttack).bACTIVATEIMPACT = true;
				ThrownGrenade1(grenadeAttack).bUseBounceState = false;
				ThrownGrenade1(grenadeAttack).bBounceOnActors = false;
      			ThrownGrenade1(grenadeAttack).bBounceOnCeilings = false;
      			ThrownGrenade1(grenadeAttack).bBounceOnFloors = false;
			}

			switch(getCvar("g_screenshake")) {
				case 2:
					ACS_NamedExecuteAlways("SpawnHudShake", 0, 9, 9, 9);
					A_QuakeEx(3, 3, 3 , 9, 0, 20, 0, 0, 10, 10, 10, 6, 2, 3);
					break;
				case 1:
					ACS_NamedExecuteAlways("SpawnHudShake", 0, 4, 4, 9);
					A_QuakeEx(2, 2, 2 , 6, 0, 20, 0, 0, 8, 8, 8, 5, 2, 2);
					break;
			}

			// @Cockatrice - Notify crosshair that a shot was just taken, since we don't use PlayerIsFiring() in this case
			if(invoker.activeCrosshair) {
				invoker.activeCrosshair.weaponFire();
			}
		}
		TNT1 AAAAA 0 BRIGHT A_FireProjectile("ShotgunParticles", random(-17,17), 0, -1, random(-17,17));
		TNT1 AAAAAAAAAA 0 A_FireProjectile("GunFireSmoke", frandom(-7,7), 0, 5, 0, 0, 0);
		TNT1 A 0 A_FireProjectile("muzzleFlashSpawnerShotgun", 0, 0, -10, 0);
		RIGF BB 1 
		{
			invoker.flashFrame = 1;
			S_SelacoMuzzleFlash("MUZB", invoker.flashFrame, frandom(0,0.45),0, xOffset:0, yOffset:0);
		}
		RIGF CC 1 
		{
			invoker.flashFrame = 2;
			S_SelacoMuzzleFlash("MUZB", invoker.flashFrame, frandom(0,0.45),0, xOffset:0, yOffset:0);
		}
		RIGF DD 1 
		{
			invoker.flashFrame = 3;
			S_SelacoMuzzleFlash("MUZB", invoker.flashFrame, frandom(0,0.45),0, xOffset:0, yOffset:0);
		}
		RIGF EE 1 
		{
			invoker.flashFrame = 4;
			//S_SelacoMuzzleFlash("MUZB", invoker.flashFrame, frandom(0,0.45),0, xOffset:0, yOffset:0);
		}
		TNT1 A 0
		{
			invoker.flashframe = 0;
		}
		RIGF FFGGHHIJJKKLLMMNN 1 {
			CheckPlayerStates();
		}
		goto reallyReady;

	FireZoomed:
		TNT1 A 0;
        TNT1 AA 0;
		TNT1 A 0 A_JumpIfInventory("Zoomed",1,"Fire2");
		TNT1 A 0 {
			if(getCvar("g_ironsights") == 1) {
				invoker.weaponSprite = "RIF3";
			} else {
				invoker.weaponSprite = "RIF4";
			}

			if(altFireCheck("AltFireRifleBurstZoom"))
			{
				invoker.shotsPerBurst = 3;
				invoker.adjustedSpread*=0.75;
				invoker.adjustedRecoil*=0.75;
			}
		}
	FireZoomedAttack:
		TNT1 A 0 {
			if(!invoker.TakeWeaponAmmo())
			{
				invoker.shotsPerBurst = 0;
				setWeaponState("ReloadWeapon");
				return;
			}	
			invoker.shotsPerBurst--;
			invoker.flashID = random(0,1);
			attackSound();
			invoker.xPos = frandom(-3.1, 3.1);
     		invoker.yPos = frandom(-3.1, 3.1);
			S_WeaponOffset(1);
		}
		TNT1 A 1 
		{
			invoker.playerIsFiring();
			A_WeaponReady(WRF_NOPRIMARY);
			if(invoker.weaponSprite == "RIF3")
			{
				X_SetOverlaySprite(1, "RIF3", 1);
			}
			else
			{
				X_SetOverlaySprite(1, invoker.weaponSprite, 0);
			}
			FireBullets(invoker.adjustedSpread*0.3,invoker.adjustedSpread*0.3, -1,  invoker.adjustedDamage, "HitPuffMachinegun", flags:FBF_NORANDOM);
		}
		TNT1 A 0 {
			A_SELACORECOIL(-1*invoker.adjustedRecoil-0.06, 0, frandom(-1*invoker.adjustedRecoil+0.08, invoker.adjustedRecoil+0.03));
			switch(getCvar("g_screenshake")) {
				case 1:
					A_QuakeEx(1, 1, 0, 3, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 0, 4, 3, 2, 0, 3);
					break;
				case 2:
					A_QuakeEx(1, 1, 1, 4, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 0, 4, 3, 2, 0, 3);
					break;
			}
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 0;
			} else
			{
				invoker.flashNumber = 2;
			}
			if(invoker.weaponSprite == "RIF4")
			{
				S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.15);				
			}
			ACS_NamedExecuteAlways("SpawnHudShake", 0, 4, 4, 3);
		}
		TNT1 A 0 S_ZOOMFACTOR(zoomRange + 0.010);
		TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 1, 0, 0, 0);
		TNT1 A 0 A_FireProjectile("muzzleFlashSpawnerRifle",0,0,invoker.flarepos,0);
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 {
			S_WeaponOffset(2);
		}
		TNT1 B 1 {
			A_WeaponReady(WRF_NOPRIMARY);
			if(invoker.weaponSprite == "RIF3")
			{
				X_SetOverlaySprite(1, "RIF3", 2);
			}
			else
			{
				X_SetOverlaySprite(1, invoker.weaponSprite, 1);
			}
			A_SELACORECOIL(-1*invoker.adjustedRecoil+0.02, 0, frandom(-1*invoker.adjustedRecoil+0.03, invoker.adjustedRecoil+0.03));
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 1;
			} else
			{
				invoker.flashNumber = 3;
			}
			if(invoker.weaponSprite == "RIF4")
			{
				S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.15);				
			}
			S_WeaponOffset(3);
		}
		TNT1 A 0 S_ZOOMFACTOR(zoomRange + 0.020);
		TNT1 A 0 {
			S_WeaponOffset(3);
		}
		TNT1 C 1{
			A_WeaponReady(WRF_NOPRIMARY);
			if(invoker.weaponSprite == "RIF3")
			{
				X_SetOverlaySprite(1, "RIF2", 3);
			}
			else
			{
				X_SetOverlaySprite(1, invoker.weaponSprite, 2);
			}
			A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil+0.03, invoker.adjustedRecoil+0.03));
			if(random(0,1) == 1)
			{
				invoker.flashNumber = 2;
			} else
			{
				invoker.flashNumber = 4;
			}
			if(invoker.weaponSprite == "RIF4")
			{
				S_SelacoMuzzleFlash("MUZZ", invoker.flashNumber, 0.15);				
			}
			A_FireProjectile("RifleCaseSpawn",5,0,17,7, 0, 18);
		}
		TNT1 A 0 S_ZOOMFACTOR(zoomRange + 0.03);
		TNT1 A 0 S_ZOOMFACTOR(zoomRange + 0.04);
		TNT1 A 0 {
			S_WeaponOffset(1);
		}
		TNT1 D 1
		{
			A_WeaponReady(WRF_NOPRIMARY);
			// Handle bursts
			if(altFireCheck("AltFireRifleBurstZoom"))
			{
				// Fire another shot
				if(invoker.shotsPerBurst)
				{
					setWeaponState("FireZoomedAttack");					
				}
				// End shot, do cooldown
				else
				{
					setWeaponState("CooldownZoomBurstFire");
				}
				return;
			}

			if(invoker.weaponSprite == "RIF3")
			{
				X_SetOverlaySprite(1, "RIF2", 3);
			}
			else
			{
				X_SetOverlaySprite(1, invoker.weaponSprite, 3);
			}
		}
		TNT1 A 0 A_PLAYSOUND("weapon/mecha", CHAN_AUTO, 0.40);
		TNT1 A 0 A_Refire();
		TNT1 A 0 
		{
			if(invoker.weaponSprite == "RIF3")
			{
				X_SetOverlaySprite(1, "RIF2", 3);
			}
			else
			{
				X_SetOverlaySprite(1, "RIF7", 2);
			}
			A_Refire();
		}
		TNT1 A 0 A_Refire();
		Goto ReallyReady;
	CooldownZoomBurstFire:
		RIF2 DDDDD 1
		{
			if(invoker.weaponSprite == "RIF3")
			{
				X_SetOverlaySprite(1, "RIF2", 3);
			}
			else
			{
				X_SetOverlaySprite(1, "RIF7", 2);
			}
		}
		goto reallyReady;


/* 	MeleeAttack:
		TNT1 A 0 {
			stopAttackingSound();
			A_ZoomFactor(1.0);
			setZoomStatus(false);
		}
		RIFM A 0 {
			invoker.weaponSprite = "RIFM";
			invoker.weaponFrame = 0;
		}
		goto MeleeAttackExecute; */

	DoFlashLight:
		TNT1 A 0 A_TakeInventory("HasFlashLight", 1);
		Goto ReallyReady;

	NoMods:
		TNT1 A 0 A_PRINT("\c[WHITE]No \c[RED]Weapon Behaviour Modifier \c[WHITE]slot installed. Insert one at the workshop!");
		goto ReallyReady;

    AltFire:
		TNT1 A 0 {

			// Check for selected alt fires, adjust accordingly.
			if (altFireCheck("AltFireRifleLauncher")) {
				// Do we have a grenade?
				if(countinv("HandGrenadeAmmo") <= 0)
				{
					dryFire();
					if(invoker.isGrenadeLauncherMode)
					{
						setWeaponState("ExitGrenadeMode");
					}
					else
					{
						setWeaponState("reallyReady");
					}
				} 
				// We have grenade
				else
				{
					SetWeaponState("SwapGrenade");
				}
			}

			if(altFireCheck("AltFireScarabMode"))
			{
				SetWeaponState("FireScarab");
				return;
			}
		}
		goto SwapZoom;
	GoBurst:
		TNT1 A 0 A_Playsound("DMR/burst", CHAN_AUTO, 0.7);
		TNT1 A 0 A_SetCrosshair(16);
		Goto ReallyReady;
	

	SwapZoom:
		TNT1 A 0 {
			toggleZoomStatus();
			if(checkIfZooming()) {
				SetWeaponState("SwapZoom_ZOOM");
			} else {
				SetWeaponState("SwapZoom_UNZOOM");
				return;
			}
		}
		goto ReallyReady;

	SwapZoom_ZOOM:
		TNT1 A 0 {
			A_ZOOMFACTOR(zoomRange);
			A_Playsound("rifle/zoom", CHAN_7);
			A_SetCrosshair(42);	
			if (getCvar("g_ironsights") == 1) {
				SetWeaponState("ZoomADS_Animation");
			}
		}
		RIF7 A 1
		{
			A_SetCrosshair(16);			
		}
		RIF7 BC 1 
		{
			if(!isAttackInput())
			{
				S_WeaponReady();
			}
		}
		goto ReallyReady;

	SwapGrenade:
		TNT1 A 0
		{
			invoker.breathingFrame = 0;
			if(!invoker.isGrenadeLauncherMode)
			{
				SetWeaponState("EnterGrenadeMode");
			}
			else
			{
				SetWeaponState("ExitGrenadeMode");
			}
		}
	
	EnterGrenadeMode:
		TNT1 A 0
		{
			invoker.SlidingSprite = "RIGS";
			A_PLAYSOUND("RIFLE/GRENADELAUNCHER/EQUIP", chan_auto);
			invoker.isGrenadeLauncherMode = true;
		}
		RIGL ACEGH 2;
		goto reallyReady;

	ExitGrenadeMode:
		TNT1 A 0
		{
			invoker.SlidingSprite = "RIFX";
			A_PLAYSOUND("RIFLE/GRENADELAUNCHER/UNEQUIP", chan_auto);
			invoker.isGrenadeLauncherMode = false;
		}
		RIGL JLMN 2;
		goto reallyReady;

	ZoomADS_Animation:
		RIF2 AB 1
		{
			A_SetCrosshair(16);			
		}
		RIF2 C 1 {
			if(!isAttackInput())
			{
				S_WeaponReady();
			}
		}
		goto ReallyReady;
	SwapZoom_UNZOOM:
		TNT1 A 0 {
			A_Playsound("rifle/unzoom", CHAN_7);
			A_ZOOMFACTOR(1.0);
			A_SetCrosshair(42);	
			S_WeaponReady();
			if (getCvar("g_ironsights") == 1) {
				SetWeaponState("unZoomADS_Animation");
			}
		}
		RIF7 CB 1
		{
			A_SetCrosshair(16);			
		}
		RIF7 A 1 {
			if(!isAttackInput())
			{
				S_WeaponReady();
			}
		}
		goto ReallyReady;
	unZoomADS_Animation:
		RIF2 CB 1
		{
			A_SetCrosshair(16);			
		}
		RIF2 A 1 {
			if(!isAttackInput())
			{
				S_WeaponReady();
			}
		}
		goto ReallyReady;


	SwapBurst:
		TNT1 A 0 {
			invoker.burstFireModeHipfire =! invoker.burstFireModeHipfire;
			if (invoker.burstFireModeHipfire == 0) {
				A_PRINTBOLD("Auto Mode");
				A_Playsound("DMR/auto", CHAN_AUTO, 0.4);
			} else {
				A_Playsound("DMR/burst", CHAN_AUTO, 0.4);
				A_PRINTBOLD("Burst Mode");
			}
		}
		RIF8 BCDDCB 1;
		Goto ReallyReady;	

	NoAmmo:
		RIFG A 0 A_PlaySound("weapons/empty");
		TNT1 A 0 S_ZOOMFACTOR(1.0);
		Goto ReallyReady;
	
	FireEmptyMag:
		TNT1 A 0 dryFire();
		RIFG A 1 S_WeaponReady(WRF_BLOCKSLIDESTATE);
		goto reallyready;


    ReloadWeapon:
		RIFG A 1  { 	
			if (invoker.isFiring == 1) {
				A_STOPSOUND(CHAN_WEAPON);
				A_Playsound("weapons/uc36firee", CHAN_AUTO);
				invoker.isFiring = 0;
			}

			invoker.shotsFired = 0;
			if (invoker.isFiring == 1) {
				A_Playsound("weapons/uc36firee", CHAN_WEAPON, 0.8);
				invoker.isFiring = 0;
				CheckReloadCancelling(noFiring:true);
			}
			doWeaponReload();
		}
		TNT1 A 0 {
			invoker.iszooming = false;
			if(invoker.magRemoved) {
				SetWeaponState("ReloadMagRemoved");
			}
		}
		TNT1 A 0 S_WeaponOffset();
		TNT1 A 0 S_ZOOMFACTOR(1.0);
        TNT1 AAA 0;
/* 		TNT1 A 0 {
			if((invoker.hasSpeedLoader))
			{
				setWeaponState("ReloadContinue2");
			}
		} */
		RIFR AB 2 {
			invoker.breathingFrame = 0;
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		TNT1 A 0
		{
			A_PLAYSOUND("UC36/RELOAD/START", CHAN_AUTO, 0.25);
		}
	ReloadContinue2:
		TNT1 A 0 A_JumpIfInventory("MeleeButton", 1, "MeleeAttack");
		RIFR CC 1 {
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		RIFR DD 1 {
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		TNT1 A 0 {
			if((invoker.hasSpeedLoader))
			{
				setWeaponState("ReloadContinue3");
			}
		}
		RIFR EEFF 1 {
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
	ReloadContinue3:
		RIFR GHIJK 1 {
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		RIFR K 1 {
			CheckReloadCancelling(noFiring:true);
			if (countinv("RifleAmmo") == 0 || countinv("HardcoreMode")) {
				A_FireProjectile("EmptyClipSpawn",0,0,30,-4);
			}
			A_PlaySound("RIFCL_OU", CHAN_AUTO, 0.9);
			removeCurrentAmmo();
			invoker.magRemoved = true;
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		
	ReloadContinue:
		TNT1 A 0 {
			if (invoker.hasSpeedLoader) {
				SetWeaponState("ReloadContinueFast");
			} 
		}
		RIFR LLMMNN 1 {
			S_WeaponReady(WRF_BLOCKSLIDESTATE);
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		TNT1 A 0 A_JumpIfInventory("MeleeButton", 1, "MeleeAttack");
		TNT1 A 0 S_WeaponReady;
		goto ReloadMagRemoved;
	ReloadContinueFast:
		RIFR LMN 1 {
			S_WeaponReady(WRF_BLOCKSLIDESTATE);
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		TNT1 A 0 A_JumpIfInventory("MeleeButton", 1, "MeleeAttack");
		TNT1 A 0 S_WeaponReady;
		goto ReloadMagRemoved;
	ReloadMagRemoved:
		RIFR OPQ 1 {
			S_WeaponReady(WRF_NOFIRE);
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
			if (invoker.hasSpeedLoader) {
				A_SETTICS(1);
			} else {
				A_SETTICS(2);
			}
		}
		RIFR R 1 {
			A_PlaySound("RIFCL_IN", 2, 0.9);
			insertNewAmmo();
			invoker.magRemoved = false;
			S_WeaponReady(WRF_NOFIRE);
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		RIFR RSS 1 {
			S_WeaponReady(WRF_NOFIRE);
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
		RIFR TT 1 {
			S_WeaponReady(WRF_NOFIRE);
			CheckReloadCancelling(noFiring:true);
			S_WeaponOffset();
		}
	FinishReload:
/* 		TNT1 A 0 {
			if (upgradeCheck("UpgradeRifleReloadSpeed") == 1) {
				SetWeaponState("FinishReloadFast");
			} 
		} */
		RIFR UUVV 1 {
			S_WeaponReady(WRF_NOFIRE);
			CheckReloadCancelling();
			S_WeaponOffset();
		}
		TNT1 A 0 {
			loadChamber();
		}
		RIFR WWXXYY 1 {
			S_WeaponReady(WRF_NOFIRE);
			CheckReloadCancelling();
			S_WeaponOffset();
		}
		TNT1 A 0 A_GiveInventory("RifleWasEmpty", 1);
		goto reallyready;
	FinishReloadFast:
		RIFR UVWXY 1 {
			S_WeaponReady(WRF_NOFIRE);
			CheckReloadCancelling();
			S_WeaponOffset();
		}
		TNT1 A 0 A_GiveInventory("RifleWasEmpty", 1);
		goto reallyready;

	 Spawn:
	 	TNT1 A 0;
		TNT1 A 0 A_SPAWNITEMEX("RIFLE_PICKUP");
		Stop;

	}


	override void MarkPrecacheSounds() {
		Super.MarkPrecacheSounds();
		
		// Mark looping sounds to prevent possible sticking from a late load
		// in the background thread
		MarkSound("weapons/uc36firee");
		MarkSound("weapons/uc36fire");
		MarkSound("DMR/burst");
	}
}

class muzzleFlashSpawnerRifle : PlayerMuzzleflash 
{	
	default
	{
		PlayerMuzzleFlash.lightSize 115, 130;
	}
	// Called in beginPlay of playerMuzzleFlash
	override void SpawnLightEffect()
	{
		spawnLight(rColor:int(500*2.5), gColor:int(217*2.5), bColor:int(67*2.5), getLightSize(), 0, shadowRequirement:allowShadow, xOffset:random(-10,10), overbright: overbrightValue, divisionSpeed:1.85, alwaysShow:1,weaponFlash:1);
	}
}

Class HasRifleSilencer : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class StopSliding : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class ADSMode : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class isRunning : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}


Class HasFlashLight : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class RifleWasEmpty : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class Unloading : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class HasUnloaded : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class HasUnderBarrelGrenadeLauncher : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class HasDamageUpgrade : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

Class HasSpeedReload : Inventory
{
	Default
	{
		inventory.maxamount 1;
	}
}

class AssaultRifleMuzzleFlash : SelacoLightEffect {
	
}

// Unused.
class RifleTracer : Actor
{

    override void BeginPlay() {
		PlayerPawn pawn=players[0].mo;
		let d = Dawn(pawn);
		// Kill particles close to the player
		if(Distance2Dsquared(d) < 430) {
			destroy();
		}
        super.beginPlay();
    }

	default
	{
		-BLOODSPLATTER
		+NOBLOODDECALS
		+BLOODLESSIMPACT 
		+NOINTERACTION
        +FLATSPRITE
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		-ACTIVATEMCROSS;
		-CANPUSHWALLS
		-CANUSEWALLS
		-CANNOTPUSH
		scale 0.15;
	}
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0;
			HITS A 1 BRIGHT;
			stop;
	}
}