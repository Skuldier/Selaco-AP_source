// - Add Voxel presents                                                                     [ V ]
// - Disable all pickups from the map (Ammo, Armor, Health. Make sure key items are kept)   [ V ]
// - Add Cvar for the event                                                                 [ V ]
// - Add Checkbox to begin event                                                            [ V ]
// - Add Presents as a loot drop for every enemy                                            [ V ]
// - Add fancy special effects when opening                                                 [ V ]
// - Add loottable stuff                                                                    [ V ]
// - Manipulate the loot a little to ensure games cant be bricked as easily                 [   ]

extend class SelacoEnemy {
    bool dropGift;
}

// Level handler does level specific tasks like keeping track of how many presents are found
class XmasLevelHandler : EventHandler {
    int foundGifts;
    Array<int> levelEndLines;
    
    int MAIN_OBJECTIVE_TAG;
    int GIFT_OBJECTIVE_TAG;
    int EXIT_OBJECTIVE_TAG;

    bool christmasMode;

    const REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL = 10;
    

    override void OnRegister() {
        // If this isn't xmas mode, kill the event handler
        christmasMode = Level.MapName != "TITLEMAP" && CVAR.GetCVar("g_playChristmasEvent",players[0]).getInt();
        if(!christmasMode) {
            return;
        }

        Console.Printf("\c[White]XMAS Level Started");
    }

    override void WorldLoaded(WorldEvent e) {
        if(Level.MapName == "TITLEMAP" || CVAR.GetCVar("g_playChristmasEvent",players[0]).getInt() < 1) { 
            christmasMode = false;
            if(!bDestroyed) {
                self.Destroy();
            }
            return;
        }

        if(!e.isReopen) {
            foundGifts = 0;
            MAIN_OBJECTIVE_TAG = 66669 + Level.levelnum;
            GIFT_OBJECTIVE_TAG = 99998 + Level.levelnum;
            EXIT_OBJECTIVE_TAG = 88887 + Level.levelnum;
        }

        TextureID loadTex = TexMan.CheckForTexture("LOADSCRN");
        TextureID loadTex2 = TexMan.CheckForTexture("NOLOAD");

        // Set level transition lines to block the player until enough gifts are found
        for(int x = 0; x < level.Lines.size(); x++) {
            if(level.Lines[x].sidedef[0] && (level.lines[x].sidedef[0].GetTexture(1) == loadTex || level.lines[x].sidedef[0].GetTexture(1) == loadTex2)) {
                levelEndLines.push(x);
                if(foundGifts < REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL) level.lines[x].flags |= Line.ML_BLOCK_PLAYERS;
            }
        }
    }

    void giftFound(PRESENT_ITEM gift) {
        foundGifts++;
        int remainingGifts = REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL - foundGifts;

        // Notify player and give some munny
        players[consolePlayer].mo.GiveInventory('creditscount', 25);
        string giftText = foundGifts > REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL ? String.Format("\c[HI]%d\c- Gifts Found!\n", foundGifts) : String.Format("\c[HI]%d\c- of \c[HI]%d\c- Gifts Found!\n", foundGifts, REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL);
        Notification.QueueOrUpdateUnimportant("ProgressNotification", giftText, "\c[GOLD]25 Credits\c- Earned", "", NotificationItem.SLOT_BOT_LEFT, tag: "Gift");

        if(foundGifts == REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL) {
            // Allow the player to exit the map now by unblocking the lines
            for(int x = 0; x < levelEndLines.size(); x++) {
                level.lines[levelEndLines[x]].flags &= ~Line.ML_BLOCK_PLAYERS;   
            }

            // Change the title of the objective so it shows up correctly when completing it
            let os = Objectives.GetObjectives();
            let o = os ? os.find(GIFT_OBJECTIVE_TAG) : null;
            if(o) o.title = String.Format("Unwrap %d Gifts", REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL);

            // Complete the objectives
            Objectives.CompleteObjective(GIFT_OBJECTIVE_TAG, OBJECTIVE_NOTIFY_LIST);
            
            // Add exit objective
            Objectives.AddObjective("", "Reach the exit", "Leave the map without dying!", EXIT_OBJECTIVE_TAG, MAIN_OBJECTIVE_TAG, onlyInMap: true, notify: OBJECTIVE_NOTIFY_LIST);
        } else if(foundGifts < REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL) {
            // Update count in the objectives list
            let os = Objectives.GetObjectives();
            let o = os ? os.find(GIFT_OBJECTIVE_TAG) : null;
            if(o) o.title = String.Format("Unwrap %d Gift%s", remainingGifts, remainingGifts > 1 ? "s" : "");
        }
    }

    override void WorldTick() {
        if(Level.MapName == "TITLEMAP" || !christmasMode) {
            if(!bDestroyed) {
                self.Destroy();
            }
            return;
        }   

        if(level.maptime == 175) {
            // Give the player an objective to get the required amount of presents
            Objectives.AddObjective("OBJTEDY", "Christmas in Selaco", "Get all of the gifts to progress!", MAIN_OBJECTIVE_TAG, onlyInMap: true);
        }

        if(level.maptime == 185) {
            Objectives.AddObjective("", "Unwrap " .. REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL .. " Gifts", "Get all of the gifts to progress!", GIFT_OBJECTIVE_TAG, MAIN_OBJECTIVE_TAG, onlyInMap: true, notify: OBJECTIVE_NOTIFY_LIST);
        }

        // Periodically check if the player is in range of the end-level lines, and if they are notify them that they cannot escape
        if(level.maptime > TICRATE * 10 && level.time % 5 == 0 && foundGifts < REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL) {
            for(int x = 0; x < levelEndLines.size(); x++) {
                Line l = level.lines[levelEndLines[x]];
                Vector2 midpoint = l.v1.p + (l.delta * 0.5);
                Vector2 ppos = (players[consolePlayer].mo.pos.x, players[consolePlayer].mo.pos.y);

                // MAKE THIS BIGGER COCKATRICE!
                if((midpoint - ppos).length() < 128) {
                    string giftText = String.format("In order to save Christmas, you need to secure\n\c[HI]%d\c- more gifts before continuing!", REQUIRED_AMOUNT_OF_GIFTS_TO_GET_TO_NEXT_LEVEL - foundGifts);
                    Notification.QueueOrUpdate("XMASWarningNotification", "Find More Gifts", giftText, "GIFTFND1", 0);
                    break;
                }
            }
            
        }
    }

}

class XMASWarningNotification : MapNotification {
    override void start(double time) {
        let evt = TutorialHandler.GetHandler();
        isMicro = evt && evt.isShowing();
        vOffset = isMicro ?  evt.getCurrentHeight() + 35 : 0;

        S_StartSound("ui/opentutorialinvasion", CHAN_VOICE, CHANF_UI, snd_menuvolume);

        Notification.start(time);
    }
}


class XmasHandler : StaticEventHandler {

    const GIFT_CHANCE = 7;                          // Chance for gifts to spawn passively in the world
    const GIFT_CLUSTER_CHANCE = 1;                  // THIS IS APPLIED ON TOP OF GIFT CHANCE (!)
    const MIN_GIFT_REQUIRED_PER_PATHNODE = 15;      // This amount of pathnodes required to increment the Minimum value presents
    const GIFT_DROP_CHANCE = 6;                     // Chance for enemies to drop a gift
    const WALL_OFFSET = 25;                         // How far should presents be removed from the wall
    const SNOWBANKS_PER_PILE = 7;                   // How many snow piles per human gib?
    int christmasMode;
    int totalPresents;
    int totalSecrets;
    int totalEnemiesWithPresents;
    int foundSecrets;
    bool isNewgame;
    bool snowEffects;
    bool snowEffectsOld;
    bool playMusicOM01B;                             // We use the old track during the Christmas event! Need to remember this so we can execute it on the second tick (circumvent the first tick that spawns the vanilla track)
    int playmusicOM01B_Delayer;
    int particleSetting;
    PlayerPawn pawn;
    array<Pathnode> nodeActors;
    array<Actor> cluster;           // The current cluster of enemies spawned. Once they are active we forget about them.
    array<int> wallDistance, wallAngle;
    int clusterTimer;

    static const class<Actor> SoldierClasses[] = {
        'SOLDIER', 'SOLDIER_STRAFER', 'SOLDIER_AGGRESSOR', 'SOLDIER_defender'
    };

    const SPAWN_DELAY = 45;
    
    void getPathnodes() {
        nodeActors.clear();
        ThinkerIterator it = ThinkerIterator.Create("Pathnode");
        Pathnode nodeActor = Pathnode(it.Next());

        // Store all pathnodes in a list
        for (; nodeActor; nodeActor = Pathnode(it.Next())) {
            nodeActors.push(nodeActor);
        }
    }

    override void NewGame() 
    {
        isNewgame = true;
        nodeActors.clear();
        cluster.clear();
    }

    override void WorldLoaded(WorldEvent e)
    {
	    pawn=players[consolePlayer].mo;
	    let d = Dawn(pawn);   
        
        christmasMode = Level.MapName != "TITLEMAP" && CVAR.GetCVar("g_playChristmasEvent",players[0]).getInt(); 

        if(christmasMode) 
        {
            clusterTimer = TICRATE * 50;
            totalSecrets = Level.total_secrets;
            foundSecrets = Level.found_secrets;
            // This block runs only once
            if(isNewgame) 
            {
                //console.printf("\c[White]Christmas Event: \c[green]Activated! Merry Christmas");
                // Give player access to all Demo weapons
                d.GiveInventory("isChristmasMode", 1); // ACS readouts - We want to skip the entire opening sequence in Christmas Mode
                d.giveInventory("Shot_gun", 1);
                d.giveInventory("rifle", 1);
                d.giveInventory("RoaringCricket", 1);
                d.giveInventory("FlashlightItem", 1);
                d.giveInventory("Fists", 1);

                // but also take the ammo away from weapons that are not a machinegun
                d.TakeInventory("ShotgunAmmo", 999);
                d.TakeInventory("ShotgunReserve", 999);
                d.TakeInventory("PistolReserve", 999);
                d.TakeInventory("PistolAmmo", 999);
                //console.printf("\c[White]Christmas Event: \c[Green]Player inventory prepared.");
            }

            // Loading a brand new area
            if(!e.isReopen && !e.IsSaveGame) {
                // Remove all SelacoItem actors that are not essential
                ThinkerIterator it = ThinkerIterator.Create("SelacoItem");
                SelacoItem selacoItemInstance = SelacoItem(it.Next());
                for (; selacoItemInstance; selacoItemInstance = SelacoItem(it.Next())) {
                    if(!selacoItemInstance.bEssential) {
                        if(selacoItemInstance.bCountSecret) {
                            let a = Actor.Spawn("PRESENT_ITEM", selacoItemInstance.pos);
                            a.bCountSecret = true;
                        }
                        selacoItemInstance.destroy();
                    }
                }
                //console.printf("\c[White]Christmas Event: \c[Green]Deleted all item pickups");

                // Spawn presents!
                addSnowPiles();
                getPathnodes();
                totalPresents = 0;
                int totalNodes = nodeActors.size();
                int presentsRequired = totalNodes / MIN_GIFT_REQUIRED_PER_PATHNODE;
                presentsRequired +=random(3,5); // It's christmas, lets give a little more. 
                clusterTimer = TICRATE * 10;
                wallDistance.clear();
                wallAngle.clear();
                // Spawn presents and snowpiles at random pathnodes
                if(nodeActors.size() > 0) 
                {
                    // PRESENTS
                    while(getTotalPresents() < presentsRequired)
                    {
                        // We have a hit, prepare spawning a present
                        if(random(0,100) <= GIFT_CHANCE) 
                        {
                            totalPresents++;
                            // Set up
                            string presentType = "PRESENT_ITEM";
                            PathNode giftNode = nodeActors[random(0,nodeActors.size()-1)];
                            int wallsHit = 0;
                            FLineTraceData RemoteRay;
                            actor presentActor;
                            bool presentSuccess;

                            // Check if we should spawn a cluster instead
                            if(random(0,100) <= GIFT_CLUSTER_CHANCE) {
                                presentType = "PRESENT_CLUTER";
                            }

                            // Shoot linetraces on top of gift to look for a wall.
                            for(int searchAngle = 0;searchAngle<=360;searchAngle+=90) 
                            {
                                giftNode.LineTrace(searchAngle,600, 0,offsetz: giftNode.height+25,data: RemoteRay);
                                if(remoteRay.HitType == TRACE_HITWALL) {
                                    wallsHit++;
                                    wallDistance.push(remoteRay.distance);
                                    wallAngle.push(searchAngle);
                                }
                            }

                            [presentSuccess, presentActor] = giftNode.A_SPAWNITEMEX(presentType, zofs:random(0,40), xvel:frandom(5,50), yvel:frandom(1,6), zvel:frandom(4,5), angle:random(0,4)*90, flags:SXF_ABSOLUTEANGLE);
                        }
                    }
                }
                //console.printf("\c[White]Christmas Event: \c[Green]%d presents have spawned in this level", getTotalPresents());
            }
        }
	}


    override void NetworkProcess (ConsoleEvent e) {
        if(e.name ~== "randomspawns") {
            clusterTimer = 1;
            //Console.Printf("Spawning a cluster soon...");
        }
    }


    void addSnowPiles() 
    {

        // Check snowpiles to spawn some random clusters in the middle of the path
        getPathnodes();
        int totalNodes = nodeActors.size();
        for(int x=0;x<nodeActors.size();x++) 
        {
            if(random(0, 20) == 0) 
            {
                for(int x=0;x<=3;x++) 
                {
                    nodeActors[x].A_SPAWNITEMEX("SnowDecal", frandom(-200,200), frandom(-200,200), 0, frandom(1,3), frandom(1,3));
                }
            }
        }
        
        // Replace all human gore with snowpiles.
        int totalPiles;
        ThinkerIterator it3 = ThinkerIterator.Create("HumanBloodSplattersPermanent");
        HumanBloodSplattersPermanent bloodSplatter = HumanBloodSplattersPermanent(it3.Next());
        for (; bloodSplatter; bloodSplatter = HumanBloodSplattersPermanent(it3.Next())) {
            bloodSplatter.destroy();
        }           

        array<Actor> gibbedHumans;
        // Destroy human gore sprites as well
        ThinkerIterator it2 = ThinkerIterator.Create("GibbedHumanSprites");
        GibbedHumanSprites gibbedHuman = GibbedHumanSprites(it2.Next());
        for (; gibbedHuman; gibbedHuman = GibbedHumanSprites(it2.Next())) 
        {
            gibbedHumans.push(gibbedHuman);
        }        

        ThinkerIterator it4 = ThinkerIterator.Create("SuperGibbedHuman");
        SuperGibbedHuman gibbedHumanSuper = SuperGibbedHuman(it4.Next());
        for (; gibbedHumanSuper; gibbedHumanSuper = SuperGibbedHuman(it4.Next())) 
        {
            gibbedHumans.push(gibbedHumanSuper);
        }        

        // Go through the list of deleted sprites and push snow to the sides of the map
        for(int x=0;x<gibbedHumans.size();x++) 
        {
            if(gibbedHumans[x])
            {
                for(int y=0;y<=SNOWBANKS_PER_PILE;y++) {
                    totalPiles++;
                    gibbedHumans[x].A_SpawnItemEx("SnowDecal", 0, 0, 0, 1000, 0, 3, angle:random(0,360));
                }
                gibbedHumans[x].destroy();
            }
        }
        //console.printf("\c[White]Christmas Event: \c[Green]%d snow piles created", totalPiles);
        // Done, we no longer need this data.
        gibbedHumans.clear();
    }

    int getTotalPresents() {
         int spawnedPresents = 0;
         ThinkerIterator it4 = ThinkerIterator.Create("PRESENT_ITEM");
         PRESENT_ITEM present = PRESENT_ITEM(it4.Next());
         for (; present; present = PRESENT_ITEM(it4.Next())) {
             spawnedPresents++;
         }           
         return spawnedPresents;
    }

    override void WorldUnloaded(WorldEvent e) {
        isNewgame = false;
        nodeActors.clear();
        cluster.clear();
    }

    override void WorldTick() {
        if(christmasMode) {
            weatherEffects();

            // We use the old track for the christmas event.
            if(Level.MapName == "om_01b" && playmusicOM01B_Delayer < 5) {
                playmusicOM01B_Delayer++;
                S_ChangeMusic("PATHFNDR", looping: false, force: true);
            }

            // Check snow effect setting
            if(level.time % 35 == 0) {
                // First 
                if(!snowEffects) {
                    handleSnowPiles(0);
                }
                snowEffects = CVAR.GetCVar("r_snoweffects",players[0]).getInt(); 
                // if the Snow Effects setting has changed, wipe all snow piles
                if(snowEffectsOld != snowEffects) {
                    handleSnowPiles(snowEffects);
                }
                snowEffectsOld = snowEffects;
                
            }

            if(--clusterTimer == 0) {
                // Check for, and attempt to spawn enemies for Dawn to slaughter, I mean recover presents from
                PathNode spawnNode;
                int lookCount;
                [spawnNode, lookCount] = findNodeForSpawning();
                if(spawnNode) {
                    // Areas with tall ceilings are more likely to spawn Juggernaut or Siegers
                    // Jugg +8%  Sieger +5%
                    bool tallCeiling = spawnNode.ceilingZ - spawnNode.floorZ > 200;

                    // Spawn a cluster of enemies
                    cluster.clear();
                    int numSpawn = random(1, random(2, 4));
                    for(int x = 0; x < numSpawn; x++) {
                        Actor spawned = null;

                        int typeSpawn = random(0, 100);
                        if(numSpawn == 1 && typeSpawn > 98 || (tallCeiling && numSpawn == 1 && typeSpawn > 90)) {
                            spawned = SpawnNear("Juggernaut", spawnNode, x);
                        } else if(typeSpawn > 50 && typeSpawn < 80) {
                            spawned = SpawnNear("Engineer", spawnNode, x);
                        } else if(typeSpawn > 93 && typeSpawn < 98 || (tallCeiling && typeSpawn > 84 && typeSpawn <= 94)) {
                            spawned = SpawnNear("Sieger", spawnNode, x);
                            if(spawned) {
                                // Position sieger closer to the ceiling
                                Vector3 pos = spawned.pos;
                                pos.z = max(spawned.ceilingZ - 40 - spawned.height, spawned.floorZ + 20);
                                spawned.SetXYZ(pos);
                            }
                        } else {
                            // Must spawn the actual class directly, because we need to track the enemies in the cluster
                            spawned = SpawnNear(SoldierClasses[random(0, SoldierClasses.size() - 1)], spawnNode, x);
                        }

                        if(spawned) {
                            cluster.push(spawned);
                            spawned.bLOOKALLAROUND = true;
                            spawned.angle = random(0, 360);
                        }
                    }

                    // Assign at least one enemy to always drop a gift
                    if(cluster.size() > 0) {
                        let enemy = SelacoEnemy(cluster[cluster.size() - 1]);
                        if(enemy) 
                        {
                            enemy.dropGift = true;
                            enemy.A_SpawnItemEx("PresentIcon", flags:SXF_SETMASTER);
                        }
                        else pawn.A_PrintBold("Couldn't convert a spawned enemy to SelacoEnemy. WTF!?");
                    }
                } else {
                    //if(pawn) pawn.A_PrintBold(String.Format("Failed finding a spawn node: %d nodes searched", lookCount));
                }
            } else if(clusterTimer < 0) {
                // Check our active cluster to see if we can reset the timer
                // or if we need to try to spawn a new cluster and hope the player finds them
                bool clusterActive = checkClusterActive();
                if(!clusterActive && clusterTimer < -(TICRATE * 10)) {
                    //if(pawn) pawn.A_PrintBold(String.Format("Despawning %d Enemies: Timed Out", cluster.size()));
                    for(int x = 0; x < cluster.size(); x++) {
                        if(cluster[x]) cluster[x].destroy();
                    }
                    cluster.clear();
                    clusterTimer = 2;
                } else if(clusterActive) {
                    clusterTimer = (random(0, 10) + SPAWN_DELAY) * TICRATE;
                    cluster.clear();
                }
            }

            // Check for secrets. If a secret is found, spawn gifts in front of the player
            if(foundSecrets < Level.found_secrets) 
            {
                PlayerPawn dawn=players[0].mo;
                foundSecrets = Level.found_secrets;
                dawn.A_SPAWNITEMEX("PRESENT_ITEM");
            }
        }
    }

    // Spawn presents when a soldier dies
    override void WorldThingDied(WorldEvent e) {
        if(christmasMode) 
        {
            //Console.Printf("Thing Died: %s : Is Enemy: %s Drop Gift: %d", e.Thing.getClassName(), e.Thing is "SelacoEnemy" ? "Yes" : "No", e.Thing is "SelacoEnemy" ? SelacoEnemy(e.Thing).dropGift : 0);
            if(e.Thing is "SelacoEnemy" && (SelacoEnemy(e.Thing).dropGift))
            {
                //console.printf("I should drop something!");
                e.Thing.A_SpawnItemEx("PRESENT_ITEM", 0, 0, 0, 2, 0, 5, angle:random(0,360));
                e.thing.A_PlaySound("XMAS/GIFTSPWN", CHAN_AUTO, 1.0, 0, 0.6);
            }
        }
    }

    // Decide who gets to be a filthy thief! (Stolen presents :@)
    override void WorldThingSpawned(WorldEvent e) {
/*         if(christmasMode) 
        {
            if(e.Thing is "SelacoEnemy" && random(0,100) <= GIFT_DROP_CHANCE && e.Thing.bIsMonster)
            {
                SelacoEnemy(e.Thing).dropGift = true;
                SelacoEnemy(e.Thing).A_SpawnItemEx("PresentIcon", flags:SXF_SETMASTER);
            }
        } */
    }

    void handleSnowPiles(bool snowSetting) {
         ThinkerIterator it = ThinkerIterator.Create("Snowdecal");
         SNOWDECAL snowPile = SNOWDECAL(it.Next());
         for (; snowPile; snowPile = SNOWDECAL(it.Next())) {
             // Adjust piles
             if(snowSetting) 
             {
                snowPile.A_SetRenderStyle(1.0, STYLE_NORMAL);
             }
             else
             {
                snowPile.A_SetRenderStyle(1.0, STYLE_NONE);
             }

         }                  
    }

    bool checkClusterActive() {
        for(int x = 0; x < cluster.size(); x++) {
            if(cluster[x] != null) {
                if(cluster[x].target) {
                    // At least one of our cluster is active, so lets reset the timer so the next cluster can be spawned
                    return true;
                }
            }
        }

        return false;
    }

    // Spawns snow effects! Quite demanding so recommend keeping it down. Especially for lower settings.
    void weatherEffects() {
        if(snowEffects) 
        {
            PlayerPawn dawn=players[0].mo;
            if(level.time % 35 == 0) 
            {
                particleSetting = CVAR.GetCVar("r_particleintensity",players[0]).getInt(); 
                if(particleSetting == 5) { // RIDICULOUS. MORE SNOW!
                    particleSetting+=3;
                }
            }
            if(level.time % 3 == 0) {
                for(int i=0;i<particleSetting;i++) 
                {
                    dawn.A_SpawnItemEx ("WhiteEmber", random(100, 510), frandom(-250,250), random(70, 120), 0, frandom(-0.8,0.8), frandom(-0.9, -1.4));
                }
            }
            if(level.time % random(10,170) == 0) 
            {
                dawn.A_SpawnItemEx ("frozenSmoke", random(300, 600), frandom(-250,250), random(-40, 80), 0, frandom(0.3,0.32), frandom(-0.1, 0.1));
            }
        }
    }

    // Finds a node for spawning an enemy soldier
    const NODE_MAX_DIST = 1800 * 1800;
    const NODE_MIN_DIST = 800 * 800;
    const NODE_HEIGHT_DIFF = 90.0;          // Try to keep spawns on the same floor

    PathNode, int findNodeForSpawning() {
        // Find a node close to Dawn
        Dawn d = Dawn(players[consolePlayer].mo);
        ThinkerIterator it = ThinkerIterator.Create("PathNode");
        Array<PathNode> found;
        PathNode thing; 
        while (thing = PathNode(it.Next())) {
            double dst = thing.Distance2DSquared(d);
            if(dst < NODE_MAX_DIST && dst > NODE_MIN_DIST && abs(d.pos.z - thing.pos.z) < NODE_HEIGHT_DIFF) {
                found.push(thing);
            }
        }

        // Just pick a random one for now
        PathNode a = found.size() ? found[random(0, found.size() - 1)] :  null;

        if(a) {
            int cnt = 0;
            return findFirstInvisibleNode(null, PathNode(a), d, cnt, 0), cnt;
        }

        return null, 0;
    }

    PathNode findFirstInvisibleNode(PathNode prevNode, PathNode fromNode, Dawn d, out int count, double distLast) {
        count++;

        if(!fromNode.CheckSight(d, SF_SEEPASTBLOCKEVERYTHING | SF_SEEPASTSHOOTABLELINES | SF_IGNOREVISIBILITY)) {
            return fromNode;
        }

        double nDistLast = prevNode ? prevNode.Distance2DSquared(fromNode) : 0;
        for(int x = 0; x < fromNode.links.size(); x++) {
            if(count > 32) return null; // Limit search time and stack depth
            PathNode n = fromNode.links[x].node;
            if(n != prevNode && (!prevNode || n.Distance2DSquared(prevNode) > distLast)) {
                n = findFirstInvisibleNode(fromNode, n, d, count, nDistLast);
                if(n) return n;
            }
        }

        return null;
    }

    Actor SpawnNear(Class<Actor> cls, PathNode spawnNode, int checkIndex, int radius = 48) {
        // Make sure we can spawn here and we aren't spawning inside another object
        // Try up to 5 times

        Vector3 basePos = (spawnNode.pos.x, spawnNode.pos.y, spawnNode.floorz);
        for(int x = 0; x < 5; x++) {
            // Pick a random direction based on connections to the node
            if(spawnNode.links.size() > 0) {
                Vector3 dir;

                // Determine offset direction based on surrounding links, or a random dir if there are none
                if(spawnNode.links.size()) {
                    PathNode randomLink = spawnNode.links[random(0, spawnNode.links.size() - 1)].node;
                    dir = ((randomLink.pos.x, randomLink.pos.y, randomLink.floorz) - basePos).unit();
                } else { dir = (random(-1, 1) * radius, random(-1, 1) * radius, 0); }

                Vector3 offset = dir * ((checkIndex + x + 1) * radius);
                Vector3 pos = basePos + offset;

                // Check if there is an enemy in this spot
                BlockThingsIterator it = BlockThingsIterator.CreateFromPos(pos.x, pos.y, pos.z, 48, radius, false);
                bool found;
                while (it.Next()) {
                    if(it.thing is 'SelacoEnemy') {
                        found = true;
                        break;
                    }
                }

                if(!found) {
                    // Spawn the actor
                    Actor a = Actor.Spawn(cls, pos);
                    
                    // If the new actor can see the player, cancel this
                    if(a.CheckSight(players[consolePlayer].mo, SF_SEEPASTBLOCKEVERYTHING | SF_SEEPASTSHOOTABLELINES | SF_IGNOREVISIBILITY)) {
                        a.destroy();
                    } else {
                        // Make sure there is enough room here, ceiling wise
                        a.FindFloorCeiling(FFCF_SAMESECTOR);
                        if(a.ceilingZ - a.floorZ <= a.height || a.checkBlock(xofs: a.radius / 2)) {
                            a.destroy();
                        } else {
                            return a;
                        }
                    }
                }
            }
        }
        
        return null;
    }
}

// Not really an actor, it just spawns more presents!
class PRESENT_CLUTER : Actor {
    default {
        +NOINTERACTION;
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 A_SPAWNITEMEX("PRESENT_ITEM", -40, 10, 0);
            TNT1 A 0 A_SPAWNITEMEX("PRESENT_ITEM", -10, 0, 0);
            TNT1 A 0 A_SPAWNITEMEX("PRESENT_ITEM", -10, 35, 0);
            stop;
    }
}

class XMASShockwave : SelacoACtor
{ 
    override void tick() {
        super.tick();
        if(level.time % 1 == 0) {
            A_SETSCALE(scale.x+0.072);
        }
        A_FADEOUT(0.03, FTF_REMOVE);
    }
    default {
        Speed 0;
        Height 64 ;
        Radius 32;
        Scale 0.1 ;
        RenderStyle "add";
        Alpha 0.65;
        +DROPOFF;
        +FLATSPRITE
        +NOINTERACTION
        +NOBLOCKMAP;
        +NOGRAVITY;
    }
    States 
    { 
     Spawn: 
        SHWK M 90 BRIGHT;
        stop;
    } 
} 

class Snowflake : SelacoActor {
    int frameID;

    override void PostBeginPlay() {
        super.PostBeginPlay();
        roll=random(0,360);
        frameID = random(0,8);
    }

    default {
        scale 0.07;
        RenderStyle "Add";
        +NOINTERACTION
        +ROLLSPRITE
        SelacoActor.sleepdistance 0;
    }

    states {
        Spawn:
            SNOF A 0;
            SNOF AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
                roll+=5;
                A_FADEOUT(0.02);
                frame = frameID;
            }
            stop;
    }

}

Class NUMBER1 : Actor {
    default {
        +Nointeraction
        scale 0.5;
    }
    states {
        Spawn:  
            NUM1 A 30 bright;
            stop;
    }
}
Class NUMBER2 : NUMBER1 {
    states {
        Spawn:  
            NUM2 A 30 bright;
            stop;
    }
}

Class NUMBER3 : NUMBER1 {
    states {
        Spawn:  
            NUM3 A 35 bright;
            stop;
    }
}

// So we can skip scripts with ACS
class isChristmasMode : CustomInventory {
    default {
        inventory.maxAmount 1;
    }
}

class Gifted_Rifle : Rifle {
    default {
        +WeaponBase.CHEATNOTWEAPON
        tag "$WEAPON_ASSAULTRIFLE_GIFTED";
        SelacoWeapon.weaponDamage 16;
    }
}

class gifted_shot_gun : shot_gun {
    default {
        +WeaponBase.CHEATNOTWEAPON
        tag "$WEAPON_SHOTGUN_GIFTED";
        SelacoWeapon.weaponDamage 28;
        SelacoWeapon.weaponKickback 30;
    }
    states {
        Altfire:
        TNT1 A 0 A_JumpIfInventory("ShotgunAmmo", 2, 2);
		TNT1 A 0 dryFire();
        Goto reloadweapon;
            TNT1 A 0 {
                invoker.doBurstShot = true;
            }
        goto fire;
    }
}

class Gifted_RoaringCricket : RoaringCricket {
    default {
        +WeaponBase.CHEATNOTWEAPON
        tag "$WEAPON_ROARINGCRICKET_GIFTED";
        SelacoWeapon.weaponDamage 78;
        SelacoWeapon.weaponKickback 6;
    }
}
// xmas gifted weapon pickups

class GiftedPickups : WeaponPickup {
    SelacoWeapon weaponPickup;
    string oldWeapon, newWeapon;
    property OldWeapon : oldWeapon;
    property Newweapon  : newweapon; 

    default {
        SelacoItem.randomizerSpawnChance 0;
        radius 30;
        height 30;
        -Nogravity
    }

    states {
        pickup:
            TNT1 A 0 {
                PlayerPawn dawn=players[0].mo;
                dawn.A_Takeinventory(invoker.OldWeapon);
                dawn.A_GiveInventory(invoker.Newweapon);
                invoker.weaponPickup = SelacoWeapon(dawn.FindInventory(invoker.Newweapon));
                dawn.A_printbold("You have acquired a more powerful version of this weapon!");
                dawn.player.PendingWeapon = invoker.weaponPickup;
            }
            stop;
    }
}
class ROARINGCRICKET_PICKUP_GIFTED : GiftedPickups {
	default {
		WeaponPickup.weaponID 2;
        GiftedPickups.oldWeapon "RoaringCricket";
        GiftedPickups.Newweapon "Gifted_roaringcricket";
		tag "$WEAPON_ROARINGCRICKET_GIFTED";
	}
}

class SHOTGUN_PICKUP_GIFTED : GiftedPickups {
	default {
        GiftedPickups.oldWeapon "shot_gun";
        GiftedPickups.Newweapon "gifted_shot_gun";
		tag "$WEAPON_SHOTGUN_GIFTED";
		WeaponPickup.weaponID 3;
	}
}

class RIFLE_PICKUP_GIFTED : GiftedPickups {
	default {
        SelacoItem.randomizerSpawnChance 0;
		WeaponPickup.weaponID 4;
        GiftedPickups.oldWeapon "Rifle";
        GiftedPickups.Newweapon "Gifted_Rifle";
		tag "$WEAPON_ASSAULTRIFLE_GIFTED";
	}
}

class ArachnoColaBomb : actor {
    default {
        +NOINTERACTION
    }
    states {
        spawn:
            TNT1 A 0;
            TNT1 A 0 {
                for(int x=0; x<10;x++) {
                    A_SPAWNITEMEX("SodaCan", 5, 0, 0,  frandom(1,2),0, frandom(8,10), angle:random(0,360));
                }
            }
            stop;
    }    
}

// Indicator to show who owns a present
class PresentIcon : SelacoActor {
    default {
        SelacoActor.sleepdistance 0;
        scale 0.20;
        +NOINTERACTION;
    }
	States {
		Spawn:
            TNT1 A 0;
			XMAS A 1 bright {
                if((master) && master.health >= 0) {
                    A_Warp(AAPTR_TARGET, 0, 0, master.height+20, 0, WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_NOCHECKPOSITION);
                } else {
                    destroy();
                }
            }
			loop;
	}
}

class detonationIcon : SelacoActor {
    default {
        SelacoActor.sleepdistance 0;
        scale 0.40;
        +NOINTERACTION;
    }
	States {
		Spawn:
            TNT1 A 0;
			XMAS BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 bright {
                if(master) {
                    A_Warp(AAPTR_TARGET, 0, 0, height+10, 0, WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_NOCHECKPOSITION);
                } else {
                    destroy();
                }
            }
            XMAS BBBBBBBBBB 1 BRIGHT {
                A_FADEOUT(0.1);
            }
			loop;
	}
}

class ExplosiveBear : Teddybear {
    bool primed;
    override void PostBeginPlay() {
        super.postbeginPlay();
        A_SpawnItemEx("detonationIcon", flags:SXF_SETMASTER);
    }

    default {
        damagetype "ExplosiveImpact";
        PickupableDecoration.ThrowVel 20;
        PickupableDecoration.MaxThrowVel 30;
    }

    states {
        Putdown:
            VOXE L 1;
            goto ThrowLooper;
        Throw:
            VOXE L 1;
			VOXE L 1 {
                isFalling = true;
                bBounceOnActors = false;
                primed = true;
                setStateLabel("ThrowLooper");
			}
		ThrowLooper:
			VOXE L 1 {
                if(isTouchingSurface()) 
                {
                    if(primed) 
                    {
                        A_SpawnItemEx("PrettyExplosionParticleRain");
                        A_explode(250,320);
                        destroy();
                    }
                    A_PLAYSOUND(landingSound, CHAN_AUTO, 1.0, 0, 0.95, 0, frandom(0.9,1.2));
                    setStateLabel("Spawn");
                }
			}
			loop;
    }
}