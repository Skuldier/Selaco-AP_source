class GoreHandler : EventHandler
{
    int currentGoreSetting;
	int currentDecalSetting;
	int censorSetting;
	int permaMode;
	class<GoreMaster> bloodRef;
    override void OnRegister() {
        bloodRef = 'GoreMaster';
        currentGoreSetting = CVar.FindCVar("r_BloodQuality").GetInt();
		currentDecalSetting = CVar.FindCVar("cl_maxdecals").GetInt();
		censorSetting = CVar.FindCVar("g_censoredmode").GetInt();
		permaMode = CVar.FindCVar("g_permanentGore").GetInt();
    }


	// Frequently update the CVAR
    override void WorldTick() {
        if(level.Maptime % 70 == 0) {
        	currentGoreSetting = CVar.FindCVar("r_BloodQuality").GetInt();
			currentDecalSetting = CVar.FindCVar("cl_maxdecals").GetInt();
			censorSetting = CVar.FindCVar("g_censoredmode").GetInt();
			permaMode = CVar.FindCVar("g_permanentGore").GetInt();
        }
    }

    static clearscope GoreHandler Instance() {
        return GoreHandler(EventHandler.Find("GoreHandler"));
    }
}


Class GoreMaster : SELACOACTOR {
	mixin GoreMasterMixin;
	decal OminousPurpleSplat;
	int bloodQuality;
	int censoredMode;
	int bloodLifeSpan;
	int permanentGore;
	int decalSetting;
	int spawnTime;
	bool goreSleeping;

	virtual void assignQualitySetting()
	{

		GoreHandler gh = GoreHandler.instance();

		bloodQuality = gh.currentGoreSetting;
		bloodLifeSpan = gh.currentDecalSetting;
		censoredMode = gh.censorSetting;
		spawnTime = level.Maptime;
		permanentGore = gh.permaMode;

		if(bloodQuality == 1)
		{
			bloodLifeSpan = 70;
		}
		actualBeginPlay();
	}
	
	virtual void actualBeginPlay()
	{
		
	}

	override bool shouldWake() {
		return Super.shouldWake() || goreSleeping;
	}

	void handleGoreSleep()
	{
		bMOVEWITHSECTOR = true;		// Gore on the ground should move with lifts
		
		if(permanentGore) {
			sleepIndefinite();
		}
		else {
			goreSleeping = true;
			sleep(bloodLifeSpan);
		}
	}

	// Used for gore that is always mostly permanent
	void tryGorePermaSleep()
	{
		if(isConsideredIdle()) {
			bMOVEWITHSECTOR = true;
			sleepIndefinite();
		}
	}


	default
	{
		gravity 0.8;
		+SelacoActor.preventSleep;		// Adding this makes it a requirement for all gore to manually sleep itself
		-SELACOACTOR.AllowWaterSplashing;
	}

	override void BeginPlay() {
		super.beginPlay();
		assignQualitySetting();

		// No blood for censored! Only bodies.
		if(censoredMode == 1 && !(self is "DeathceptionMaster" || self is "PurpleBloodHit")) {
			destroy();
		}
	}

	states {
		Death:
			TNT1 A 0;
			stop;
	}

}

mixin class GoreMasterMixin
{
	int bloodIsRed;

	void SprayBloodAlien() {
		//string BloodDecalTex;
		//if(getCvar("g_bloodColor") == 1) {
		//	//BloodDecalTex = "BloodSplat";
		//} else {
		//	//BloodDecalTex = "OminousPurpleSplat";
		//}
		//A_SprayDecal(BloodDecalTex, 172);
	}

}

Class GoreSystem : GoreMaster {

	int TicCounter;
	String SpriteName;
	int DeathFrame;
	int firstTick;
	int animationFrame;
	bool isFrozen;

	void ShootLimbPiece(String limbType, int shootblood = 1) {
		if(firstTick == 0) {
			//sprite = GetSpriteIndex(limbType);
			firstTick++;
		}
		Frame = animationFrame;
		if (TicCounter == 0) {
				//A_ChangeVelocity(frandom(-3, 3), 0, frandom(-3,3), frandom(20, 40), CVF_REPLACE );
		}
		A_SetTics(1);
		A_SetRoll(roll + 15);
		TicCounter++;
	}

    void ShootBloodChunks() {
		TicCounter++;
		if (spawnTime > 5 && ticCounter % 2 == 0) {
			if(bloodQuality > 0)
			{
				A_SpawnDefinedParticle("PurpleSplatterEffectDefinition");
				A_SpawnItem("OMINOUS_PURPLESPOT",0,0,0,1); 
			}
			if(bloodQuality > 3) {
				A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 0, 0, random (0, 360), 2, random (30, -40));
			}
			if(bloodQuality >= 4) {
				A_SpawnDefinedParticle("PurpleBloodMissileSmallDefinition", 0, 0, 0, frandom(1,2), frandom(-3, 3), 3);
			}
		}
	}

	Default {
		-SelacoActor.SlopeAlignment
		+RollSprite;
		+SelacoActor.IsTrash;
		health 300;
		radius 2;
		height 2;
		+USEBOUNCESTATE;
		+Doombounce
		scale 0.36;
		+NoBlockMap;
		+THRUACTORS
		+DONTTHRUST
		-NoGravity;
        -ACTIVATEIMPACT;
        -ACTIVATEMCROSS;
        -ACTIVATEPCROSS;
		damagefactor "Crush", 50.0;
		//damagefactor "Plasma", 99000.0
		damagefactor "Trample", 2.0;
		damagefactor "Kick", 9.0;
		damagefactor "Explosive", 0.1;
		damagefactor "ExplosiveImpact", 9.1;
		damagefactor "Shrapnel", 100.0;
		damagefactor "Melee", 9.0;
		damagefactor "SuperPunch", 9.0;
		damagefactor "Plasma", 20.0;
		painchance 255;
		speed 9;
		gravity 0.55;
		PainChance 256;
		BounceFactor 0.7;
		WallBounceFactor 0.3;
		BounceCount 3;
	}
	States {
		DUMMYLOADER:
			GRAR ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			GLAR ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			AARM ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			ALEG ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			GLEG ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			GCHE ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			AHAN ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			BONE ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			GHEA ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		Death:
			TNT1 A 0 {
				//Sprite = GetSpriteIndex(spriteName);
				A_SpawnItem("OMINOUS_PurpleSpot",0,0,0,1);
			}
			TNT1 A 2;
			TNT1 A 1 {
				frame = invoker.deathFrame;
				A_SetRoll(random(-15, 15) | SPF_INTERPOLATE);
				if(vel.z == 0) {
					handleGoreSleep();
				}
			}
			TNT1 A 0 {
				SetStateLabel("FadeOut");
			}
		FadeOut:
			TNT1 AAAAAAAAAAAAA 1 {
				frame = invoker.deathFrame;
				A_FADEOUT(0.1);
			}
			stop;
		WaitForWipe:
			TNT1 A -1 {
				frame = invoker.deathFrame;
			}
			loop;
		Pain:
			TNT1 A 1 {
				frame = invoker.deathFrame;
			}
		Destroy:
			TNT1 A 45 {
				frame = invoker.deathFrame;
			}
			TNT1 AAAA 2 {
				frame = invoker.deathFrame;
				A_FADEOUT(0.25);
			}
			stop;
		Remove:
			TNT1 A 0;
			stop;
	    VACBOTCleaning:
			TNT1 AAAAAAAAAA 1 {
				frame = invoker.deathFrame;
				A_FADEOUT(0.1);
			}
			stop;
	}
}

Class CutoffArmRight : GoreSystem
{
	// Available Arm gibs
	static const String ArmGibs[] =
		{
			"GAR1",
			"GAR2",
			"GAR3"
		};	

	string armToSpawn;

	override void PostBeginPlay() {
		super.PostBeginPlay();
		armToSpawn = ArmGibs[random(0, ArmGibs.size()-1)];
		A_ChangeVelocity(frandom(-3.5,3.5), frandom(-1.4, -4.7), frandom(2, 7), CVF_RELATIVE | CVF_REPLACE );
	}
	
	Default {
		+SELACOACTOR.AllowWaterSplashing;
		+MISSILE;
        +ACTIVATEIMPACT;
        +ACTIVATEMCROSS;
        +ACTIVATEPCROSS;
		speed 5;
		BounceCount 4;
		BounceFactor 0.5;
		decal "OminousPurpleSplat";
		scale 0.4;
	}
	States
	{
		Precache:
			GAR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			GAR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			GAR3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			stop;
		Spawn:
			TNT1 A 0;
			TNT1 A 0 {
				sprite = GetSpriteIndex(armToSpawn);
			}
		looper:
			TNT1 ABCDEFGHIJ 2 {
				ShootBloodChunks();
				limitLifetime();
			}
			loop;
		Bounce:
			TNT1 A 0
			{
				if(level.Maptime > 120)
				{
					A_SpawnDefinedParticle("PurpleSplatterEffectBigDefinition");
					A_PLAYSOUND("gibs/bounce");
				}
			}
			goto looper;
		Death:
			TNT1 A 0
			{
				if(level.Maptime > 90)
				{
					A_PLAYSOUND("gibs/bounce", CHAN_AUTO);
				}
			}
			TNT1 K 100;
		    TNT1 K 1 {
				A_ChangeLinkFlags(0);
				handleGoreSleep();
			}
		FadeOutLimb:
			TNT1 KKKKKKKKKK 1 A_FADEOUT(0.1);
			stop;
}
}

Class CutoffArmLeft : CutoffArmRight
{
	override void postbeginPlay() {
		super.PostBeginPlay();
		bXflip = true;
		A_ChangeVelocity(frandom(-0.5,0.5), frandom(1.9, 4.7), frandom(2, 7), CVF_RELATIVE | CVF_REPLACE );
	}

	states {
		index:
			GAR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			GAR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			GAR3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			stop;
	}
}

class JuggernautLegArmor : GoreSystem {
	Default {
		speed 2;
		BounceFactor 0.6;
		BounceCount 4;
		+THRUACTORS;
		+MISSILE;
		+DOOMBOUNCE
		+SELACOACTOR.AllowWaterSplashing;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			JGP1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			TNT1 A 1 {
				A_ChangeVelocity(frandom(3, 6), frandom(-3,-6), frandom(5, 10), CVF_RELATIVE);
				invoker.isFrozen = true;
				bMissile = true;
			}
		Spawn1:
			JGP1 ABCDEFG 3;
			loop;
		Death:
			JGP1 A -1 {
				FRAME = random(7,8);
			}
		loop;
	}	
}

class JuggernautLegArmorMirrored : JuggernautLegArmor {
	Default {
		+XFLIP;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			JGP1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			TNT1 A 1 {
				A_ChangeVelocity(frandom(3, 6), frandom(3,6), frandom(5, 10), CVF_RELATIVE);
				invoker.isFrozen = true;
				bMissile = true;
				setStateLabel("Spawn1");
			}
	}	
}

Class CutoffLegFrozen : GoreSystem
{

	Default {
		+SELACOACTOR.AllowWaterSplashing;
		speed 7;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			ALEG ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			TNT1 A 1 {
				bMissile = true;
				invoker.isFrozen = true;
			}
			TNT1 A 0 A_Jump(256, "Spawn1");
		Spawn1:
			TNT1 A 1 {
				frame = 3;
				invoker.DeathFrame = 0;
				invoker.AnimationFrame = 0;
				invoker.SpriteName = "ALEG";
				ShootLimbPiece(invoker.SpriteName);
				limitLifetime();
			}
			loop;
		Spawn2Looper:
			ALEG B 1 {
				frame = 2;
				invoker.DeathFrame = 2;
				invoker.AnimationFrame = 2;
				invoker.SpriteName = "ALEG";
				ShootLimbPiece(invoker.SpriteName);
				limitLifetime();
			}
			loop;
	}
}

class AlienIntestine : GoreSystem {


	int frameID;
	string spriteToUse;
	override void PostBeginPlay() {
		super.PostBeginPlay();
		spriteToUse = "PGIN";
		A_SETSCALE(scale.x + frandom(0.04,0.14));
		A_CHANGEVELOCITY(0, 0, random(2,7), CVF_RELATIVE);
		A_SETANGLE(random(0,360));
		a_setroll(random(0,360));
		if(random(0,1) == 1) {
			bxflip = true;
		}
		if(random(0,1) == 1) {
			byflip = true;
		}
		frameID = random(0,4);
	}

	override void tick()
	{
		super.tick();
		spawnBloodTrail();
	}

	virtual void spawnBloodTrail()
	{
		if(vel.length() > 0 && ((bloodQuality >= 3 && level.time % 3 == 0) || bloodQuality >= 4))
		{
			A_SpawnDefinedParticle("PurpleSplatterEffectTinyDefined");
		}
	}

	default {
		+MISSILE;
		+ROLLSPRITE;
		+thruactors
		speed 4;
        -ACTIVATEIMPACT;
        -ACTIVATEMCROSS;
        -ACTIVATEPCROSS;
        +GHOST;
		scale 0.12;
		BounceFactor 0.3;
		BounceCount 4;
		decal "PurpleOrgans";
	}
	
	states {
		Indexer:
			PGIN A 0;
		Spawn: 
			TNT1 A 0;
			TNT1 A 0
			{
				sprite = getSpriteIndex(spriteToUse);
				A_SETANGLE(random(0,360));
			}
			TNT1 ABCD random(1,3);
		Looper:
			TNT1 ABCDE 3 {
				A_SETROLL(roll + 25);
				limitLifetime();
			}
			loop;
		Death:
			TNT1 A 100 {
				A_PLAYSOUND("GORE/SLIMEYSPLAT", CHAN_AUTO, 1.0);
				A_SETROLL(0);
				bFlatSprite = true;
				frame = frameID;
			}
			TNT1 A 1
			{
				frame = frameID;
				handleGoreSleep();
			}
			TNT1 AAAAAAAAAA 1 
			{
				frame = frameID;
				A_FADEOUT(0.1);
			}
			stop;
	}
}

class AlienIntestineSmall : AlienIntestine
{
	default
	{
		speed 2;
		scale 0.07;
	}
}

// Spawns Alien Brain Pieces!
class AlienBrainPiece : goreSystem {
	static const String brainList[] =
		{
			"AlienBrainPiece1",
			"AlienBrainPiece2",
			"AlienBrainPiece3"
	};	

	string brainToSpawn;

	override void PostBeginPlay() {
		brainToSpawn = brainList[random(0, brainList.size()-1)];
		super.PostBeginPlay();
	}

	override void actualBeginPlay()
	{
		if(bloodQuality == 0)
		{
			destroy();
		}
	}

	default {
        -ACTIVATEIMPACT;
        -ACTIVATEMCROSS;
        -ACTIVATEPCROSS;
        +GHOST;
		+SELACOACTOR.AllowWaterSplashing;
    	scale 0.85;
	}

	states {
		spawn:
			TNT1 A 0;
			TNT1 A 0  {
				A_SpawnItemEx(brainToSpawn, frandom(-1,1), frandom(-1,1), 0, frandom(-5,5), frandom(-5,5), frandom(2,3));
			}
			stop;
	}
}

class AlienBrainPieceSlow : AlienBrainPiece
{

	override void PostBeginPlay() {
		super.PostBeginPlay();
		brainToSpawn = brainList[random(0, brainList.size()-1)];
	}

	static const String brainList[] =
		{
			"AlienBrainPiece1Slow",
			"AlienBrainPiece2Slow",
			"AlienBrainPiece3Slow"
		};	
	states 
	{
		spawn:
			TNT1 A 0;
			TNT1 A 0  {
				A_SpawnItemEx(brainToSpawn, frandom(-1,1), frandom(-1,1), 0, frandom(-5,5), frandom(-5,5), frandom(2,3));
			}
			stop;
	}
}

// TO-DO: Chance based on Gore Quantity
class AlienBrainPiece1 : GoreSystem {
	string spriteNameBrain;
	int frameLimit, currentFrame, frameID;
	property frameLimit	: frameLimit;
	property spriteNameBrain	: spriteNameBrain;

	override void PostBeginPlay() {
		super.PostBeginPlay();
		assignParameters();
		if(random(0,1) == 1) {
			bxflip = true;
		}
	}

	virtual void spawnBloodTrail()
	{
		A_SPAWNITEMEX("PurpleSplatterEffectUltraTiny", 0, 0, 10);
	}

	virtual void assignParameters()
	{
		A_SETANGLE(random(0,360));
		A_SETSCALE(frandom(0.6, 0.8), frandom(0.6,0.8));
		A_CHANGEVELOCITY(0, 0, frandom(1,7), CVF_RELATIVE);
	}

	default {
		+MISSILE;
		+ROLLSPRITE;
		+USEBOUNCESTATE
		AlienBrainPiece1.frameLimit 3;
		AlienBrainPiece1.spriteNameBrain "PBR1";
		SelfLighting "ab2ba3";
		speed 5;
		BounceFactor 0.3;
		BounceCount 4;
	}

	states {
		Indexer:
			PBR1 A 0;
		Spawn: 
			TNT1 A 0;
			TNT1 A 0 {
				sprite = getSpriteIndex(spriteNameBrain);
				frameID = random(0,3);
			}
		Looper:
			TNT1 A 2 {
				if(r_bloodquality > 2) {
					spawnBloodTrail();
					limitLifetime();
				}
				if(currentFrame == frameLimit) {
					currentFrame = 0;
				}
				frame = currentFrame;
				currentFrame++;
				A_SETANGLE(angle+45);
				A_SETROLL(roll+45);
			}
			loop;
		Bounce:
			TNT1 A 0
			{
				if(level.Maptime > 90)
				{
					A_PLAYSOUND("gibs/bounce", CHAN_AUTO);
				}
			}
		Death:
			TNT1 A 100 {
				A_SETROLL(0);
				bFlatSprite = true;
				frame = frameID;
			}
			TNT1 A 1 
			{
				frame = frameID;
				handleGoreSleep();
			}
			TNT1 A 0
			{
				bPreventSleep = true;
			}
			TNT1 AAAAAAAAAA 1 A_FADEOUT(0.1);
			stop;
	}
}
class AlienBrainPiece2 : AlienBrainPiece1 {

	default {
		AlienBrainPiece1.frameLimit 4;
		AlienBrainPiece1.spriteNameBrain "PBR2";
	}
	states {
		Indexer:
			PBR2 A 0;
	}
}
class AlienBrainPiece3 : AlienBrainPiece1 {

	default {
		AlienBrainPiece1.frameLimit 1;
		AlienBrainPiece1.spriteNameBrain "PBR3";
	}
	states {
		Indexer:
			PBR3 A 0;
	}
}

Class CutoffLeg : GoreSystem
{

	Default {
        +ACTIVATEIMPACT;
        +ACTIVATEMCROSS;
        +ACTIVATEPCROSS;
		+SELACOACTOR.AllowWaterSplashing;
		scale 0.22;
		speed 4;
		decal "OminousPurpleSplat";
		Bouncecount 2;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			GLEG ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			TNT1 A 0 {
				A_ChangeVelocity(frandom(3, 6), frandom(3,5), frandom(5, 10), CVF_RELATIVE);
				bMissile = true;
			}
		Looper:
			GLEG ABCDEFGHIJ 2 {	
				ShootBloodChunks();
				limitLifetime();
				bMissile = true;
			}
			loop;
		Bounce:
			TNT1 A 0
			{
				if(level.Maptime > 120)
				{
					A_SpawnDefinedParticle("PurpleSplatterEffectBigDefinition");
					A_PLAYSOUND("gibs/bounce");
				}
			}
			goto looper;
		Death:
			GLEG K 100
			{
				if(level.Maptime > 90)
				{
					A_PLAYSOUND("gibs/bounce", CHAN_AUTO);
				}
			}
		    GLEG K 1 {
				handleGoreSleep();
			}
		FadeOutLimb:
			GLEG KKKKKKKKKK 1 A_FADEOUT(0.1);
			stop;
	}
}

Class CutoffLegMirror : CutoffLeg
{

	Default {
		speed 4;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 {
				A_ChangeVelocity(frandom(3, 6), frandom(-3,-6), frandom(5, 10), CVF_RELATIVE);
				A_SETSCALE(-0.22, 0.22);
				SetStateLabel("Looper");
			}
	}
}

Class CutoffChest : GoreSystem
{

	Default {
        +ACTIVATEIMPACT;
        +ACTIVATEMCROSS;
        +ACTIVATEPCROSS;
		+SELACOACTOR.AllowWaterSplashing;
		speed 3;
		BounceCount 4;
		BounceFactor 0.7;
		scale 0.2;
		radius 5;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			GCHE ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			TNT1 A 0 {
				invoker.SpriteName = "GCHE";
				invoker.deathFrame = 8;
				A_ChangeVelocity(frandom(3, 6), frandom(-3, -5), frandom(2, 7), CVF_RELATIVE | CVF_REPLACE );
				bMissile = true;
				setStateLabel("Spawn1");
			}
		Spawn1:
			GCHE ABCDEFGH 2 {
				ShootBloodChunks();
				limitLifetime();
			}
			loop;
		Death:
			GCHE J 5
			{
				if(pos.z == floorz || vel.length() == 0)
				{
					setStateLabel("EnterSleep");
				}
			}
			loop;
		EnterSleep:
		    GCHE J 1 {
				handleGoreSleep();
			}
		FadeOutLimb:
			GCHE JJJJJJJJJJJJJJ 1 A_FADEOUT(0.1);
			stop;
	}
}


Class BonePart : GoreSystem
{
	int deathSpriteID;
	static const string boneSpriteIndexes[] = {"BONE", "BON2", "BON3"}; 

	override void postbeginPlay()
	{
		super.postbeginPlay();
		spriteName = boneSpriteIndexes[random(0, boneSpriteIndexes.size()-1 )];
		deathSpriteID = random(7,9); // Idle Sprite
	}

	override void actualBeginPlay()
	{
		if(bloodQuality == 0)
		{
			destroy();
		}
	}

	Default {
        -ACTIVATEIMPACT;
        -ACTIVATEMCROSS;
        -ACTIVATEPCROSS;
        +GHOST;
		speed 3;
		radius 5;
		seesound "bonepart/bounce";
		scale 0.19;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			BONE ABCDEFGHIJ 0;
			BON2 ABCDEFGHIJ 0;
			BON3 ABCEDFGHIJ 0;
			TNT1 A 0 {
				A_ChangeVelocity(frandom(-2, 2), frandom(-2,2), frandom(2, 6), CVF_RELATIVE);
				if (random(0,1) == 1) {
					bxflip = true;
				}
				A_SETROLL(random(0,360));
				sprite = getSpriteIndex(spriteName);
				bMissile = true;
			}
		Looper:
			TNT1 ABCDEFG 2 {
				A_SETROLL(roll+20);
			}
		loop;
		Death:
			TNT1 A 100
			{
				A_SETROLL(0);
				frame = deathSpriteID;
			}
			TNT1 A 1 {
				frame = deathSpriteID;
				handleGoreSleep();
			}
		FadeOutLimb:
			TNT1 AAAAAAAAAAAAA 1 
			{
				frame = deathSpriteID;
				A_FADEOUT(0.1);
			}
			stop;
	}
}


class BonePiece : GoreSystem {
	int deathSpriteID;
	static const string boneSpriteIndexes[] = {"BONE", "BON2", "BON3"}; 

	default {
		scale 0.19;
	}

	override void postbeginPlay()
	{
		super.postbeginPlay();
		spriteName = boneSpriteIndexes[random(0, boneSpriteIndexes.size()-1 )];
		deathSpriteID = random(7,9); // Idle Sprite
	}

	states {
		Spawn:
			BONE ABCDEFGH 0;
			BON2 ABCDEFGH 0;
			BON3 ABCDEFGH 0;
		Spawn:
			TNT1 A 0;
			TNT1 A 100
			{
				sprite = getSpriteIndex(spriteName);
				frame = deathSpriteID;
			}
		Death:
			TNT1 A 0;
			TNT1 A 1 {
				frame = deathSpriteID;
				handleGoreSleep();
			}
			TNT1 A 0;
		FadeOutLimb:
			TNT1 AAAAAAAAAAAAA 1 
			{
				frame = deathSpriteID;
				A_FADEOUT(0.1);
			}
			stop;	
	}

}

class BonePieceLarge : BonePiece {
	default {
		scale 0.3;
	}
}

Class BaseHead : GoreSystem
{
	
	override void PostBeginPlay() {
		super.PostBeginPlay();
		isFlying = true;
	}

	override void Touch(actor toucher) {
		int toucherVelocity = abs(toucher.vel.x) + abs(toucher.vel.y);
		int xVelocity = toucherVelocity + 2;
		int zVelocity = frandom(2,3);
		if(toucher && !isFlying && (toucher is 'PlayerPawn' || toucher.bIsMonster)) {
			wake();
			A_SETSIZE(5, 5);
			if(toucher is 'PlayerPawn') {
				Stats.AddStat(STAT_HEADS_KICKED, 1, 0);
				zVelocity = frandom(6,9);
			}
			target = toucher;
			if(target) {
				A_Facetarget();
			}
			A_ChangeVelocity(xVelocity*-1, 0, zVelocity, CVF_RELATIVE);
			SetStateLabel("KickInitiated");
		}
	}

	bool isFlying;
	int frameID;
	string SpriteToUse;
	int BloodCount;
	Default {
		+SelacoActor.AllowWaterSplashing;
		-SelacoActor.WakeNearPlayer;
		+SelacoActor.SleepWhenIdle;
		-SelacoActor.PreventSleep;
		speed 13;
		BounceCount 4;
		seeSound "impact/decapitatedhelmet";
		gravity 0.7;
		PainChance 255;
		Radius 5;
		height 5;
		+special
		+Shootable;
	}
	States
	{
		Indexer:
			GHEA A 0; 
		Spawn:
			TNT1 A 0;
			TNT1 A 0 {
				sprite = GetSpriteIndex(SpriteToUse);
				if (random(0,1) == 0) {
					A_setscale(-0.23, 0.23);
				} else {
					A_setscale(0.23, 0.23);
				}
				invoker.BloodCount = 3;
			}
		SpawnActual:
			TNT1 ABCDEFGH 3 {
                frameID++;
                if(frameID == 8)
                {
                    frameID = 0;
                }
				bThruActors = true;
				bMissile = true;
				bBounceonfloors = true;
				bBounceonWalls = true;
				bBounceonCeilings = true;
				if (CheckProximity("TrashBin_open", 30)) {
					setStateLabel("ThrownIndumpster");
				}
				if (invoker.BloodCount > 0) {
				  	ShootBloodChunks();
				}
			}
			loop;
		Bounce:
		    TNT1 A 0
            {
				for(int x=0;x<5;x++)
				{
					A_SpawnDefinedParticle("PurpleSplatterEffectTinyDefined", frandom(-10,10), frandom(-10,10), frandom(0,5), frandom(2,3), 0, frandom(1.3,1.7), angle:random(0,360));
				}
                EmitDefinition('ShortSpark360ParticleDefinition', chance: 0.75, numTries: 15, angle:frandom(0, 360), pitch:frandom(0, 40), speed:frandom(-1,1));
            }
			goto SpawnActual;
		ThrownIndumpster:
			TNT1 A 0 A_PlaySound("trashbin/glass");
			TNT1 A 0 A_SpawnItemEx("ItemGotThrownIndumpster");
			GHEA AAAAAAAAAAAAAAAAAAAA 1 A_FADEOUT(0.08);
			stop;
		Death:
			TNT1 A 0  {
				if (invoker.BloodCount > 0) {
					A_SpawnItem("OMINOUS_PurpleSpot",0,0,0,1);
				}
			}
			TNT1 A 0 A_SetRoll(0);
		WaitForKick:
			TNT1 A 0 {
				A_SETSIZE(25, 25);
				isFlying = false;
				bThruActors = false;
				BounceCount = 3;
				BounceFactor = 0.6;
				A_ChangeLinkFlags(0);
			}
			TNT1 J -1;
			loop;
		Pain:
		KickInitiated:
			TNT1 A 0 A_FaceTarget;
			TNT1 A 0 A_PlaySound("impact/headkick");
			TNT1 A 1 {
				if(invoker.BloodCount > 0) {
					invoker.BloodCount--;
					A_SpawnProjectile ("PurpleSplatterEffectSmall", 7, 0, random (0, 360), 2, random (30, 90));
					A_SpawnProjectile ("PurpleSplatterEffectSmall", 7, 0, random (0, 360), 2, random (30, 90));
					A_SpawnDefinedParticleProjectile("PurpleBloodMissileDefinition", 7, 0, random (0, 360), 2, random (30, 90));
				}
			}
			goto SpawnActual;
	}
}

class XDeathAlienHead : BaseHead {
	Override void postbeginPlay() {
		super.postbeginPlay();
		SpriteToUse = "GHEA";
	}
	states {
		indexer:
			GHEA A 0;
	}
}

class XDeathEngineerHead : BaseHead {
	Override void postbeginPlay() {
		super.postbeginPlay();
		SpriteToUse = "EHEA";
	}
	states {
		indexer:
			EHEA A 0;
	}
}


// RED BLOOD
class HumanBloodSplattersPermanent : DecalLeader {
	mixin Steppable;

	int frameID;


	override void PostBeginPlay() {
		super.PostBeginPlay();

		if(bDestroyed) {
			return;	// Do not continue, becomeSteppable will change link flags and completely destroy the blockmap!
		}

		frameID = random(0,9);
		//SetOrigin((pos.x, pos.y, floorz), false);
		if(getCvar("g_censoredmode")) {
			destroy();
			return;
		}

		passiveStepSound = "step/blood";
		bSteppableIsBloody = true;
		becomeSteppable(8, 2);
	}

	default {
		DistanceCheck "r_ThingLOD";
		scale 0.08;
		radius 5;
		gravity 10;
	}
	states {
		Spawn:
			TNT1 A 0;
			VOXE L 5
			{
				frame = frameID;
			}
			TNT1 A 0
			{
				checkEvenSurface(90, 25, true);
			}
			VOXE L 30
			{
				frame = frameID;
			}
			VOXE L -1 {
				SleepIndefinite();
				frame = frameID;
			}
			stop;
	}
}

// RED BLOOD
class HumanBloodSplatters : HumanBloodSplattersPermanent {
	override void postBeginplay()
	{
		super.PostbeginPlay();
		if(hasNearbyDecal(17)) {
            destroy();
        }
	}
	default
	{
		renderstyle "Normal";
		scale 0.47;
		+FLATSPRITE
	}
	states {
		Indexer:
			SPLT ABCDEFGHIJKLMNOPQ 0;
		Spawn:
			TNT1 A 0;
			SPLT L 800 {
				frame = frameID;
			}
			TNT1 A 0
			{
				if(getCvar("g_permanentgore") == 1)
				{
					SleepIndefinite();
				}
			}
			TNT1 A 0 {
				A_SetRenderStyle(STYLE_TRANSLUCENT, 1.0);
			}
			SPLT LLLLLLLLLL 1 {
				A_FADEOUT(0.1, FTF_REMOVE);
				frame = frameID;
			}
			stop;
	}
}

// TO-DO: IMPROVE THIS AFTER RD2021
class HumanBloodSplattersPermanentCeiling : SelacoActorStatic {
	int frameID;
	default {
		DistanceCheck "r_ThingLOD";
		+FLATSPRITE
		renderstyle "translucent";
		+NOGRAVITY;
		height 1;
		scale 0.6;
		alpha 0.73;
	}
	states {
		Spawn:
			TNT1 A 0;
			SPLT A 35;
			SPLT A -1 {
				bNointeraction = true;
				invoker.frameID = random(0,9);
				sprite = GetSpriteIndex("SPLT");
				frame = invoker.frameID;
			}
			stop;
	}
}

class GibbedHumanSprites : SELACOACTORSTATIC {
	int frameID;

	Override void postbeginPlay() {
		super.postbeginPlay();
		if(getCvar("g_censoredmode")) {
			destroy();
		}
	}

	default {

	}
	states {
		spawn:
			TNT1 A 0;
			gibz A -1 {
				invoker.frameID = random(0,4);
				sprite = GetSpriteIndex("gibz");
				frame = invoker.frameID;
			}
			stop;
		}
}

class GibbedHuman : GibbedHumanSprites {
	const BLOOD_DECAL_SPRAYS = 7;
	const BLOOD_FLOOR_DECALS = 3;

	int bloodFloorDecals;
	int bloodWallDecals;

	int gibbedHumanFlags;

	property BloodFloorDecals : bloodFloorDecals;
	property BloodWallDecals  : bloodWallDecals;
	flagdef  goreChunkSprite : gibbedHumanFlags, 1;

	override void beginPlay() 
	{
		super.beginPlay();
		if(GetCvar("CensoredMode") == 1) {
			destroy();
		}

		// Gib sprite
		if(bgoreChunkSprite)
		{
			if(random(0,100) <= 75 && !CheckBlock()) {
				A_SPAWNITEMEX("CivilianCorpse1");
			} else {
				A_SpawnItemEx("GibbedHumanSprites", frandom(-3, 3),frandom(-3, 3),0);
			}
		}

		// Position floor and wall decals
		spawnBloodDecals();

		// Go back to normal radius. We dont need a radius for this guy anyway but whatever man.
		A_SETSIZE(5,5);
	}

	void spawnBloodDecals()
	{
		for(int x=0;x<=bloodFloorDecals;x++) 
		{
			A_SpawnItemEx("HumanBloodSplattersPermanent", frandom(10,60), angle:random(0,360));
		}
		for(int x=0;x<bloodWallDecals;x++)
		{
         	angle = random(0,360);
            vector3 sprayDirection = vecFromAngle(angle, pitch);
			A_SprayDecal("BloodSplat", 150, offset:(0,0,frandom(0,80)), direction:sprayDirection);
		}		
	}

	default 
	{
		radius 40;
		GibbedHuman.BloodFloorDecals 8;
		GibbedHuman.BloodWallDecals 10;
		+GibbedHuman.goreChunkSprite
		+FLATSPRITE
	}
	states 
	{
		spawn:
			TNT1 A 0;
			stop;
	}
}
class SuperGibbedHuman : GibbedHuman {
	default 
	{
		GibbedHuman.BloodFloorDecals 20;
		GibbedHuman.BloodWallDecals 13;
		+GibbedHuman.goreChunkSprite
		+FLATSPRITE
	}
}

class CivilianCorpseSpawner : SelacoActor {
	override void beginPlay() {
		A_SPAWNITEMEX("CivilianCorpse1");
		for(int x=0;x<=9;x++) 
		{
			A_SpawnItemEx("HumanBloodSplattersPermanent", frandom(10,60), angle:random(0,360));
		}
		for(int x=0;x<16;x++)
		{
         	angle = random(0,360);
            vector3 sprayDirection = vecFromAngle(angle, pitch);
			A_SprayDecal("BloodSplat", 150, offset:(0,0,frandom(0,80)), direction:sprayDirection);
		}	
		destroy();
	}
}

class CivilianCorpse1 : SelacoActor {
	default {
		+SHOOTABLE;
		+DONTTHRUST
		+NOBLOODDECALS;
		radius 25;
		height 8;
		BloodType "Selaco_RedBlood_Armor";
		-SOLID;
		+CASTSPRITESHADOW
		+BUDDHA
		scale 0.26;
	}
	states {
		Spawn:
			TNT1 A 0;
			CIVI A -1 {
				bxflip = random(0,1) == 1 ? 1 : 0; 
				frame = random(0,12);
			}
			stop;
	}
}

class HumanSplatterSpawner : GibbedHuman
{

	default
	{
		GibbedHuman.BloodFloorDecals 20;
		GibbedHuman.BloodWallDecals 9;
		-GibbedHuman.goreChunkSprite
	}

	states
	{
		Spawn:
			TNT1 A 1;
			stop;
	}
}

// Used to ''shoot'' blood decals on nearby walls.
class BloodMissile : actor {
	override void beginPlay() {
		super.beginPlay();
		if(getCvar("g_censoredmode")) {
			destroy();
		}
	}
	default {
		+missile;
		radius 5;
		speed 13;
		Decal "BloodSplat";	
	}
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 0 A_ChangeVelocity(7, 0, frandom(2,3), CVF_RELATIVE);
			TNT1 A 90;
			stop;
		death:
			stop;
	}
}

class PurpleGoreSmokeEffect : ImpactEffect {
	mixin GoreMasterMixin;
    static const String SmokeEffects[] = {"PHI1", "PHI2", "PHI3"};
	int pickedArray;
	default {
		+ROLLSPRITE;
		RenderStyle "Translucent";
		SelfLighting "471344";
		scale 0.12;
		alpha 0.91;
	}

	override void tick()
	{
		super.tick();
		A_SETSCALE(scale.x+0.02);
	}

	states {
        Indexer:
            // Index the whole thing. We don't want another instability problem.
            PHI1 A 0;
            PHI2 A 0;
            PHI3 A 0;
        Spawn:
            TNT1 A 0 {
				A_SETROLL(frandom(0,360));
                pickedArray = random(0,SmokeEffects.size() -1);
                A_CHANGEVELOCITY(frandom(-0.3,-0.6),0,0.5);
            }
            TNT1 A 0 {
                Sprite = GetSpriteIndex(SmokeEffects[pickedArray]);
            }
		Effect:
			TNT1 ABCDEFGHIJKLMNOP 1 a_fadeout(0.07);
			stop;
	}
}

class PurpleGoreSmokeEffectTransparant : PurpleGoreSmokeEffect {
	default {
		+ROLLSPRITE;
		RenderStyle "Translucent";
		SelfLighting "471344";
		scale 0.33;
		alpha 0.45;
	}
	states
	{
		Effect:
			TNT1 ABCDEFGHIJKLMNOP 1 a_fadeout(0.02);
			stop;
	}
}

class BloodGoreSmokeEffect : PurpleGoreSmokeEffect
{
	default
	{
		SelfLighting "";
	}
	states
	{
        Spawn:
        TNT1 A 0 {
			A_SETROLL(frandom(0,360));
            pickedArray = random(0,SmokeEffects.size() -1);
            A_CHANGEVELOCITY(frandom(-0.3,-0.6),0,0.5);
			Sprite = GetSpriteIndex(SmokeEffects[pickedArray]);
			setStateLabel("effect");
        }
	}
}

class PurpleGoreSmokeEffectSmaller : PurpleGoreSmokeEffect {
	default {
		scale 0.16;
		SelfLighting "471344";
	}
	states {
        Spawn:
			TNT1 A 0;
            TNT1 A 0 {
				A_SETROLL(frandom(0,360));
                pickedArray = random(0,SmokeEffects.size() -1);
                A_CHANGEVELOCITY(frandom(-0.6,-1.1),0,1);
            }
            TNT1 A 0 {
                Sprite = GetSpriteIndex(SmokeEffects[pickedArray]);
            }
		Effect:
			TNT1 ABCDEFGHIJKLMNOP 1 a_fadeout(0.06);
			stop;
	}
}