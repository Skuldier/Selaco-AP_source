class SentryGunBaseRocketMounted : SelacoActor {

    override void PostBeginPlay()
    {
        super.PostBeginPlay();

        actor sentryGunRocket;
        bool uglyNerd;

        [uglyNerd, sentryGunRocket] =A_SpawnItemEx("SentryGunTurretRocket", 0, 0, 46, 0, 0, 0, 0, SXF_SETMASTER);
        sentryGunRocket.args[0] = args[0];
    }

    default
    {
        +SHOOTABLE
        +STANDSTILL
        +FLOORCLIP
        +NOBLOODDECALS
        +BUDDHA
        +SOLID;
        SELACOACTOR.SleepDistance 0;
        BloodType "Selaco_Blood_MECHANICAL", "Selaco_Blood_MECHANICAL", "Selaco_Blood_MECHANICAL";
        Radius 20;
        Height 35;
        PainChance 255;
        mass 600;
        HEALTH 1050;
        Damage 0;
    }

    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class SentryGunBasePlayerLocked : SentryGunBaseRocketMounted {

    actor sentryGunPlayerLocker;
    bool uglyNerd;

    override void PostBeginPlay()
    {
        [uglyNerd, sentryGunPlayerLocker] =A_SpawnItemEx("SentryGunTurretPlayerLocked", 0, 0, 34, 0, 0, 0, 0, SXF_SETMASTER);
    }

    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Disarm:
            TNT1 A 0
            {
                if(sentryGunPlayerLocker)
                {
                    sentryGunPlayerLocker.setStateLabel("Disarm");
                }
            }
            goto spawn;
    }
}



class SentryGunTurretRocket : Interactable {

    

    bool attackSequence;
    bool inAttackPosition;
    bool allowWarp;
    int holdTime; //
    int shotsFired;
    int attackRateTicks;
    int fireDelayer;
    int projectileSpeed;

    const FIRE_DELAY = 15; //How many ticks before we start the salvo
    const ATTACKS_PER_SALVO = 9;
    const ATTACK_PITCH = -15;
    const HOLD_TIME_LIMIT = TICRATE*2; // How many seconds before going back to normal after finishing a salvo?
    const DEFAULT_PROJECTILE_SPEED = 36;
    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        allowWarp = true;
        projectileSpeed = args[0];
        if(projectileSpeed  == 0)
        {
            projectileSpeed = DEFAULT_PROJECTILE_SPEED;
        }
    }

    default
    {
        +USESPECIAL;
        +NOGRAVITY;
        Activation THINGSPEC_SWITCH;
        +SOLID
        +BUDDHA
        +DONTTHRUST
        +SOLID;
        tag "$OBJECT_MAMMOTHTURRET";
        SelacoActor.UseTag "Fire";
    }

    override void tick() {
        super.tick();
        if(isfrozen()) return;
        if(allowWarp)
        {
            a_warp(AAPTR_MASTER,0,0,46, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE | WARPF_NOCHECKPOSITION);
        }

        // Go to firing animation
        if(!inAttackPosition && attackSequence && pitch > ATTACK_PITCH)
        {
            if(pitch == 0)
            {
                A_PLAYSOUND("MAMMOTH/SERVO/UP", CHAN_AUTO, 0.4, pitch:1.1);
            }
            pitch-=0.5;
            if(pitch <= ATTACK_PITCH)
            {
                inAttackPosition = true;
            }
        }


        // Wait for timer then restore
        if(inAttackPosition)
        {
            pitch = ATTACK_PITCH;
            fireDelayer++;
            // Fire a shot
            if(attackRateTicks == 5 && shotsFired < ATTACKS_PER_SALVO)
            {
                bThruactors = true;
                allowWarp = false;
                shotsFired++;
                fireMissile();
            }
            
            // Enable warping to go back to position after recoiling
            if(attackRateTicks == 7)
            {
                attackRateTicks = 0;
                bThruactors = false;
                allowWarp = true;
            }

            // Done attacking, revert.
            if(holdTime >= HOLD_TIME_LIMIT)
            {
                attackSequence = false;
                inAttackPosition = false;
            }

            if(fireDelayer >= FIRE_DELAY)
            {
                attackRateTicks++;
            }
            if(shotsFired >= ATTACKS_PER_SALVO)
            {
                holdTime++;
            }
        }
        
        // Restore back to default position
        if(!attackSequence && pitch < 0)
        {
            if(pitch == ATTACK_PITCH)
            {
                A_PLAYSOUND("MAMMOTH/SERVO/DOWN", CHAN_AUTO, 0.2, pitch:1.2);
            }
            allowWarp = true;
            holdTime = 0;
            fireDelayer = 0;
            pitch+=0.5;
            attackRateTicks = 0;
            if(pitch >= 0)
            {
                A_PLAYSOUND("MAMMOTH/RELOAD", CHAN_AUTO, 0.8, pitch:1.2);
                shotsFired = 0;
                bUseSpecial = true;
                activationType = THINGSPEC_SWITCH;
            }
        }

    }

    int burstNum;
    int flashPosition;

    void fireMissile()
    {
        
        actor muzzleFlash;
        bool nerd;

        burstNum++;

        if (burstnum == 1) {flashPosition = -10;}
        if (burstnum == 2) {flashPosition = 0;}
        if (burstnum >= 3) {flashPosition = 10; burstNum = 0;}

        A_PlaySound("turret/ace/attack", CHAN_AUTO, 0.4, 0, 0.7, false);

        [nerd, muzzleFlash] = A_SpawnItemEx("MarineMuzzleFlat", 35, flashPosition, 17);
        muzzleFlash.pitch = ATTACK_PITCH;
        muzzleFlash.roll = 45;

        // Fire projectile
        A_SpawnItemEx("ArtileryProjectile", 35, flashPosition, 15, frandom(projectileSpeed-6,projectileSpeed), 0, 10);

        A_CHANGEVELOCITY(-1, 0, -0.01, CVF_RELATIVE);
        spawnLight(255, 165, 53, random(90,130),shadowRequirement:3, 0, divisionSpeed:1.7);
        A_PLAYSOUND("MAMMOTH/ATTACK", CHAN_AUTO, pitch:frandom(0.9,1.1));
        
    }


    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Active:
            TNT1 A 0
            {
                A_PLAYSOUND("MAMMOTH/ACTIVATE", CHAN_AUTO);
                attackSequence = true;
                activationtype = THINGSPEC_DEFAULT;
                bUseSpecial = false;
            }
    }
}


// Does nothing but stare at the player. Otherwise it looks ahead.
class SentryGunTurretPlayerLocked : Interactable {

    int defaultAngle;
    bool seenPlayer;
    bool disarmed;
    actor playerActor;
    const ANGLE_MAX = 180;

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        bPreventSleep = true;
        defaultAngle = angle; // Base angle to return to when player moves too far away
    }


    override void tick()
    {
        super.tick();
        if(isfrozen()) return;

        a_warp(AAPTR_MASTER,0,0,39, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE | WARPF_NOCHECKPOSITION);
        
        if(disarmed)
        {
            return;
        }

        if(!seenPlayer && level.time % 2 == 0)
        {
            findPlayer();
        }

        if(seenPlayer && playerActor)
        {
            lookAtPlayer();
        }
    }

    void findPlayer()
    {
		PlayerPawn pawn=players[consolePlayer].mo;
		let d = Dawn(pawn);

        if(d && distance2DSquared(d) < 1200*1200 && checkSight(d))
        {
            playerActor = d;
            seenPlayer = true;
        }
    }

    void lookAtPlayer()
    {
         A_FACE(playerActor, pitch_offset:15,flags:FAF_BOTTOM);
         checkAngleLimits();
    }

    // If angle is too high, go back to center.
    void checkAngleLimits()
    {
        int defaultRotation = norma(defaultAngle);
        angle = normA(angle);
        if(defaultRotation-angle > ANGLE_MAX)
        {
            seenPlayer = false;
            A_SETANGLE(defaultAngle);
        }
    }


    default
    {
        +NOGRAVITY;
        +INTERPOLATEANGLES;
        Activation THINGSPEC_DEFAULT;
        +SOLID
        +BUDDHA
        +SOLID;
    }

    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Disarm:
            TNT1 A 0
            {
                A_SetAngle(defaultAngle);
                invoker.disarmed = true;
            }
            VOXE L 25;
            TNT1 A 0
            {
                A_PLAYSOUND("MAMMOTH/SERVO/DOWN", CHAN_AUTO, 0.4, pitch:1.2);
            }
            VOXE LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL 1
            {
                A_SETPITCH(pitch+0.3);
            }
            VOXE L -1
            {
                A_PLAYSOUND("MAMMOTH/RELOAD", CHAN_AUTO, 0.8, pitch:1.2);
                SleepIndefinite();
            }
            loop;
    }
}


class MarineMuzzleFlat : actor
{
	default
    {
        +NOCLIP
        +NOGRAVITY
        scale 0.2;
        PROJECTILE;
        Speed 5;
    }
	States
	{
        Spawn:
            TNT1 A 0;
            TNT1 A 0 A_Stop;
            MAMF A 1 BRIGHT A_SetScale(0.15);
            MAMF A 1 BRIGHT A_SetScale(0.18);
            MAMF A 1 BRIGHT A_SetScale(0.21);
            Stop;
	}
}


class ArtileryProjectile : actor {
    default
    {
        SelfLighting "151515";
        damagetype "ExplosiveImpact";
        +MISSILE;
        gravity 0.7;
    }

    override void tick()
    {
        super.tick();
        if(isfrozen()) return;
        A_SPAWNITEMEX("MammothProjectileSmoke");
    }

    states
    {
        spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_PLAYSOUND("ROCKET", CHAN_AUTO, pitch:frandom(1.2,1.3));
            }
            VOXE L -1;
            loop;
        Death:
            TNT1 A 0
            {
                A_EXPLODE(40, 250);
            }
            TNT1 A 0 A_SPAWNITEMEX("PrettyExplosionMammothBombing");
            stop;
    }

}

class HOLOGRAPHIC_RAILGUN : SelacoActor
{

    

    const GLITCHES_UNTIL_REMOVAL = 15;
    int glitchCounts;
    bool active;

    override void postbeginPlay()
    {
        super.postbeginPlay();
        active = true;
    }

    override void tick()
    {
        super.tick();
        if(active)
        {
            A_SetRenderStyle(1.0, STYLE_NORMAL);
            if(random(0,100) <= 10 && glitchCounts < GLITCHES_UNTIL_REMOVAL)
            {
                glitchCounts++;
                A_PLAYSOUND("dest/dsparks", CHAN_AUTO, 0.6, 0, 0.7);
                A_SetRenderStyle(frandom(0.9,0.95), STYLE_ADD);
                if(glitchCounts == GLITCHES_UNTIL_REMOVAL)
                {
                    A_SETANGLE(random(-35,35));
                    for(int x=2;x>0;x--)
                    {
                        A_SPAWNITEMEX("ShockExplosion", frandom(-30,30), frandom(-100,100), frandom(-20,20));
                    }
                    SpawnLight(150, 150, 500, 400, shadowRequirement:-1, divisionSpeed:1.6);
                    faceThePlayer();
                    setStateLabel("ERROR");
                }
            }
        }
    }

    void faceThePlayer()
    {
       if(players[consolePlayer].mo)
       {
           A_FACE(players[consolePlayer].mo);
           angle+=90; // because I suck at 3D models
       }
    }

    override void deactivate(actor deactivator)
    {
        alpha = 0.02;
        active = false;
        A_SetRenderStyle(1.0, STYLE_NONE);
    }

    override void activate(actor activator)
    {
        faceThePlayer();
        active = true;
        alpha = 1.0;
    }

    default
    {
        +NOINTERACTION
        +INTERPOLATEANGLES
        activation THINGSPEC_SWITCH;
        SelacoActor.SleepDistance 2048;
        alpha 1.0;
    }

    states
    {
        spawn:
            VOXE L 1 BRIGHT
            {
                A_SETANGLE(angle+2);
            }
            loop;
        Error:
            VOXE B 1
            {
                A_SETANGLE(angle+1.5);
            }
            loop;
    }
}