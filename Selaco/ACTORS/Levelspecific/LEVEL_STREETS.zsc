
class AirDroneBarrage03B2 : AirDrone
{

    override void attackPlayer() {
        burstsLeft--;
        int muzzleflashOffset;
        int brassAngle;
        muzzleflashOffset = -8;
        brassAngle = 90;
        if(burstsLeft % 2 == 0) {
            brassAngle = 270;
            muzzleflashOffset = 8;
        }

        actor droneMuzzle;
        bool dickbutt;

        isStrafing = false;
        A_FACETARGET();
        A_PlaySound("AIRDRONE/attack", CHAN_AUTO, 0.7, 0, 0.5, false, frandom(0.9,1.05));
        [dickbutt, droneMuzzle] = A_SPAWNITEMEX("AirDroneMuzzleNoLight", 6, 0+muzzleflashOffset, 10, 0, 0, 0, SXF_SETMASTER);
        if(droneMuzzle)
        {
            AlienMuzzle(droneMuzzle).master = self;
            AlienMuzzle(droneMuzzle).effectOffset = (4, muzzleFlashOffset, 8);
        }
        A_SpawnProjectile("EmptyBrassAirdrone", angle:brassAngle, flags:CMF_AIMDIRECTION, pitch:frandom(-35,-55));
        A_SpawnProjectile("DroneTracerScripted", 5, 2, random(-1, 1), CMF_TRACKOWNER | CMF_OFFSETPITCH , frandom(1.1, -1.2));
    }

    // SCRIPTS
    actor dummyTarget;
    bool dummyTargetSucc;

    // - Barrage
    const BARRAGE_BANK_DELAY = 85;
    const ROCKETVICTIM_TID = 43;
    const SURVIVOR_TID = 42;
    bool isFiringBarrage;
    int fireRateScript;
    int fireDelay;
    int fireDelayRequirement;
    int timing; 

    default
    {
        SelacoEnemy.randomizerSpawnChance 0;
        SelacoEnemy.WeaponDamage 90;
        SelacoEnemy.AirSpeedCap 17;
        scale 0.4;
        -ISMONSTER
        +friendly;
        +NOSPRITESHADOW
        +BUDDHA
        +NOPAIN;
        +NOCLIP
        +THRUACTORS
        selfLighting "505050";
    }
    states
    {
        // SCRIPTED
        // Barrage moves them forward while firing ahead. Used in 03B2's opening
        Spawn:
        SCRIPT_Barrage:
            TNT1 A 0;
            TNT1 A 0
            {
                // We cheat a bit. Airdrones increase in size to make them a little easier to see.
                A_SETSCALE(scale.x*1.75);

                bThruActors;
                // Spawn a dummy target for them to shot
                [dummyTargetSucc, dummyTarget] = A_SPAWNITEMEX("barrageTarget", 100, 0, 0, flags:SXF_SETMASTER);
                if(dummyTarget)
                {
                    target = dummyTarget;
                }
                if(tid == SURVIVOR_TID) { fireDelayRequirement = 45; A_PLAYSOUND("script/jetshort", CHAN_AUTO, 1.0, 0, 0.6, pitch:1.2);}
                if(tid == ROCKETVICTIM_TID) { fireDelayRequirement = 37; }
            }
        Barrage_MoveAndAttack:
            ADMV A 1
            {
                A_CHANGEVELOCITY(40,0,frandom(3,6), CVF_REPLACE | CVF_RELATIVE);
                // Timings
                invoker.fireDelay++;
                invoker.fireRateScript++;
                invoker.timing++;

                // Spawn smoke on the floor below them, but only early on.
                if(fireDelay <= fireDelayRequirement && level.time % 2 == 0)
                {
                    for(int x=0;x<3;x++)
                    {
                        actor smokePuff;
                        bool nerd;
                        [nerd, smokePuff] = A_SPAWNITEMEX("BodyImpactSmoke", frandom(-10,10), frandom(-10,10), frandom(-10,10), frandom(1,3), angle:random(0,360));
                        if(smokePuff)
                        {
                            smokePuff.setOrigin((smokePuff.pos.x, smokePuff.pos.y, floorz), false);
                        }
                    }
                }

                // Fire shots at the floor
                if((isFiringBarrage || invoker.fireDelay > fireDelayRequirement) && invoker.fireRateScript > 4)
                {
                    isFiringBarrage = true;
                    invoker.fireRateScript = 0;
                    attackPlayer(); // Run a modified version of the attack
                    selfLighting = "#ffbf8f"; // No dynamic lights for this one. So change sprite light to fake it.
                }
                else
                {
                    selfLighting = "404040"; // Revert light when not firing
                }

                // Drop a bit when  we allow them to fire.
                if(isFiringBarrage)
                {
                    A_CHANGEVELOCITY(13,0,frandom(3,2), CVF_REPLACE | CVF_RELATIVE);
                }
                // If timing exceeds this, bank left and go out of view.
                if(invoker.timing > BARRAGE_BANK_DELAY + fireDelayRequirement)
                {
                    selfLighting = "404040";
                    isFiringBarrage = false;
                    invoker.timing = 0;
                    // No longer need a target now.
                    if(dummyTarget){dummyTarget.destroy();}

                    // Eliminate speed cap. Let them be free
                    airSpeedCap = 999;

                    // Move actors in a direction
                    setStateLabel("Barrage_BankRight");
                }
            }
            loop;
        Barrage_BankRight:
            // One of the bastards is going to get hit by a rocket.
            // ACE Security is not worthless for once!
            TNT1 A 0
            {
                if(tid == SURVIVOR_TID)
                {
                    bBuddha = false;
                    health = 50;
                }
                if(tid == ROCKETVICTIM_TID)
                {
                    actor antiAir;   
                    antiAir = spawn("Barrage_AntiAirRocket", (-13072, -14009, 520));
                    if(antiAir)
                    {
                        antiAir.target = self;
                    }
                }
            }
            ADMV AAAAAAAA 1
            {
                A_CHANGEVELOCITY(18,0,frandom(1.3,2.9), CVF_REPLACE | CVF_RELATIVE);
            }
            ADSR AAABBBCCCCEDEEEFFFFFFFFFFFFFFFFFFFFFFFFFF 1
            {
                A_SETANGLE(angle-2);
                A_CHANGEVELOCITY(27,0,frandom(1.3,2.9), CVF_REPLACE | CVF_RELATIVE);
            }
            ADSR EECCBBAA 1 
            {
                A_CHANGEVELOCITY(20,0,frandom(1.3,1.8), CVF_REPLACE | CVF_RELATIVE);
            }
        Barrage_GoForward:
        Barrage_FlyUntilGone:
            ADMV A 1
            {
                if(vel.length() == 0)
                {
                    destroy();
                }
                A_CHANGEVELOCITY(23,0,frandom(1.5,2.2), CVF_REPLACE | CVF_RELATIVE);
            }
            loop;
        Barrage_avoid:
            ADSR AAABBBCCCDDDEEEFFF 1 
            {
                A_CHANGEVELOCITY(20,1,frandom(2.5,3.2), CVF_REPLACE | CVF_RELATIVE);
                A_SETANGLE(angle-4);
            }
            goto Barrage_FlyUntilGone;
        
    }
}

class barrageTarget : SelacoActor
{
    override void tick()
    {
        super.tick();
        if(!master)
        {
            destroy();
        }
        a_warp(AAPTR_MASTER,100,0,-50, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE | WARPF_NOCHECKPOSITION);
    }
    default 
    {
        scale 6;
        +NOINTERACTION;
        +SelacoActor.PreventSleep;
    }
    
    states
    {
        Spawn:
            TNT1 A 0;
            TNT1 A -1;
            stop;
    }
}

// Only used for a scripted sequence at the moment.
class Barrage_AntiAirRocket : AirdroneRocket
{
    mixin ParticleDefinitionEmitter;
	mixin lightEmitter;

    bool gotClose;
    bool poppedFlares;

    override void tick()
    {
        super.tick();
        for(int x=0;x<3;x++)
        {
           EmitDefinition('MetalShrapnelParticleShortBigDefinition', chance: 1.0, numTries: 5, angle:random(0,360), pitch:frandom(-150, -220), speed:frandom(-4,-5), offset:(0,0,1), velocity:(0, 0, frandom(0.2,7)), flags:PE_ABSOLUTE_OFFSET, scaleboost:0.4);
        }
    }
    default
    {
        +THRUACTORS;
        scale 3.7;
        speed 25;
        SelfLighting "505050";
    }
    states
    {
        Spawn:
            // Play tracking noises
            TNT1 A 15;
            TNT1 AAAAAA 4
            {
                A_PLAYSOUND("HEATSEEKER/SEEKING", CHAN_AUTO, 0.2, 0, 0.35);
            }
            TNT1 A 3
            {
                if(!target)
                {
                    destroy();
                }
            }
            TNT1 A 0
            {
                A_PLAYSOUND("HEATSEEKER/ACQUIRED", CHAN_AUTO, 0.75, 0, 0.35);
            }
            TNT1 A 9;
            TNT1 A 0
            {
                for(int x=0;x<75;x++)
                {
                    A_SPAWNITEMEX("BodyImpactSmoke", frandom(-100,100), frandom(-100,100), frandom(30,70), frandom(1,12), 0, frandom(1.4, 2.7), angle:random(0,360));
                }
                spawnLight(435, 289, 150, 450, 0, -1 ,overbright:0, divisionSpeed:1.8, zOffset:20);
                A_PLAYSOUND("HEATSEEKER/FIRE", CHAN_AUTO, 1.0, 0, 0.2, pitch:1.1);
            }
            VOXE LLLLL 1
            {
                A_CHANGEVELOCITY(0, 0, 1.7, CVF_RELATIVE);
            }
            TNT1 A 0
            {
                vel.z = 0;
            }
        looper:
            VOXE L 1
            {
                if(target)
                {
                    // Move the rocket to the target direction
                    A_FACETARGET(360, max_pitch:0);
                    A_CHANGEVELOCITY(45,0,-1*pitch, CVF_RELATIVE | CVF_REPLACE);


                    int distanceFromTarget = distance3D(target);
                    // Have target deploy flares
                    if(distanceFromTarget <= 700 && !poppedFlares && AirDrone(target))
                    {
                        poppedFlares = true;
                        AirDrone(target).popFlares();
                    }

                    // Have Airdrone try an evasive manouvre
                    if(distanceFromTarget <= 450 && !gotClose)
                    {
                        gotClose = true;
                        target.setStateLabel("Barrage_avoid");
                    }
                    // Detonate
                    if(distanceFromTarget <= 70)
                    {
                        A_SPAWNITEMEX ("SparkMissile", 15, 0, 0, frandom(1,3), 0, 2);
                        A_SPAWNITEMEX ("SparkMissile", 5, 15, 0, frandom(1,3), 0, 2);
                        A_SPAWNITEMEX ("SparkMissile", 5, 25, 0, frandom(1,3), 0, 2);
                        A_PLAYSOUND("sawdrone/death", CHAN_AUTO, 1.0, 0, 0.24, pitch:frandom(0.4, 0.6));
                        A_Playsound("Destruction/explosion", CHAN_AUTO,1.0, 0, 0.2, pitch:frandom(0.85,1.0));
                        A_playsound("destruction/rubble", CHAN_AUTO, 1.0, 0, 0.3, pitch:frandom(0.9,1.1)); 
                        target.die(self,self);
                        A_SPAWNITEMEX("PrettyExplosionMammothBombing");
                        destroy();
                    }
                }
            }
            loop;
    }
}
