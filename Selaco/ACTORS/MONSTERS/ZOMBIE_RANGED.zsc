class Zombie_ranged : Zombie_grunt
{

	static const string regularDeathAnimations[] = {"ZOMBIE_RANGED_DEATH_1", "ZOMBIE_RANGED_DEATH_2"};
    static const string shotgunDeathAnimations[] = {"ZOMBIE_RANGED_SHOTGUN_1", "ZOMBIE_RANGED_SHOTGUN_2", "ZOMBIE_RANGED_SHOTGUN_3"};
    static const string headshotDeathAnimations[] = {"ZOMBIE_RANGED_HEAD_1"};

	override string GetDeadAnimation() {
		return regularDeathAnimations[random(0,regularDeathAnimations.size()-1)];
	}

	override string GetShotgunDeathAnimation() {
		return shotgunDeathAnimations[random(0,shotgunDeathAnimations.size()-1)];
	}

	override string GetHeadshotDeadAnimation() {
		return headshotDeathAnimations[random(0,headshotDeathAnimations.size()-1)];
	}

    int salvoLength;

    default
    {
        tag "$CHARACTER_ZOMBIE";
        SelacoEnemy.role "$ROLE_RANGED";
        Zombie_Grunt.shockSprite "BRSH";
        SelacoEnemy.weaponDamage 6;
        SelacoEnemy.weaponDamageOffset 1;
        SelacoEnemy.randomizerSpawnChance 40;
        painchance 15;
        health 110;
        speed 5;
    }

    states
    {
        indexer:
        Spawn:
            TNT1 A 0;
            BRID ABCDEFGHIIHGFEDCBA 4 A_LOOK;
            BRSH A 0;
            loop;
        See:
        TNT1 A 0
        {
            lostTargetCounter = 0;
        }
        BeginChasing:
        See_Continue:
            BRW1 AAAAAABBBBB 1 
            {
                if(!isTargetVisible()) 
                {
                    // Go to tracking mode once we've not seen the player for a bit
                    if(++lostTargetCounter > 35) {
                        lostTargetCounter = 0;
                        SetStateLabel("TrackPlayer");
                        return;
                    }
                }
                A_CHASE("Missile", "Missile");
            }
            TNT1 A 0
            {
                doFootstep(FSF_ZOMBIESTEP | FSF_SCRIPTEDFOOTSTEP);
            }
            BRW1 CCCCCDDDD 1 
            {
                if(!isTargetVisible()) 
                {
                    // Go to tracking mode once we've not seen the player for a bit
                    if(++lostTargetCounter > 35) {
                        lostTargetCounter = 0;
                        SetStateLabel("TrackPlayer");
                        return;
                    }       
                A_CHASE("Missile", "Missile");
                }
            }
            TNT1 A 0
            {
                doFootstep(FSF_ZOMBIESTEP | FSF_SCRIPTEDFOOTSTEP);
            }
            loop;

        TrackPlayer:
            BRW1 A 1;
        TrackPlayerLoop:
            BRW1 AAAAAABBBBB 1 {
                pathFind();
            }
            TNT1 A 0
            {
                doFootstep(FSF_ZOMBIESTEP | FSF_SCRIPTEDFOOTSTEP);
            }
            BRW1 CCCCCDDDD 1 {
                pathFind();

            }
            TNT1 A 0
            {
                doFootstep(FSF_ZOMBIESTEP | FSF_SCRIPTEDFOOTSTEP);
            }
            loop;

        // When we lose track of the player we might need a half second to build the path
        BuildPathIdle:
			// This frame prevents an infinite loop if an enemy goes to idle and then builds a path in a single tick
			// Remove it if you dare.
			BRID A 1;
			BRID AAAABBBBCCCDDDEEEFFFGGGHHHIIIHHHGGGFFFEEEDDDCCCBBBAAA 1
			{
				if(A_TRACK() != TRACK_BuildingPath) {
					SetStateLabel("TrackPlayer");
					return;
				}
			}
			Loop;

        Pain:
            TNT1 A 0 {
                A_PAIN();
                bNoPain = true;
            }
            TNT1 A 0 A_JUMP(256, "Pain_left", "Pain_right");
        Pain_Left:
            BRP1 ABCDE 3;
            goto Pain_End;
        Pain_Right:
            BRP2 ABCDE 3;
            goto Pain_End;
        Pain_End:
            TNT1 A 0
            {
                bNoPain = false;
            }
            goto See;
        Missile:
            TNT1 A 0
            {
                A_PLAYSOUND("zombie/ranged/preparecannon", CHAN_AUTO, 0.6, pitch:frandom(0.8,1.3));
            }
            BRA1 ABCDEFGHHHH 3
            {
                salvoLength = random(5,6);
                A_FACETARGET();
            }
            // Temp
        Missile_Loop:
            BRA1 H 2 
            {
                salvoLength--;
                A_FireEnemyWeapon("SporeMissile", 42, 15, frandom(-3,3), CMF_TRACKOWNER | CMF_OFFSETPITCH , frandom(1.1, -1.2));
                A_SPAWNITEMEX("BulletImpactSmoke", 3,15, 42);
                A_FACETARGET();
                A_PLAYSOUND("zombie/ranged/firecannon", CHAN_AUTO, pitch:frandom(0.8,1.3));
            }
            BRA2 BDE 2;
            TNT1 A 0
            {
                if(salvoLength == 0)
                {
                    setStateLabel("See_Continue");
                }
            }
            loop;
        Stomped:
            TNT1 A 0
            {
                A_PLAYSOUND("GIB/STOMP", CHAN_AUTO, 1.0, 0.8);
                //A_PLAYSOUND("impact/bonehit", CHAN_AUTO, 1.0, 0, 0.6, 0, frandom(0.7,1.1));
                A_SPawnItemEx("BloodChunks", 0, 0, 24, frandom(-6,6), frandom(-6,6), frandom(4,7));
                for(int x=0;x<8;x++)
                {
                    A_SPAWNITEMEX("SuperGoreRed", frandom(-25,25), frandom(-25,25), frandom(0,40));
                }
            }
            TNT1 AAAAAA 0 A_SpawnProjectile ("HumanBrainPiece", height-5, frandom(-5,5), random (0, 360), 2, random (-140,-160));
            TNT1 AAAAAAAAAAA 0 A_SpawnProjectile ("HumanIntestine", frandom(30,40), random(-30,30), random (0, 360), 2, random (-30, -180));
            TNT1 A 0 A_SpawnProjectile ("BloodSplatterEffect", 32, 0, random (0, 360), 2, random (-10, -70));
            TNT1 A 0 A_SPAWNITEMEX("BloodSplatterEffect", random(-10, 10), random(-8,8),frandom(height,height+20), random(-3,3), random(-3,3),random(1,6));
            TNT1 AAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("BloodSplatterEffect", random(-25, 25), random(-15,15),frandom(height,height+20), random(-3,3), random(-3,3),random(1,6));       
            TNT1 A 0 A_SpawnProjectile("ZombieChest", 32, frandom(-5,5), angle:-180, flags:2,pitch:frandom(-60,-150));
            TNT1 A 0 A_SpawnProjectile("ZombieCannon", 24, frandom(-20,20), angle:-180, flags:2,pitch:frandom(-60,150));
            TNT1 A 0 A_SpawnProjectile("ZombieLeg", 20, frandom(-20,20), angle:frandom(120,-120), flags:2,pitch:frandom(-40,-150));   
            TNT1 A 0 A_SpawnProjectile("ZombieLegMirror", 20, frandom(-20,20), angle:frandom(-120,120), flags:2,pitch:frandom(-40,-150));
            TNT1 A 0 A_SpawnProjectile("ZombieHead", 20, frandom(-5,5), angle:frandom(-120,240), flags:2,pitch:frandom(-40,-150));
            TNT1 A 0 A_SpawnProjectile("ZombieArm", 20, frandom(-20,20), angle:frandom(-120,120), flags:2,pitch:frandom(-40,-150));
            TNT1 A 0;
            stop;
    }
}

// Spore
class SporeMissile : EnemyTracer 
{
    default
    {
        decal "SporeSplats";
        damage 0;
        scale 0.4;
        Speed 80;
        RenderStyle "Add";
    }

    override int SpecialMissileHit (Actor victim) {
        // Tracers can pass through certain objects.
        if(victim is "GunnerShield" || victim is "ShieldPieceMaster" || victim is "PlasmaShieldActor" || victim is "DeathceptionMaster") {
            return 1;
        }
		return super.SpecialMissileHit(victim);
	}

    states
    {
        spawn:
           PLTR AB 1  bright{
               A_SpawnItemEx("BabySmokeEffect",-2);
               A_SpawnItemEx("BabySmokeEffect",-8);
           }
           loop;
        Xdeath:
        Death:
            TNT1 A 0
            {
                EmitDefinition('grassparticleDefinition', chance: 1.0, numTries: 2, offset:(-10,0,0));
                EmitDefinition('GrassBladeParticleDefinition', chance: 1.0, numTries: 23, offset:(-10,0,0));
                EmitDefinition('GrassBladeParticleWildDefinition', chance: 1.0, numTries: 32, offset:(-10,0,0));      
                A_SpawnItemex("PlantImpactEffectFloor", 0, 0, 0, frandom(-0.5,0.5), -1, 0.5);
                A_SpawnItemex("PlantImpactEffectFloor", 0, 0, 0, frandom(-0.5,0.5), 1, 0.5);
            }
        XDeath:
            TNT1 A 0
            {
                A_PLAYSOUND("ZOMBIE/RANGED/SLIMEIMPACT", CHAN_AUTO, 0.6, pitch:frandom(1.2,1.4));
                for(int x=0; x<12;x++) {
                    A_SPAWNITEMEX("YellowSlimeSmall", frandom(-5,5), frandom(-5,5), frandom(5,-5), frandom(-1,-8), frandom(-3,3), frandom(-1,1));
                }
            }
            TNT1 A 0;
            stop;
    }
}