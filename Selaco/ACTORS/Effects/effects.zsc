class SparkWeaponEffects : actor {
    default {
        +NOGRAVITY;
        scale 0.12;
        +ROLLSPRITE;
        renderstyle "Add";
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 A_SETROLL(random(0,360));
            TNT1 A 0 A_JUMP(256, "Spawn1", "Spawn2", "Spawn3");
            stop;
        Spawn1:
            IPF1 AB 1 bright;
            Stop;
        Spawn2:
            IPF2 AB 1 bright;
            Stop;
        Spawn3:
            IPF3 AB 1 bright;
            Stop;
    }
}

class Stool_piece : DecorationObject {
	//category SelacoDecorations

    default {
        +NOBLOODDECALS
        -SOLID
        +Shootable
        -NOBLOOD
        +MISSILE
        +PUSHABLE
        +DoomBounce
        speed 15;
        Health 120;
        gravity 0.7;
        PushFactor 0.7;
        height 47;
        scale 1.05;
        MaxStepHeight 10;
        +BOUNCEONWALLS;
        +BOUNCEONFLOORS;
        +BLOODSPLATTER;
        +USEBOUNCESTATE;
        -Usespecial;
        Activation THINGSPEC_Default;
        -pushable;
        BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
        PainSound "impact/hardmetal";
        painchance 256;
        BounceFactor 0.5;
        BounceCount 3;
        radius 3;
        height 5;

        +SELACOACTOR.SleepWhenIdle
        -SELACOACTOR.WakeNearPlayer
    }
	States {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SetAngle(random(0, 360));
		Idle:
			STOO K 1;
			loop;
		Bounce:
			TNT1 A 0 {
				EmitDefinition('ShortSparkParticleDefinition', 1.0, 35, pitch:frandom(-60,-120));
			}
			STOO K 1 A_PlaySound("impact/tray");
			goto idle;
		Death:
			STOO K -1;
			stop;
	}
}


class SodaCanClip : SelacoActorDecorationMissile
{
     // Executes while falling
    override void loopingEffects()
    {

    }

    override void bounceEffects()
    {
        A_PlaySound("ITEMS/SODACAN/LIT",CHAN_AUTO, 0.85, 0, 1.0, false, frandom(1.0,1.2));
    }   

    default
    {
        gravity 0.45;
        Seesound "";
    }

}

class WaterPlop : WaterActor
{
    default
    {
        scale 1;
        +NOINTERACTION
    }
    states
    {
        Spawn:
        Plop:
			TNT1 A 0 A_SETRENDERSTYLE(1.0, STYLE_Translucent);
			TNT1 A 0 
			{
                A_PLAYSOUND("impact/waterdrop", pitch:frandom(1.0,1.2));
                if(random(0,1) == 0)
                {
                    setStateLabel("Style2");
                }
			}
            goto Style1;
        Style1:
			LIQU AABBCCDDEEFFGGHHII 1;
            stop;
        Style2: 
			LIQV AABBCCDDEEFFGGHHII 1;
            stop;
    }
}

// STOP INPUTTING 0451 IN OUR KEYPADS YOU NERDS! =(
class KeypadShock : Actor {
    default {
        damageType "electricity";
        +NODAMAGE
        +NOINTERACTION;
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 A_EXPLODE(15,15);  
            TNT1 A 0 A_PLAYSOUND("script/trolol", CHAN_AUTO, 1.0, 0, 0.6);
            TNT1 AAAAAAAA 1 {
                A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-32, 32),frandom(-48, 48),frandom(-15, 35));
			    A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-32, 32),frandom(-48, 48),frandom(-15, 35));
                //A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-43,35), frandom(15,20));
                //A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-35,35), frandom(-10,30));
               // A_SPAWNITEMEX("SmallExplosionNoSound", frandom(0,1), frandom(-35,35), frandom(-10,30));
            }
            stop;       
    }
}

class SparkMovingUpToDoor : SelacoActor {
    override void tick() {
        super.tick();
        EmitDefinition("SparkParticleDefinitionFast", 1.0, 9, angle:-180, offset:(0,0,5));
        if(level.time % 2 == 0) {
            A_Spawnitemex("YellowFlareSmallShadowCaster", 1, 0, 7);
            A_SprayDecal("scorchmarksmaller", 172);
        }
    }
    default {
        +SelacoActor.PreventSleep
	    +NOGRAVITY
	    -SOLID
	    radius 2;
    }
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 0 A_PLAYSOUND("script/doorweld", CHAN_5);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				A_ChangeVelocity(0, 0, 1.0, CVF_REPLACE | CVF_RELATIVE);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				A_ChangeVelocity(0, -1.3, 0, CVF_REPLACE | CVF_RELATIVE);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				A_ChangeVelocity(0, 0.1, -1.5, CVF_REPLACE);
			}
			TNT1 A 0 A_STOPSOUND(CHAN_5);
			stop;
	}
}

class BaseShockwave : SelacoACtor
{ 

    int updateSpeed;

    property UpdateSpeed : updateSpeed;

    float sizeIncrements;
    override void tick() {
        super.tick();
        if(level.time % updateSpeed == 0) {
            A_SETSCALE(scale.x+sizeIncrements);
        }
        A_FADEOUT(0.03, FTF_REMOVE);
    }

    override void PostBeginPlay()
    {
        super.postbeginPlay();
        sizeIncrements = 0.312;
        if(pos.z > floorZ+5)
        {
            sizeIncrements = 0.212;
            bFlatSprite = false;
            bWallSprite = true;
        }
    }

    default {
        Speed 0;
        Height 64 ;
        Radius 32;
        Scale 0.4 ;
        BaseShockwave.UpdateSpeed 2;
        SelacoActor.sleepDistance 0;
        RenderStyle "add";
        Alpha 0.65;
        +DROPOFF;
        +FLATSPRITE
        +NOINTERACTION
        +NOBLOCKMAP;
        +NOGRAVITY;
    }
    States 
    { 
     Spawn: 
        SHWK M 90 BRIGHT;
        stop;
    } 
} 

class BaseShockwaveBigger : BaseShockwave
{
    override void postbeginPlay()
    {
        super.postBeginPlay();
        sizeIncrements = 0.16;
        bFlatSprite = true;
        bWallSprite = false;
    }

    default
    {
        BaseShockwave.UpdateSpeed 1;
        Scale 0.7;
    }    
}

class BaseShockwaveSmaller : BaseShockwave
{
    override void postbeginPlay()
    {
        super.postBeginPlay();
        sizeIncrements = 0.172;
    }

    default
    {
        Scale 0.13;
    }
}

class BaseShockwaveSmallest : BaseShockwave
{
    override void postbeginPlay()
    {
        super.postBeginPlay();
        sizeIncrements = 0.032;
    }

     default
    {
        BaseShockwave.UpdateSpeed 1;
        Scale 0.1;
    }   
}

class SparksLooperCustomizer : SELACOACTOR
{
    int emitDelay, emitRadius, emitRadiusVertical, emitRadiusX, loops;
    
    void initThings() {
        emitDelay = args[0];
        emitRadius = args[1];
        emitRadiusVertical = args[2];
        if(args[3] == 0) {
            emitRadiusX = emitRadius;
        }
        if(emitDelay == 0)
        {
            emitDelay = 5;
        }

    }

    int getDelay() {
        return emitDelay;
    }

    default {
        SelacoActor.SleepDistance 1024;
        //category SelacoEffects
        renderstyle "add";
        height 3;
        scale 0.33;
        -NOBLOCKMAP;
        -CEILINGHUGGER;
        +NOINTERACTION;
        +STANDSTILL;
        +NOGRAVITY;
    }
  states
  {
    Spawn:
        TNT1 A 50;
        TNT1 A 0 initThings();
    Looper:
        TNT1 A 1 {
            A_SETTICS(random(15,20));
        }
        TNT1 A 0 {
            loops++;
            if(loops==emitDelay) {setStateLabel("ShootSparks");}
        }
    ShootSparks:
        TNT1 A 1 A_SPAWNITEMEX("SparkEffect", frandom(emitRadiusX*-1, emitRadiusX),frandom(emitRadius*-1, emitRadius), frandom(0, emitRadiusVertical));
        goto Looper;
        Destroy:
            TNT1 A 0;
            stop;
    }
}

class BrownCloudParticles : SelacoActor
{
    default
    {
        +NoInteraction
    }
    states
    {
        Spawn:
            tnt1 a 0;
            TNT1 A 0
            {
                A_SpawnItemEx("BrownCloudSmallShort", 3, 0, 0, frandom(0.4, 0.8), frandom(0.6, 0.9));
                A_SpawnItemEx("BrownCloudSmallShort", 3, 0, 0, frandom(0.4, 0.8), frandom(-0.6, -0.9));
                A_SpawnItemEx("BrownCloudSmallShort", 3, 0, 0, frandom(0.4, 0.8), 0, frandom(0.6, 0.9));
                A_SpawnItemEx("bulletImpactEffectWoodSmall", 0, 0, 0, 0, frandom(-0.4,0.4), frandom(-0.2,0.7));
                EmitDefinition('SawdustDefinition', chance: 0.75, numTries: 10,angle:180,  pitch: frandom(-10,10), speed:-1,  offset: (3, 0, 0));	
                EmitDefinition('SawdustFastBriefDefinition', chance: 1.0, numTries: 35, angle:180, pitch: frandom(-20,-30), speed:-1,offset: (3, 0, 0));	
                EmitDefinition('WoodParticleDefinition', chance: 0.75, numTries: 10, angle:180, pitch: frandom(-45,-65),speed:-1, offset: (3, 0, 0));	
                emit('PlankParticleShort', chance: 1.0, numTries: 2, angle:180, pitch:15, speed:-2);
            }
            stop;
    }
}

class SparkEffect : SelacoActor
{

    override void postBeginPlay() {
        super.postBeginPlay();
        A_SpawnDefinedParticle("BulletImpactEffectMetalSmallerDefinition");
        A_SpawnDefinedParticle("YellowFlareDefinition");
    }

    default {
        renderstyle "add";
        height 3;
        scale 0.33;
        SelacoActor.SleepDistance 1024;
        -NOBLOCKMAP;
        -CEILINGHUGGER;
        +NOINTERACTION;
        +STANDSTILL;
        +NOGRAVITY;
    }
  states
  {
    Spawn:
        TNT1 A 0;
        TNT1 A 0 {
            if(random(0,1) == 1) {
                bxflip = true;
            }

            if(random(0,100) <= 90) {
                EmitDefinition('ShortSparkShrinkDefinition', 0.75, 12, angle:random(0,360),pitch:-25);
            }
            spawnLight(rColor:192, gColor:76, bColor:23, frandom(30,65), 0, shadowRequirement:2, overbright: 0, divisionSpeed:1.3, alwaysShow:0);
        }
        TNT1 A 0 A_playSound("script/sparks", CHAN_AUTO, 0.23, 1.5);
        TNT1 A 0;
        FX58 ABCDEFG 1 bright;
        stop;
    }
}
class SparkEffectNoShadow : SparkEffect
{
  states
  {
    Spawn:
        TNT1 A 0;
        TNT1 A 0 {
            if(random(0,1) == 1) {
                bxflip = true;
            }
            if(random(0,1) == 1) {
                byflip = true;
            }
            spawnLight(rColor:192, gColor:76, bColor:23, frandom(60,86), 0, shadowRequirement:-1, overbright: 0, divisionSpeed:1.3, alwaysShow:0);
        }
        TNT1 A 0 A_playSound("script/sparks", CHAN_AUTO, 0.23, 1.5);
        TNT1 A 0;
        FX58 ABCDEFG 2 bright;
        stop;
    }
}


class TireTrack1 : SelacoActorStatic  
{
	states {
		Spawn:
			TRTK A -1;
			stop;
	}
}

class TireTrack2 : TireTrack1  {
	states {
		Spawn:
			TRTK B -1;
			stop;
	}
}

class WoodHit : actor {
    states{
        Spawn:
            TNT1 A 0;
            TNT1 AA 0 A_SpawnProjectile ("WoodParticle", 2, 0, random (-90, 90), 2, random (-360, 360));
            TNT1 AAAAA 0 A_SpawnProjectile ("BrownCloud", 2, 0, random (-90, 90), 2, random (-360, 360));
            stop;
    }
}

class AmmoIcon : actor {
    default {
        +NOGRAVITY
        +THRUACTORS
        +NOINTERACTION
        Health 15;
        Scale 0.10;
        Alpha 0;
    }

    override void PostBeginPlay() {
        super.PostBeginPlay();
        if(getCvar("g_itemicons") == 0) {
            setStateLabel("Destroy");
        }
    }

    states {
        Destroy:
            TNT1 A 0;
            stop;
    }
}

class AmmoIconLONG : AmmoIcon {

    states {
        Destroy:
            TNT1 A 0;
            stop;
    }
}



class PickupFlares : actor {

    override void PostBeginPlay() {
        super.PostBeginPlay();
        if(getCvar("g_itemflares") == 0) {
            setStateLabel("Destroy");
        }
    }


    default {
        +NOGRAVITY
        +THRUACTORS
        +NOINTERACTION
        RenderStyle "add";
        Health 15;
        Scale 0.50;
        alpha 0.33;
    }

    states {
        Destroy:
            TNT1 A 0;
            stop;
    }

}

class PickupFlaresLONG : PickupFlares {

}


class DirtDecalMaster : actor {
    int randomNum;
    default {
        
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                invoker.randomNum = random(0,3);
                if (invoker.randomNum == 0) {  A_SPAWNITEMEX("DirtDecal1");  }
                if (invoker.randomNum == 1) {  A_SPAWNITEMEX("DirtDecal2");  }
                if (invoker.randomNum == 2) {  A_SPAWNITEMEX("DirtDecal3");  }
                if (invoker.randomNum == 3) {  A_SPAWNITEMEX("DirtDecal4");  }
            }
            stop;
    }   
}

class DirtDecal1 : actor {
    default {
		renderstyle "translucent";
        scale 0.6;
    }
    states {
        Precache:
            DIRT A 0;
            stop;
        Spawn:
            TNT1 A 0;
            TNT1 A 0 A_SETANGLE(random(0,360));
            DIRT A 900;
            DIRT AAAAAAAAA 1 A_FADEOUT(0.1);
            stop;
    }   
}

class SodaShooter : actor {
    const  CANSTOSHOOT = 7;
    int totalShots;
    default {
        +NOINTERACTION
	    +NOGRAVITY
    }
	States {
		Spawn:
			TNT1 A 0;
		ShootSodaCans:
            TNT1 A 7 {
                if(totalShots <= CANSTOSHOOT) {
                    A_SPAWNITEMEX("SodaCanRolling", 0, 0, 0, random(4,11), random(2,3), 0, 0);
                    A_PLAYSOUND("script/coin", CHAN_AUTO, 0.25);
                    totalShots++;
                } else {
                    setStateLabel("death");
                }
            }
			Loop;
		Death:
			TNT1 A 0;
			stop;
	}
}

class DirtDecal2 : DirtDecal1 { }
class DirtDecal3 : DirtDecal1 { }
class DirtDecal4 : DirtDecal1 { }

class AcidSplash : actor
{
    default {
        scale 0.3;
        speed 7;
        radius 5;
        height 5;
        Gravity 0.8;
        Alpha 0.95;
    	Decal "ACIDSPLATTER";
        +MISSILE
        +CLIENTSIDEONLY
        +NOTELEPORT
        +THRUACTORS
        +FORCEXYBILLBOARD
        +NOBLOCKMAP
        +NODAMAGETHRUST
    }
    States
    {
     Spawn:
        TNT1 A 0;
        ACBL ABCD 2 BRIGHT A_SpawnProjectile("AcidSplashTrailer", 0, 0, 180);
    Looper:
        ACBL CD 2 BRIGHT A_SpawnProjectile("AcidSplashTrailer", 0, 0, 180);
        loop;
	 Death:
        TNT1 A 0 A_PlaySound("blooddrop");
        TNT1 A 0 A_SPAWNITEMEX("acidSpawner");
        ACBL FGHIJK 2 BRIGHT;
        TNT1 A 0;
        Stop;
    }
}

class AcidSplashTrailer: AcidSplash 
{
    default {
        speed 0;
        +rollsprite;
        +NOGRAVITY
        +FLOAT
        scale 0.3;
        gravity 0.4;
    }
    States
    {
     Spawn:
        TNT1 A 0;
        ACTR AAAAAAAAABCDEEEEE 2 A_SETROLL(roll + random(3, 5));
        Stop;
	 Death:
        TNT1 A 0;
        Stop;
    }
}


class Acidsplosion : actor {

    override void tick()
    {
        super.tick();
        if(level.time % 15 == 0 && getClassName() == "Acidsplosion")
        {
            A_EXPLODE(25, 100, flags:XF_NOTMISSILE);
        }
    }

    int frameAmount;
    int frameID;
    color particleColor;
    const particleCount = 3;
    const fadeSpeed = 1;
    string spriteIndex;
    default {
        Speed 1;
        Alpha 0.2;
        scale 0.09;
        +NOGRAVITY
        +BLOODLESSIMPACT
        -BLOODSPLATTER
        +NOINTERACTION
        +rollsprite;
        damageType "acid";
        //RenderStyle "translucent";
    }
	States {
		Spawn:
			TNT1 A 0;
            SMK5 A 0;
            TNT1 A 0 {
                spriteIndex = "SMK5";
                particleColor = "green";
                frameAmount = 3;
                SetStateLabel("Initializer");
            }
        Initializer:
            TNT1 A 0 A_SetRoll(0, 360);
            TNT1 A 0 {
                frameID = random(0,frameAmount);
                for(int x=0;x<=particleCount;x++) {
                    A_SpawnParticle(particleColor, SPF_FULLBRIGHT, 50, frandom(2,7), frandom(0,360), frandom(-26,26), frandom(-26,26), frandom(-1,0.3), frandom(-5,5), frandom(-5,5), frandom(-2,2));
                }
            }
            goto SmokeEffect;
	SmokeEffect:
        TNT1 A 0 {
            sprite = GetSpriteIndex(spriteIndex);
        }
        TNT1 AAAAAAAAAA 1  {
            frame = frameID;
            A_Fadein(0.07);
        }
        TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
            frame = frameID;
            A_FadeOut(0.016, FTF_REMOVE);
            A_SetRoll(roll + 0.4);
            A_SetScale(scale.x + 0.007);
            A_SetTics(fadeSpeed);
        }
		stop;
	Death:
		TNT1 A 0;
		Stop;
    }
}

class AcidsplosionLong : Acidsplosion {

    override void tick()
    {
        super.tick();
        frame = frameID;
        A_FadeOut(0.00025, FTF_REMOVE);
        A_SetRoll(roll + 0.02);
        A_SetScale(scale.x + 0.00035);
    }

    const particleCount = 25;
    const fadeSpeed = 1;
    default {
        scale 0.65;
    }
    states
    {
        SmokeEffect:
            TNT1 A 0 {
                sprite = GetSpriteIndex(spriteIndex);
            }
            TNT1 AAAAAAAAAA 1 BRIGHT {
                frame = frameID;
                A_Fadein(0.11);
            }
            TNT1 A -1
            {
                frame = frameID;
            }
            stop;
    }
}

class AcidsplosionShort : Acidsplosion {
    const particleCount = 50;
    const fadeSpeed = 1;
    default {
        scale 0.15;
    }
}

class FrostSmoke : Acidsplosion {
    const particleCount = 160;
    const fadeSpeed = 2;
    default {
        SelfLighting "454545";
        alpha 0.05;
        scale 0.8;
    }

    states {
		Spawn:
			TNT1 A 0;
            ICSM A 0;
            TNT1 A 0 {
                particleColor = "#FFFFFF";
                spriteIndex = "ICSM";
                frameAmount = 3;
                SetStateLabel("Initializer");
            }
    }
}

class FrostSmokeSmall : FrostSmoke {
    const particleCount = 30;
    const fadeSpeed = 1;
    default {
        alpha 0.02;
        scale 0.1;
    }

    states {
		Spawn:
			TNT1 A 0;
            ICSM A 0;
            TNT1 A 0 {
                particleColor = "#FFFFFF";
                spriteIndex = "ICSM";
                frameAmount = 3;
                SetStateLabel("Initializer");
            }
    }
}


class FrostSmokeBaby : FrostSmoke {
    const particleCount = 0;
    const fadeSpeed = 1;
    default {
        scale 0.1;
    }

    states {
		Spawn:
			TNT1 A 0;
            ICSM A 0;
            TNT1 A 0 {
                particleColor = "#FFFFFF";
                spriteIndex = "ICSM";
                frameAmount = 3;
                SetStateLabel("Initializer");
            }
    }
}

class FrostSmokeTexture : FrostSmoke {
    const particleCount = 3;
    const fadeSpeed = 1;

    default 
    {
        scale 0.44;
        alpha 0.1;
    }

    states {
		Spawn:
			TNT1 A 0;
            ICSM A 0;
            TNT1 A 0 {
                particleColor = "#FFFFFF";
                spriteIndex = "ICDC";
                frameAmount = 7;
                SetStateLabel("Initializer");
            }
    }
}

class FrostSmokeTextureSmall : FrostSmoke {
    const particleCount = 0;
    const fadeSpeed = 1;
    default {
        scale 0.24;
        alpha 0.1;
    }

    states {
		Spawn:
			TNT1 A 0;
            ICSM A 0;
            TNT1 A 0 {
                particleColor = "#FFFFFF";
                spriteIndex = "ICDC";
                frameAmount = 7;
                SetStateLabel("Initializer");
            }
    }
}

class FrostSmokeTextureTiny : FrostSmokeTextureSmall {
    const particleCount = 0;
    const fadeSpeed = 1;
    default {
        scale 0.12;
        alpha 0.06;
    }
}


class PlankSpawner : actor {

    actor spawnedPlank;
    bool spawnPlankSuccess;
	static const String PlankList[] =
		{
			"plank1",
			"plank2",
			"plank3",
			"plank4"
	};	

	string PlankSpawner;
	override void BeginPlay() {
		PlankSpawner = PlankList[random(0, PlankList.size()-1)];
        int chance = getCvar("r_particleintensity")*20;
        if(random(0,100) > chance)
        {
            destroy();
        }
		super.BeginPlay();
	}
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_SpawnItemEx(PlankSpawner, frandom(-20,20), frandom(-20,20), frandom(-10,10), frandom(-6,6), frandom(-6,6), frandom(4,12));
            }
            stop;
    }
}


class PlankSpawnerSlow : PlankSpawner {

    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_SpawnItemEx(PlankSpawner, frandom(-20,20), frandom(-10,10), frandom(-10,10), frandom(-3,3), frandom(-3,3), frandom(2,8));
            }
            stop;
    }
}



class PlankSpawnerLarge : PlankSpawner {


    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                [spawnPlankSuccess, spawnedPlank] = A_SpawnItemEx(PlankSpawner, frandom(-20,20), frandom(-20,20), frandom(-10,10), frandom(-6,6), frandom(-6,6), frandom(4,12));
                spawnedPlank.scale = (2.5, scale.x);
            }
            stop;
    }
}

class PlankSpawnerForward : PlankSpawner {
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 A_SpawnItemEx(PlankSpawner, 0, 0, 0, frandom(1,23), frandom(-13,13), frandom(4,5));
            stop;
    }
}


class PlankSpawnerUpward : PlankSpawner {
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 A_SpawnItemEx(PlankSpawner, 0, 0, 0, frandom(1,4), frandom(-4,4), frandom(1,10));
            stop;
    }
}

class WeldEffect : SelacoActor
{
    default
    {
        +SelacoActor.PreventSleep
        scale 0.35;
        +NOINTERACTION
        +ROLLSPRITE;
    }
    states
    {
        spawn:
            TNT1 A 0;
            TNT1 A 0 A_SETROLL(-220);
            TNT1 A 0 A_PLAYSOUND("EFFECT/WELDING", CHAN_5, 0.4, 0, 1.2, pitch:frandom(0.9,1.2));
            WLD1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 BRIGHT;
            TNT1 A 0 A_STOPSOUND(CHAN_5);
            TNT1 A 0 A_PLAYSOUND("EFFECT/STOPWELDING", CHAN_5, 0.4, 1.2, pitch:frandom(1.1,1.3));
            stop;
    }
}

class SparkEmberUpward : SelacoActor
{

    void spawnParticle() {
        EmitDefinition('ShortSparkParticleDefinition', chance: 1.0, numTries: 15, angle:frandom(0, 360), pitch:-15, speed:2);
    }

    default
    {
        +NoInteraction
    }
    states
    {
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                A_PlaySound ("Sparks/Spawn", pitch:frandom(0.8,1.2));
                SpawnLight(rColor:237, gColor:203, bColor:92, lightRadius:random(35,45), shadowRequirement:-1, divisionSpeed:1.3, lightSettingRequirement:2);
                EmitDefinition('LongerSparkDefinition', chance: 1.0, numTries: 5, angle:frandom(0, 360), pitch:-15, speed:2);
                EmitDefinition('ShortSparkParticleDefinition', chance: 1.0, numTries: 15, angle:frandom(0, 360), pitch:-15, speed:2);
                EmitDefinition('ShortMetalShrapnelParticle360Definition', chance: 1.0, numTries: 35, angle:frandom(0, 360), speed:2);
            }
            stop;
    }
}

class plank1 : SelacoActor {
    default {
        SelacoActor.SleepDistance 4000;
        +MISSILE
        +DOOMBOUNCE
        +THRUACTORS;
        +NOBLOCKMAP;
        +MOVEWITHSECTOR;
        +SelacoActor.IsTrash;
        -SOLID;
        mass 0;
        RenderStyle "Translucent";
        speed 5;
        BounceFactor 0.3;
        gravity 0.5;
        radius 5;
        height 5;
        SeeSound "bounce/woodplank";
    }

    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_SETROLL(random(0,360));
            }
        Looper:
            VOXE L 2 {
                if(waterlevel > 0)
                {
                    setstatelabel("Death");
                }
                A_SETANGLE(Angle + random(30,35));
                A_SETROLL(roll + random(4,6));
            }
            loop;
        Death:
            VOXE L 89 {
                EmitDefinition('SawdustDefinition', chance: 0.5, numTries: 3, pitch:90, speed:-4);
                A_SETROLL(0);
            }
            VOXE L 1 
            {
                sleep(500);
                if(getCvar("g_permanentdestruction") == 1)
                {
                    sleepindefinite();
                }
            }
            VOXE LLLLLLLLLLLLLLLLLLLL 1 A_FADEOUT(0.05);
            stop;
    }
}

class plank2 : plank1 {
    
}

class plank3 : plank1 {
    
}

class plank4 : plank1 {
    
}

class FluorescentLightBlue : interactable {
    default {
        SelacoActor.UseTag "$INTERACT_TURNOFF";
        tag "$OBJECT_LIGHT";
        radius 45;
        height 3;
        health 12;
        mass 350;
	    BloodType "Stacked_Sparks_lite", "Stacked_Sparks_lite", "Stacked_Sparks_Lite";
	    PainSound "impact/hardmetal";
        +SHOOTABLE;
        +NOGRAVITY;
        +USESPECIAL;
        Activation THINGSPEC_SWITCH;
    }
    states {
        Spawn:
            TNT1 A 0;
            VOXE L -1;
            stop;   
        Active:
            TNT1 A 0 {
                A_SPAWNITEMEX("FluorescentLightBlueOff");
                A_PLAYSOUND("script/lightoff", CHAN_AUTO);
            }
            stop;
        Death:
            TNT1 A 0 {
                A_SPAWNITEMEX("FluorescentLightBlueBroken");
                A_PLAYSOUND("script/lightoff", CHAN_AUTO);
            }
            TNT1 A 0 {
                for(int i = 0; i < 6;i++) {
                    EmitDefinition('ShortSparkParticleDefinition', 1.0, 15, pitch:90, offset:(frandom(-5,5), frandom(-15,15), frandom(0,height)));
                }
            }
            TNT1 AAAAAAAA 0 A_SpawnItemEx("LargeGlassParticle1", frandom(-15,15), frandom(-20,20), -5, frandom(-4,4), frandom(-4,4), frandom(-1,-3));
            stop;
    }
}


class leakingWaterTemp : SelacoActor 
{

    const LEAK_TICS_TILL_DEATH = 350;
    int leakTicsCurrent;
    default
    {
        +SelacoActor.PreventSleep;
        +FLOAT;
        +NOGRAVITY;
        -SOLID;
        +STANDSTILL;
        +THRUACTORS;
        +NOINTERACTION;
        height 2;
        Alpha 0;
    }
	states {
		Spawn:
		SpawnEffect:
			TNT1 A 1
            {
                leakTicsCurrent++;
                if(leakTicsCurrent >= LEAK_TICS_TILL_DEATH)
                {
                    destroy();
                }
                EmitDefinition('WaterPipeParticleDefinition', 1.0, 1, offset:(-3,0,3), flags: PE_IGNORE_CHANCE);
			}
			loop;
		Destroy:
			TNT1 A 0;
			stop;
	}
}

class FluorescentLightBlueOff : FluorescentLightBlue {
    default {
        SelacoActor.UseTag "$INTERACT_TURNON";
    }
    states {
        Active:
            TNT1 A 0 {
                A_SPAWNITEMEX("FluorescentLightBlue");
                A_PLAYSOUND("script/lighton", CHAN_AUTO);
            }
            stop;
    }
}

class FluorescentLightBlueBroken : FluorescentLightBlue {
    default {
        -USESPECIAL;
        Activation THINGSPEC_DEFAULT;
    }
    states {
        Spawn:
			VOXE LLLLLL random(60,90) {
				A_SpawnItemEx("GunFireSmokeMassive", 0, 0, 0, 0, 0, 1);
				A_SpawnItemEx("GunFireSmokeMassive", 0, 0, 0, 0, 1, 1);
				A_SpawnProjectile ("SparkEmberUpward", 0, -5, random (0, 70), 2, random (0, 190));
			}
            VOXE L -1;
            stop;
    }
}

class RainDrop : Actor {
    int aliveTicks;
    override void tick() {
        super.tick();
        aliveTicks++;
    }

    override bool CanCollideWith(actor other, bool passive)
	{
		bool res = super.CanCollideWith(other, passive);
		if(other is "Dawn")
		{
			Dawn(other).addWetScreen(5);
            if(self is 'ShowerDrop') {
                Dawn(other).AddSteam(1, 7);
            }
			return true;
		}
		return res;
	}

    default {
        +Missile
        +NoBlockMap
        -NoGravity
        +DONTSPLASH
        GRAVITY 0.8;
        Height 5;
        Radius 5;
        Renderstyle "Translucent";
        Alpha 0.0;
        Scale 1.1;
        yscale 4;
    }

    States {
        Spawn:
            TNT1 A 0;
            RNDR A 1 A_FadeIn(0.06);
            Loop;
        Death:
            TNT1 A 0 {
                A_SETSCALE(0.4);
                if(aliveTicks < 8) {

                }
            }
            TNT1 A 0 A_SpawnItemEx("LiquidParticleXSmall");
            RNDR DEFGH 2 A_FadeOut(0.15);
            TNT1 A 1 A_JumpIf(2, "SpawnFog");
            Stop;
        Remove:
            TNT1 A 0;
            stop;
        SpawnFog:
            TNT1 A 0 A_JumpIf(254, "DeathReally");
            TNT1 A 0 A_JumpIf(254, "DeathReally");
            TNT1 A 0 A_SpawnItemEx("RainSmoke", 0, 0, 3, 1, 0, 0, 0, SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEVELOCITY);
            stop;
        DeathReally:
            stop;
    }
}

class LiquidParticleXSmall : actor
{   
    override void tick()
    {
        super.tick();
        A_FADEOUT(0.02);
        scale*=1.05;
    }
    
    default
    {
            +Missile
            +NoBlockMap
            -NoGravity
            +DontSplash
            +FORCEXYBILLBOARD
            +THRUACTORS
            +NOINTERACTION
            +CLIENTSIDEONLY
            Height 2;
            Radius 2;
            Mass 0;
            BounceFactor 0.1;
            Gravity 0.5;
            RenderStyle "translucent";
            Scale 0.4;
            Alpha 0.96;
            Speed 7;
    }
    States
      {
        Spawn:
            TNT1 A 1
            {
                if(random(0,1) == 1)
                {
                bxflip = true;
                }
                scale*=frandom(-0.8,0.2);
            }
            Goto Stand;
        Stand:
            TNT1 A 0
            {
                string spriteFrame = random(0,1) ? "LIQU" : "LIQV";
                sprite = getSpriteIndex(spriteFrame);
            }
            TNT1 ABCDEFGHI 2;
            Stop;
        Death:
            TNT1 A 1;
            TNT1 A 0;
            Stop;
      }
}

class BubbleEmitter : SelacoActor
{
    int spawnRadius;
    int ticksPerSpawn;
    override void postbeginPlay()
    {
        super.postBeginPlay();
        spawnRadius = args[0] > 0 ? args[0] : 10;
        ticksPerSpawn = args[1] > 0 ? args[1] :  15;
    }

    default
    {
        SelacoActor.SleepDistance 768;
        +NOINTERACTION;
    }
    states
    {
        spawn:
            BUBL A 0;
            TNT1 A 0
            {
                A_SETTICS(ticksPerSpawn);
                A_SPAWNITEMEX("WaterBubble", frandom(0,spawnRadius), 0, 0, 0, 0, frandom(0.5,0.8), angle:random(0,360));
            }
            TNT1 A 1;
            loop;
    }
}

class LiquidParticleXTiny : LiquidParticleXSmall { 
    default
    {
        scale 0.18;
    }
}

class ArachnoJuiceSplashImpact : LiquidParticleXSmall
{
    default
    {
        scale 0.1;
        alpha 0.75;
		Translation "0:255=%[0.9,0.1,0.9]:[0.8,0.6,0.8]";
    }
}

class GrenadePin : SelacoActor
{
    default {
        +MISSILE
        damage 0;
        +THRUACTORS
        +DOOMBOUNCE
        BounceCount 3;
        BounceFactor 0.4;
        BounceSound "Weapons/grenadepin";
        SeeSound "Weapons/grenadepin";
        speed 3;
        +PRECACHEALWAYS;
    }
	States {
        Precache:
            GRND Y 0;
            stop;
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_PlaySound("Weapons/grenadepin");
			TNT1 A 0 A_SetRoll(random(0,360));
		Looper:
			GRND Y 1;
			loop;
		Death:
			GRND Y 100;
			stop;
	}	
}

class saltparticle : SelacoParticle
{
    default
    {
        +ROLLSPRITE
        +SelacoParticle.RollStop;
        +SelacoParticle.SleepStop;
        +SelacoParticle.LifeFade;
        +SelacoParticle.NoStates;       // Since we only have one graphic state, don't tick the state machine
        SelacoParticle.FadeLifeRange 0, 30;
        SelacoParticle.LifespanMutliplier   0.6, 1.0, 2.0, 3.0, 8.0;
        SelacoParticle.RandomLife 150, 240;
        SelacoParticle.StopSpeed 2;
        SelacoParticle.RandomRoll 0, 360;
        SelacoParticle.RandomRollSpeed 15, 35;
        RenderStyle "Normal";
        
        // Fire args for emitter
        SelacoParticle.RandomAngle 0,360;
        SelacoParticle.RandomPitch -40, -130;
        SelacoParticle.RandomSpeed 1, 5.5;

        SelacoParticle.RandomScaleX 0.45, 0.6;

        radius 5;
        height 5;
        gravity 0.2;
        scale 0.6;
    }
	states 
    {
		spawn: 
            TNT1 A 0;
			TNT1 A 0
            {
                gravity = gravity+frandom(0,-0.02);
            }
			TNT1 A 0 A_SetRoll(random(0,360));
        Looper:
            SALT C -1;
            loop;
    }
}

class pepperParticle : saltparticle
{
  override void postbeginPlay()
  {
        super.postBeginPlay();
        A_SETTRANSLATION("SALTTOPEPPER");
  }
}

/* class RainDropMissileShooter : SelacoActor {
    
    default
    {
        +FLOAT
        +NOGRAVITY
        -SOLID
        +STANDSTILL
        +THRUACTORS
        +NOINTERACTION
        tag "Dropping Raindrops";
        SelacoActor.SleepDistance 786;
        height 2;
        Alpha 0;
    }
	states {
		Spawn:
			DROP L 0;
			TNT1 A random(30, 150) A_CheckProximity("SpawnEffect", "Dawn", 1200, 1, CPXF_SetTarget);
			loop;
		SpawnEffect:
			TNT1 A 1 {
				emit("RainDropMissileParticle", chance: 1, numTries:2);
			}
            goto Spawn;
		Destroy:
			TNT1 A 0;
			stop;
	}
}

class RainDropMissileParticle : SelacoParticle 
{

    override bool onDeath() {
        vel = (0,0,0);
        SetXYZ((pos.x, pos.y, floorz));
        SetStateLabel("Plop");
        return false;
    }


    default
    {
        speed   2;
        radius  2;
		height  2;
        alpha 0.7;
        gravity 0.5;
        +FLATSPRITE;
        +INTERPOLATEANGLES;
        +ROLLSPRITE;
        +NOINTERACTION
        RenderStyle "Add";
        XScale 0.076;
        Yscale 0.097;
        DistanceCheck "r_thingLOD";
        BounceFactor 0;
        +SelacoParticle.KillStop;
        +SelacoParticle.DirFromMomentum;
        +SelacoParticle.VelocityFade;
        +SelacoParticle.LifeFade;
        +SelacoParticle.NoStates;
        SelacoParticle.BounceFudge 0;
        SelacoParticle.LifespanMutliplier   0.3 , 0.8, 1.5, 1.7, 2.2;
        SelacoParticle.FadeVelRange     0.2 , 3;
        SelacoParticle.FadeLifeRange    0   , 30;
        SelacoParticle.RandomLife       14  , 55; 
        SelacoParticle.RandomScaleX 0.615, 2.567;
        SelacoParticle.RandomScaleY 0.65, 1.267;
        SelacoParticle.StopSpeed 2;
        SelacoParticle.BouncesRange 0,  0;

        // Fire args for emitter
        SelacoParticle.RandomAngle  -25 , 25;
        SelacoParticle.RandomPitch  0 , 30;
        SelacoParticle.RandomSpeed  0.4   , 2;
    }
    states
    {
        Spawn:
            DROP L -1;
            loop;
		Plop:
			TNT1 A 0 A_SETRENDERSTYLE(1.0, STYLE_Translucent);
            TNT1 A 0
            {
                if(random(0,4) == 0)
                {
                    A_SpawnItemEx("LiquidParticleXSmall");
			        A_SPAWNITEMEX("WaterFoam", 0, 0, 2, 0.8, 0 ,0);  
                    A_PLAYSOUND("impact/waterdrop", CHAN_AUTO, 0.5);
                }             
            }
			RNDR BCDEFGH 3 A_FadeOut(0.15);
            stop;
    }
} */

class Shadow_shape_1 : SelacoActorStatic
{
    default
    {
        renderstyle "translucent";
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class ClutterSpawner : actor
{
    int clutterRadius;
    int spawnCount; //debugging
    float clutterDensity;

    property ClutterRadius : clutterRadius;
    property ClutterDensity : clutterDensity;

    override void beginPlay()
    {
        super.BeginPlay();
        if(args[0] > 0)
        {
            clutterRadius = args[0];
        }
        if(args[1]> 0)
        {
            clutterDensity = args[1];
        }
        clutterDensity = clutterDensity*0.1;
 		for(int x=0;x<clutterRadius*clutterDensity;x++)
		{
            actor clutterSprite;
            bool clutterSpriteSuccess;
            spawnCount++;
			[clutterSpriteSuccess, clutterSprite] = A_SPAWNITEMEX("ClutterSprites", random(-1*clutterRadius,clutterRadius), 0, 0, angle:random(0,360));
            ClutterSprites clutterSpriteInstance = ClutterSprites(clutterSprite);
            if(clutterSpriteInstance)
            {
                clutterSpriteInstance.bMissile = false;
                clutterSpriteInstance.permanentMode = true;
                clutterSpriteInstance.setStateLabel("death");
            }
		}    
        console.printf("\c[RED]CLUTTER SPAWNER:\c- %d clutter objects spawned within radius %d with density %d", spawnCount, clutterRadius, clutterDensity);   
    }

    default
    {
        +NOINTERACTION
        ClutterSpawner.ClutterRadius 80;
        ClutterSpawner.ClutterDensity 3;
    }
    states
    {
        Spawn:
            TNT1 A 1;
            stop;
    }
}

class ClutterSprites : SelacoActor
{
    int frameID;
    string spriteType;
    int rotateSpeed;
    bool permanentMode;
    static const String trashList[] =
		{
			"JNK1",
			"JNK2",
            "JNK3",
            "JNK4",
            "JNK5",
            "JNK6",
            "JNK7",
            "JNK8",
            "JNK9"
	};	

    override void postbeginPlay()
    {
        super.postBeginPlay();

        // Initialize
        spriteType = trashList[random(0,trashList.size()-1)];
        frameID = random(0,25);
        if(spriteType == "JNK9")
        {
            frameID = random(0,2);
        }

        // Apply
        rotateSpeed = random(35,45);
        gravity = frandom(0.4,0.7);
        if(random(0,1) == 1)
        {
            bXflip = true;
        }
        A_SETANGLE(random(0,360));
        A_SETROLL(random(0,360));
        A_SETSCALE(scale.x+frandom(-0.04, 0.04));
        sprite = getspriteindex(spriteType);
    }
    
    default
    {
        +ROLLSPRITE;
        +MISSILE;
        +DOOMBOUNCE;
        +NOBLOCKMAP;
        +THRUACTORS;
        +CASTSPRITESHADOW
        +SelacoActor.CrushIgnored;
        radius 5;
        height 5;
        BounceFactor 0.3;
        gravity 0.4;
        scale 0.28;
    }
    states
    {
        indexer:
            JNK1 A 0;
            JNK2 A 0;
            JNK3 A 0;
            JNK4 A 0;
            JNK5 A 0;
            JNK6 A 0;
            JNK7 A 0;
            JNK8 A 0;
            JNK9 A 0;
        spawn:
            TNT1 A 0;
        Looper:
            TNT1 A 3
            {
                A_SETANGLE(angle+rotateSpeed);
                A_SETROLL(roll+rotateSpeed);
                frame = frameID;
            }
            loop;
        Death:
            TNT1 A 1
            {
                bCastSpriteShadow = false;
                bFlatSprite = true;
                A_SETROLL(0);
                frame = frameID;
            }
        WaitForSleep:
            TNT1 A 100
            {
                frame = frameID;
            }
            TNT1 A 1
            {
                frame = frameID;
                if(permanentMode)
                {
                    sleepIndefinite();
                }
                else
                {
                    sleep(400);
                }
            } 
            goto fade;
        Fade:
            TNT1 AAAAAAAAAAAAAAAAAAAA 1
            {
                A_FADEOUT(0.05, FTF_REMOVE);
                frame = frameID;
            }
            stop;
    }
}

class EnergyBeam : actor {
    mixin lightEmitter;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        roll=0;
    }
    default {
        speed 0;
        +NOINTERACTION;
        +BLOODLESSIMPACT;
        +ROLLSPRITE;
        +FLATSPRITE
        scale 0.1;
        RenderStyle "add";
    }
    states {
        Spawn:
            TNT1 A 0;
            ELCB AAAAAAAA 2 BRIGHT {
                if(random(0,10) == 0)
                {
                    spawnLight(50, 153, 168, 40, shadowrequirement:-1, divisionSpeed: 1.3);
                }
                frame = random(0,3);
            }
            stop;
    }
}

// Whatever this is supposed to be. It's the stuff that melts iron walls through yellow barrels!
class YellowSlime : SelacoActor {
	default {
		+MISSILE 
		+NOTELEPORT 
		+NOBLOCKMAP 
		+NOBLOCKMONST 
		+DONTSPLASH
		+CLIENTSIDEONLY 
		+THRUACTORS 
		+ROLLSPRITE
        +NOCLIP;
		+NOBLOODDECALS
		scale 0.64;
		radius 5;
		height 5;
		speed 2;
		SelfLighting "E09119";
		Gravity 0.2;
		RenderStyle "Translucent";
		alpha 0.7;
	}
    states
    {
			Spawn:
			TNT1 A 0;
            TNT1 A 0 {
                A_SetTranslation("PurpleToOrange");
            }
			TNT1 A 0 A_SetRoll(random(0, 360));
			PSBL ABCDEFGHIJKLMN 1 A_FadeOut(0.04);
			PSBL NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN 1 A_FadeOut(0.04);
			Stop;
    }
}

class YellowSlimeLong : YellowSlime
{

    override void tick()
    {
        super.tick();
        A_FADEOUT(0.02, FTF_REMOVE);
    }
    default
    {
		RenderStyle "add";
        scale 0.45;
    }
    states
    {
			Spawn:
			TNT1 A 0;
            TNT1 A 0 {
                A_SetTranslation("PurpleToOrange");
            }
			TNT1 A 0 A_SetRoll(random(0, 360));
			PSBL ABCDEFGHIJKLMN 2;
			PSBL NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN 2;
			Stop;
    }   
}

class YellowSlimeSmall : YellowSlime 
{
    default
    {
        scale 0.25;
    }
}

class CRATELID_GREENGREY : SelacoActor {
    override void PostBeginPlay() {
        super.PostBeginPlay();
		for(int x=0;x<=360;x+=30) {
			A_SPAWNITEMEX("BulletImpactEffectMetalZpuff", 25, 0, 0, 1, angle:x);
		}
        A_PlaySound("SCRIPT/BREAKMETALGRATE", CHAN_AUTO);
        A_SPAWNITEMEX("SmokeScatteredCloud");
        EmitDefinition('SparkParticleDefinition', chance: 1.0, numTries: 75, angle:random(0,360), pitch:frandom(-16,0), speed:frandom(1.4,2.5), offset:rectOffset(8,8), velocity:(2, 2, frandom(0,2)), flags:PE_ABSOLUTE_PITCH);
    }

    bool isDead;
    override void tick() {
        super.tick();
        if(!isDead) {
            A_SPAWNITEMEX("SmokeScatteredCloudFast");
        }
    }
    
    default {
        +MISSILE;
        +DOOMBOUNCE
        +NOBLOCKMAP
        +THRUACTORS
        BounceFactor 0.5;
        BounceCount 4;
        radius 5;
        height 5;
        gravity 0.8;
        speed 5;
    }
    states {
        spawn:
            TNT1 A 0;
            VOXE L 1 {
                A_CHANGEVELOCITY(3, frandom(3,5), 15, CVF_RELATIVE);
            }
        Looper:
            VOXE L 3 {
                A_SETPITCH(pitch+35);
            }
            loop;
        Death:
            VOXE L -1 {
                isDead = true;
                A_SETPITCH(0);
            }
    }
}

class CRATELID_GREYGREY : CRATELID_GREENGREY {

}


class OilSplatter : Actor
{

    override void postbeginPlay()
    {
        super.postBeginPlay();
        A_SETROLL(random(0,360));
    }

    default
    {
        +ROLLSPRITE
        +MISSILE
        speed 9;
        scale 0.22;  
        gravity 0.3;
        radius 2;
        height 2;
    }

    states
    {
        Spawn:
            OILA ABCDEFGHIJKLMN 1;
            OILA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO 1
            {
                A_FADEOUT(0.05, FTF_REMOVE);
            }
            stop;
    }
}

class OilSplatterTrail : OilSplatter
{
    default
    {
        scale 0.09;
    }
}

class OilSplatterSlow : OilSplatter
{
    states
    {
        Spawn:
            OILA ABCDEFGHIJKLMN 2;
            OILA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO 2
            {
                A_FADEOUT(0.05, FTF_REMOVE);
            }
            stop;
    }
}

class debrisSpawner : SelacoActor
{
    mixin SmokeEmitter;

    const DIRT_SPAWN_MIN_TIME = 135;
    const DIRT_SPAWN_MAX_TIME = 190;
    const SPRAY_MIN = 6;
    const SPRAY_MAX = 12;
    int timeTarget;
    int currentTime;
    int sprayAmount;
    int sprayAmountTarget;
    override void tick()
    {
        super.tick();
        currentTime++;
        if(currentTime >= timeTarget)
        {
            if(sprayAmount == 0) {
                A_PRINTBOLD("debris");
                sprayAmountTarget = random(SPRAY_MIN,SPRAY_MAX);
                A_PLAYSOUND("DEBRIS/SPAWN", CHAN_AUTO, 0.5, 0, 0.9);
            }
            spawnDirtBits();
            if(sprayAmount >= SPRAY_MAX) {
                sprayAmount= 0;
                setTimeTarget();
                return;
            }
            sprayAmount++;
        }
    }

    void spawnDirtBits()
    {
        for(int x=0;x<2;x++)
        {
            EmitDefinition('DebrisChunkParticleGentleDropBriefDefinition', 0.75,8, offset:(frandom(-1,1), frandom(-15,15), frandom(0,2)));
            EmitDefinition('DebrisChunkParticleGentleDropDefinition', 0.75,4, offset:(frandom(-1,1), frandom(-15,15), frandom(0,2)));
            spawnSmoke("smk7", smokeSize: 0.19, offsets:(frandom(-3,3), frandom(-10,10), frandom(2,3)), velocity:(0,frandom(-0.3,0.3),-0.2), smokeAlpha:0.1, fadingSpeed:0.95, rollingSpeed:frandom(-0.1,0.1));
        }
    }

    void setTimeTarget()
    {
        currentTime = 0;
        timeTarget = random(DIRT_SPAWN_MIN_TIME, DIRT_SPAWN_MAX_TIME);
    }

    default
    {
        +NOINTERACTION
        SelacoActor.sleepDistance 1500;
    }
    states
    {
        Spawn:
            TNT1 A -1;
            stop;
    }
}

class WetScreenBox : SelacoActor
{
    actor touchingActor;
    bool rainSoundPlaying;
    override void touch(actor toucher)
    {
        if(toucher is "Dawn")
        {
            touchingActor = toucher;
        }
    }

    override void tick()
    {
        super.tick();
        if(touchingActor)
        {
            if(distance2D(touchingActor) <= radius)
            {
                rainSoundPlaying = true;
                touchingActor.A_PLAYSOUND("PLAYER/RAIN", CHAN_7, 0.7, 1, 1);
                ShaderHandler.LevelSetRain(amount: 150);
            }
            else
            {
                if(rainSoundPlaying)
                {
                    touchingActor.A_PLAYSOUND("PLAYER/RAIN/DRY", CHAN_7, 0.4, pitch:frandom(0.9,1.1));
                    touchingActor = null;
                    rainSoundPlaying = false;
                }
            }   
        }
    }

    default
    {
        +DONTTHRUST
        +SPECIAL
        +SELACOACTOR.DecorativeActor;
        SelacoActor.SleepDistance 150;
        -Shootable
        radius 70;
        height 100;
    }
    states
    {
        Spawn:
            TNT1 A -1;
            stop;
    }
}

class Sprayer : Waterbottle_cap {

}

// These are here for save compatibility reasons
class SnowSpawnerLong : actor { }
class SnowSpawner : actor { }

class SmokeAnimator : actor {

    override void postBeginPlay() {
        super.postBeginPlay();
        roll = random(0,360);
        scale*=1.06;
    }

    default {
        +NOINTERACTION;
        +ROLLSPRITE;
        Alpha 0.5;
        Scale 0.4;
        Renderstyle "Add";
    }
	states {
		Spawn:
			TNT1 A 0;
			SMOK ABCDEFGHIJKLMNOPQ 1 A_FADEOUT(0.025);
			goto Death;
		Death:
			TNT1 A 0;
			stop;
	}
}

class BulletImpactPuffSmoke : SmokeAnimator {
    default {
        alpha 0.4;
        Scale 0.5;
    }	
}


Class FlowerChunk_UP : PaperChunk {
    default {
        +NOBLOODDECALS
	    scale 0.17;
    }
	States {
		spawn:
            TNT1 A 0;
            TNT1 A 0 A_SpawnItemex("PlantImpactEffect");
    	    TNT1 A 0 A_SpawnItemEx("PlantImpactSmoke", 0, 0, 0, frandom(1, 2), frandom(1.5, 2));
		    TNT1 A 0 A_SpawnItemEx("PlantImpactSmoke", 0, 0, 0, frandom(1, 2), frandom(-1.5, -2));
	  	    TNT1 A 0 A_SpawnItemEx("PlantImpactSmoke", 0, 0, 0, frandom(1.5, 2), 0, frandom(1.5, 2));
			TNT1 A 0 {
                EmitDefinition('FlowerChunkSmall', 1.0, 3);
            }
			stop;
		Destroy:
			TNT1 A 0;
			stop;
	}
}

// TO-DO: Delete this for v1.0
class BoneLarge : actor {
    
}


class RedPlasmaPuff: PlasmaPuff
{
    states  {
        Spawn:
            PBEX A 0;
            TNT1 A 0 {
                A_SETROLL(frandom(0,360));
                EmitDefinition("ShortRedSpark", 1.0, 35, angle:-180);
            }
            TNT1 AAAAAAAA 0 A_SpawnItemEx("REDplasmaEmber");
            IPP3 ABC 1 BRIGHT A_SpawnItem("zRedFlareLarge" ,0);
            IPP3 DEF 1 BRIGHT;
            stop;
    }
}