
class WaterSplashParticleDefinition : ParticleDefinition {
    override void init() {
        super.init();
        self.SetGravity(0.3);
        self.DefaultRenderStyle = STYLE_TRANSLUCENT;
        self.SetBaseScale(0.24);
        self.SetFlag(DPF_LOOPANIMATION);
        self.SetFlag(PDF_CHECKWATER);
        self.SetFlag(PDF_KILLSTOP);
        self.setFlag(PDF_VELOCITYFADE);
        self.setFlag(PDF_LIFEFADE);
        self.SetLifespanMultipliers(0.5, 0.8, 1.0, 1.7, 2.2);
        self.FadeVelRange(0.2,3);
        self.FadeLifeRange(0,30);
        self.RandomLife(14,55);
        self.RandomScaleX(0.2,1.0);
        self.RandomScaleY(0.2,1.0);
        self.StopSpeed = 2;
        self.BouncesRange(0,0); 
    
        self.RandomRoll(0,360);
        self.RandomRollSpeed(-3,3);
        self.RandomAngle(0,360);
        self.RandomPitch(-80, -115);
        self.RandomSpeed(1.4,6.5);
    }


    override void OnParticleEnterWater(in out ParticleData particle, float surfaceHeight) {
        particle.SpawnActor("WaterFoamSlowSmall", 0, 0, 6);
        if(particle.pos.z <= particle.floorz) {
            ParticleDefinition.SpawnParticle('WaterPlopParticleSmallDefinition', 
                xoff: particle.pos.x,
                yoff: particle.pos.y,
                zoff: particle.pos.z
            );
        }
        particle.destroy();
    }


    override void OnCreateParticle(in out ParticleData particle, Actor refActor) {
        // flip for more variety
        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
        particle.scale.y*= random(0,1) == 1 ? -1 : 1;
    }

    // Spawning a water droplet effect
    override bool OnParticleDeath(in out ParticleData particle)
    {
        if(particle.pos.z == particle.floorz) {
            ParticleDefinition.SpawnParticle('WaterPlopParticleDefinition', 
                xoff: particle.pos.x,
                yoff: particle.pos.y,
                zoff: particle.pos.z
            );
        }
        return 1;
    }
}


class UnderWaterDartParticle : UnderWaterParticle {

    override void init() {
        super.init();
        self.SetBaseScale(0.05);
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor)
    {
        super.OnCreateParticle(particle, refActor);
        particle.AlphaStep = -0.025;
    }   
}


// TO-DO: Struggling to make these new sprites look good on the leak particles >:( Needs work!
class WaterLeakParticleDefinition : WaterSplashParticleDefinition {

    override void init() {
        super.init();
        self.ClearFlag(PDF_DIRFROMMOMENTUM);
        self.SetBaseScale(0.03);
        self.SetGravity(0.25);
        self.RandomAngle(-35,35 );
        self.RandomSpeed(0.5,2);
        self.RandomPitch(-5,-7);
        self.RandomRoll(0,360);
        self.RandomRollSpeed(-3,3);
        self.RandomScaleY(1,3);
        self.RandomScaleX(1,2.8);
        self.ClearFlag(PDF_KILLSTOP);
        self.ClearFlag(PDF_LIFEFADE);
    }


    override void OnCreateParticle(in out ParticleData particle, Actor refActor)
    {
        particle.Texture = SelectRandomFrame("WSPH", "CD");
        particle.initLife(900);
        // TO-DO: This isn't doing anything?
        particle.alpha = 0.75;

        // Additional variance
        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
        particle.scale.y*= random(0,1) == 1 ? -1 : 1;

        particle.SetScaleStep(1.03);
    }
}

class WaterLeakParticleStrayDefinition : WaterLeakParticleDefinition {
    override void init() {
        super.init();
        self.RandomSpeed(0.5,2.5);
        self.RandomAngle(-12,12);
    }
}


class WaterSplashParticlePuffDefinition : WaterSplashParticleDefinition {
    override void init() {
        super.init();
        self.SetFlag(PDF_LIFEFADE);
        self.ClearFlag(PDF_VELOCITYFADE);
        self.ClearFlag(PDF_CHECKWATER);
        self.ClearFlag(DPF_LOOPANIMATION);
        self.FadeLifeRange(0,20);
        self.SetGravity(0.4);
        self.RandomLife(15,20);
        self.RandomSpeed(2,7);
        self.RandomAngle(0,360);
        self.RandomPitch(-70,-110);
        AddAnimationSequence();
        AddAnimationFrames(0, "WSPH", "ABCD", 4);
    }
    override void OnCreateParticle(in out ParticleData particle, Actor refActor) {
        particle.alpha = 1.0;
        PlayAnimationSequence(particle, 0, 0);
    }
}

class WaterSplashParticlePuffWildDefinition : WaterSplashParticlePuffDefinition {
    override void init() {
        super.init();
        self.RandomSpeed(1,6);
        self.RandomPitch(-40,-45);
    }
}


class WaterSplashPipeImpact : WaterSplashParticleDefinition {
    override void init() {
        super.init();
        self.SetFlag(PDF_LIFEFADE);
        self.ClearFlag(PDF_VELOCITYFADE);
        self.FadeLifeRange(0,10);
        self.SetBaseScale(0.3);
        self.SetGravity(0.3);
        self.RandomLife(13,18);
        self.RandomSpeed(1,4);
        self.RandomAngle(-25,25);
        self.RandomPitch(-65,-25);
        AddAnimationSequence();
        AddAnimationFrames(0, "WSLA", "ABCDEFGHIJKLMNOP", 2);
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor) {
        particle.alpha = 1.0;
        PlayAnimationSequence(particle, 0, 0);
    }

}


// TODO: How to stop looping?
// TODO: WATERFOAM + WATER DECAL
class WaterParticleDefinition : WaterSplashParticleDefinition {
    override void init() {  
        super.init();
        self.speed = 20;
        self.SetGravity(0.7);
        self.SetBaseScaleXY(0.05,0.06);
        self.SetFlag(PDF_KILLSTOP);
        self.RandomSpeed(1,6);
        self.BouncesRange(0,0);
        self.Randomangle(-7,7);
        self.RandomRoll(0,360);
        self.RandomScaleY(0.9,2.9);
        self.RandomScaleX(0.9,2.8); 
        self.RandomPitch(-2,2);

        AddAnimationSequence();
        AddAnimationFrames(0, "WSPH", "ABCD", 8);
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor) {
        // flip for more variety
        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
        particle.scale.y*= random(0,1) == 1 ? -1 : 1;
        particle.alpha = 1.0;
    }
}

class WaterPipeParticleDefinition : WaterSplashParticleDefinition {
    int sequence;
    override void init() {  
        super.init();
        self.speed = 20;
        self.SetGravity(0.4);
        self.SetBaseScaleXY(0.09,0.1);
        self.SetFlag(PDF_KILLSTOP);
        self.ClearFlag(PDF_VELOCITYFADE);
        self.SetDefaultParticleFlag(DPF_COLLIDEWITHPLAYER);
        self.RandomSpeed(1,3);
        self.BouncesRange(0,0);
        self.randomLife(300,500);
        self.Randomangle(-7,7);
        self.RandomRoll(0,360);
        self.RandomRollSpeed(-10,10);
        self.RandomScaleY(0.9,2.9);
        self.RandomScaleX(0.9,2.8); 
        self.RandomPitch(-2,2);

        sequence = AddAnimationSequence();
        AddAnimationFrames(sequence, "WSLA", "ABCDEFGHIJKLMNOP", 2);
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor) {
        // flip for more variety
        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
        particle.scale.y*= random(0,1) == 1 ? -1 : 1;
        particle.alpha = 1.0;
        particle.SetScaleStep(1.002);
        PlayAnimationSequence(particle, sequence, 0);
    }

    override void OnParticleCollideWithPlayer(in out ParticleData particle, Actor player) {
        Dawn(player).addWetScreen(random(10,255));
    }

}

// TO=DO: WaterParticleX.SplashActor "LiquidParticleXSmall";
// TO-DO: Decal
class waterParticleXDefinition : WaterSplashParticleDefinition {
    override void init() {
        super.init();
        self.ClearFlag(DPF_LOOPANIMATION);
        self.ClearFlag(PDF_CHECKWATER);
        self.RandomLife(100,125);
        self.RandomSpeed(2,6);
        self.RandomPitch(-50,-80);
        self.SetBaseScale(0.15);
        self.RandomScaleY(0.5,1.2);
        self.RandomScaleX(0.5,1.2); 
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor) {
        // flip for more variety
        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
        particle.scale.y*= random(0,1) == 1 ? -1 : 1;
        particle.alpha = 0.9;
        //StopAnimation(particle);
        particle.Texture = SelectRandomFrame("WSPH", "ABCD");
    }


    override bool OnParticleDeath(in out ParticleData particle) {
        if(random(0,50) <= 100) {
            particle.SpawnActor('WaterSplatter');
        }
        return super.OnParticleDeath(particle);
    }
}

class waterParticleSmallXDefinition : waterParticleXDefinition {
    override void init() {
        super.init();
        self.SetBaseScale(0.15);
    }

    override bool OnParticleDeath(in out ParticleData particle) {
        if(particle.pos.z == particle.floorz && random(0,100) <= 50) {
            ParticleDefinition.SpawnParticle('WaterPlopParticleSmallDefinition', 
                xoff: particle.pos.x,
                yoff: particle.pos.y,
                zoff: particle.pos.z
            );
        }
        if(random(0,50) <= 100) {
            particle.SpawnActor('WaterSplatter');
        }
        return 1;
    }
}

class WaterParticleXPlayerCollisionDefinition : WaterParticleXDefinition {
    override void init() {
        super.init();
        self.SetDefaultParticleFlag(DPF_COLLIDEWITHPLAYER);
    }


    override void OnParticleCollideWithPlayer(in out ParticleData particle, Actor player) {
        Dawn(player).addWetScreen(random(1,3));
    }
}

class waterParticleXToiletSpray : waterParticleXDefinition {
    override void init() {
        super.init();
        self.clearflag(DPF_LOOPANIMATION);
        self.SetBaseScale(0.06);
        self.RandomSpeed(1,5);
        self.RandomPitch(-25,-55);
        self.RandomAngle(-15,15);
        self.randomRoll(-4,4);
        self.randomScaleX(1,2.5);
        self.RandomScaleY(1,2.5);
    }
}

class waterParticleFireHydrantDefinition : waterParticleXDefinition {
    override void init() {
        super.init();
        self.SetBaseScale(0.09);
        self.randomPitch(-10,10);
        self.RandomSpeed(6,11);
        self.ClearFlag(DPF_LOOPANIMATION);
        AddAnimationSequence();
        AddAnimationFrames(0, "WSPH", "ABCD", 4);
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor) {
        // flip for more variety
        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
        particle.scale.y*= random(0,1) == 1 ? -1 : 1;
        particle.alpha = 0.9;
        particle.SetScaleStep(1.001);
        PlayAnimationSequence(particle, 0, 0);
    }

}

// TO-DO: Make it not collide with the player correcting WaterParticleXDefinition
class waterParticleXDefinitionNoCollision : WaterParticleXDefinition {

}

class waterParticleXBiggerDefinition : WaterSplashParticleDefinition {
    override void init() {  
        super.init();
        self.RandomPitch(-70,-110);
        self.RandomSpeed(2,10);
        self.randomLife(90,150);
        self.SetLifespanMultipliers(0, 1.0, 1.0, 1.0, 1.0);
        self.SetBaseScale(0.4);
        AddAnimationSequence();
        AddAnimationFrames(0, "WSPH", "AAABBBCCCDDDDDDDD", 4);
    }

}
class WaterSplashParticleWildDefinition : WaterSplashParticleDefinition {
    override void init() {
        super.init();
        self.SetGravity(0.6);
        self.RandomSpeed(1,4);
        self.RandomPitch(-20,-40);
        AddAnimationSequence();
        AddAnimationFrames(0, "WSPH", "ABCDDDD", 4);
    }
}


class WaterPlopParticleDefinition : ParticleDefinition {
    const WATER_SOUND_CHANCE = 25;
    static const String SmokeEffects[] = {"LIQU", "LIQV"};

    override void Init()
    {
        super.Init();
        self.RandomRoll(-5,5);
        self.DefaultRenderStyle = STYLE_Normal;

        for (int i = 0; i < SmokeEffects.Size(); i++)
        {
            int sequence = AddAnimationSequence();
            AddAnimationFrames(sequence, SmokeEffects[i], "ABCDEFGHI", 2);
        }
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor)
    {
        if(random(0,100) <= WATER_SOUND_CHANCE) { 
            particle.PlaySound("impact/waterdrop", 1.0, pitch:frandom(1.0,1.2));
        }
        int sequence = random(0, GetAnimationSequenceCount() - 1);
        particle.InitLife(GetAnimationLengthInTicks(sequence));
        
        particle.AnimFrame = GetAnimationStartFrame(sequence);
        particle.SetScale(0.25 + frandom(0, 0.7));
        particle.SetScaleStep(1.01);
        particle.AlphaStep = -0.05;

        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
    }
}

class WaterPlopParticleSmallDefinition : WaterPlopParticleDefinition {
    override void OnCreateParticle(in out ParticleData particle, Actor refActor)
    {
        super.OnCreateParticle(particle, refActor);
        particle.SetScale(0.06 + frandom(0, 0.13));
        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
    }
}

class WaterPlopParticleSmallTransparantDefinition : WaterPlopParticleSmallDefinition {
    override void OnCreateParticle(in out ParticleData particle, Actor refActor)
    {
        super.OnCreateParticle(particle, refActor);
        particle.alpha = 0.9;
    }
}

class WaterPlopNoGravity : WaterPlopParticleDefinition {
    override void init() {
        super.init();
        super.RandomRoll(135,-225);
    }
    override void OnCreateParticle(in out ParticleData particle, Actor refActor)
    {
        super.OnCreateParticle(particle, refActor);
        particle.AlphaStep = -0.075;
    }
}

class GrassBladeParticleFootstepDefinition : GrassBladeParticleDefinition {
    override void init() {
        super.init();
        self.BounceSound = "Bounce/Plant";
        self.RandomPitch(-50,-140);
        self.RandomSpeed(1.3,4);
        self.RandomLife(35,50);
        self.SetBaseScale(0.05);
    }
}

class waterSplashParticleFootstepDefinition : WaterSplashParticlePuffDefinition {
    override void init() {
        super.init();
        self.SetBaseScale(0.16);
        self.RandomPitch(-50,-130);
        self.RandomSpeed(0.3,3);
    }
}


class WaterSplatterEffectDefinition : PurpleSplatterEffectDefinition {
    override void init() {
        super.init();
        self.SetBaseScale(0.27);
        self.ClearFlag(DPF_LOOPANIMATION);
        AddAnimationSequence();
        AddAnimationFrames(1, "WSLA", "ABCDEFGHIJKLMNOP", 2);
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor)
    {
        super.OnCreateParticle(particle, refActor);
        PlayAnimationSequence(particle, 1, 0);
        particle.AlphaStep = -0.008;
    }   

    override bool OnParticleDeath(in out ParticleData particle) {
        // Check for objects that can be affected by water
        BlockThingsIterator it = BlockThingsIterator.CreateFromPos(particle.pos.x, particle.pos.y, particle.pos.z, 1, 64, false);
        SelacoActor currentActor;
        while (it.Next()) {
            currentActor = SelacoActor(it.thing);
            if(currentActor && currentActor.bSplashable && (currentActor.pos - particle.pos).lengthSquared() < (40 * 40)) {
                currentActor.onParticleSplash(particle);
            }
        }

        return true;
    }
}

class WaterSplatterEffectSmallDefinition : WaterSplatterEffectDefinition {
    override void init() {
        super.init();
        self.SetBaseScale(0.15);
    }
}


class UnderWaterParticle : WaterSplashParticlePuffDefinition {
    bool fadeOut;
    override void init() {
        super.init();
        self.SetBaseScale(0.08);
        self.SetFlag(PDF_CHECKWATER);
        self.ClearFlag(PDF_LIFEFADE);
        self.ClearFlag(PDF_VELOCITYFADE);
        self.ClearFlag(DPF_LOOPANIMATION);
        self.ClearFlag(PDF_KILLSTOP);
        self.stopSpeed = 0;
        self.SetGravity(0);
        self.RandomLife(100,200);
        self.RandomRollSpeed(-1,1);
    }

    override void OnParticleExitWater(in out ParticleData particle, float surfaceHeight) {
        particle.destroy();
    }

    override void ThinkParticle(in out ParticleData particle) {
        if(!particle.HasFlag(DPF_UNDERWATER)) {
            particle.destroy();
        }
    }

    override void OnCreateParticle(in out ParticleData particle, Actor refActor)
    {
        StopAnimation(particle);
        particle.alpha = 0.6;
        particle.Texture = SelectRandomFrame("WSPH", "ABCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDD");

        // Additional variance
        particle.scale.x*= random(0,1) == 1 ? -1 : 1;
        particle.scale.y*= random(0,1) == 1 ? -1 : 1;

        particle.SetScaleStep(1.025);
        particle.AlphaStep = -0.01;
    }

}
