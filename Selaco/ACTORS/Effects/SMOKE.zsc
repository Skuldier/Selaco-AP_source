// Similar to the Particle Handler, but this time it's for smoke.
class SmokeHandler : EventHandler
{
    int activeSmoke;
    int currentSmokeSetting;
	int denseSmokeSetting;
    int recentSmokeTick; // Used ot keep track of how smoke puffs that spawned recently.

    Array<SelacoSmoke> smokeCount;
    Array<SelacoSmoke> recentSmoke; // Check most recent smoke puffs for comparison
    class<SelacoSmoke> spRef;

    // Smoke is removed immediately when going over this number
    static const int smokeLimits[] = { 
        100,    // Low
        300,    // Med
        400,   // High
        500,   // Ultra    
        900    // Insane
    };

    override void OnRegister() {
        spRef = 'SelacoSmoke';
        currentSmokeSetting = clamp(CVar.FindCVar("r_smokequality").GetInt() - 1, 0, 5);
		denseSmokeSetting =  CVar.FindCVar("r_smokedensity").GetInt();
		recentSmokeTick = 0; // Initialize gametick threshold. Dont even think we have to this but whatever
    }

    override void WorldTick() {
		// Frequently update the CVAR
        if (level.time % 35 == 0) {
            currentSmokeSetting = clamp(CVar.FindCVar("r_smokequality").GetInt() - 1, 0, 5);
			denseSmokeSetting =  CVar.FindCVar("r_smokedensity").GetInt();
        }  
        // Clear recentSmoke after 8 gameticks
        if (recentSmokeTick >= 8) {
            recentSmoke.clear();
            recentSmokeTick = 0; // Reset gametick counter
        } else {
            recentSmokeTick++;
        }
    }

	void destroySmoke(SelacoSmoke smoke)
	{
		for (int i = 0; i < smokeCount.size(); ++i)
		{
			if (smokeCount[i] == smoke)
			{
				smokeCount.delete(i);
				break;
			}
		}
	
		for (int i = 0; i < recentSmoke.size(); ++i)
		{
			if (recentSmoke[i] == smoke)
			{
				recentSmoke.delete(i);
				break;
			}
		}
	}

	void removeFromArray(Array<SelacoSmoke> arr, SelacoSmoke target)
	{
		for (int i = 0; i < arr.size(); ++i)
		{
			if (arr[i] == target)
			{
				arr[i] = arr[arr.size() - 1];
				arr.pop(); // Avoids shifting
				break;
			}
		}
	}

	void findNearbySmoke(SelacoSmoke smokeActor)
	{
		for(int x = 0; x < recentSmoke.size();x++)
		{
			if(recentSmoke[x] && !(recentSmoke[x] == smokeActor) && smokeActor.distance3Dsquared(recentSmoke[x]) <= smokeActor.cullDistance*smokeActor.cullDistance) {
				SelacoSmoke(recentSmoke[x]).destroy();
			}
		}
	}

    void deleteAllSmoke() 
	{
        for(int x=smokeCount.size()-1;x>=0;x--) 
		{
            if(smokeCount[x]) 
			{
                smokeCount[x].destroy();
            }
        }
        smokeCount.clear();
    }

    override void WorldUnloaded(WorldEvent e) {
        deleteAllSmoke();
    }

    // Force old smoke effects to die
    void cleanupSmoke() {
        int toRemove = smokeCount.size() - smokeLimits[currentSmokeSetting];
        int toDelete = 0;
		for(int x = 0; x < smokeCount.size() && toRemove > 0; x++) 
		{
			if(smokeCount[x]) 
			{
				SelacoSmoke(smokeCount[x]).rapidlyDie = true;
				toRemove--;
			}
			toDelete++;

			if (toRemove == 0) 
			{
				break;
			}
		}
        smokeCount.delete(0, toDelete);
    }

    static clearscope SmokeHandler Instance() {
        return SmokeHandler(EventHandler.Find("SmokeHandler"));
    }
}
enum SmokeEmitterFlags {
    SMK_cullDistance      = 0x1,
	SMK_SLOWFADE				  = 0x2
}

mixin class SmokeEmitter
{

    private int smokeFlags;

	void spawnSmoke(string smokeSprite = "SMK7", float smokeSize = 0.3, vector3 offsets = (0,0,0), vector3 velocity = (0,0,0), float smokeAlpha = 0.6, float expansionSpeed = 0.5, float fadingSpeed = 0.1, float rollingSpeed = 0.05, int flags = 0)
	{
		actor smokeActor;
		bool succ;
		[succ, smokeActor] = A_SPAWNITEMEX("SelacoSmoke", offsets.x, offsets.y, offsets.z, velocity.x, velocity.y, velocity.z);
		{
			SelacoSmoke smoke = SelacoSmoke(smokeActor);
			smoke.spriteName = smokeSprite;
			smoke.ExpansionSpeed = expansionSpeed*0.01;
			smoke.fadingSpeed = fadingSpeed*0.01;
			smoke.rollingSpeed = rollingSpeed;
			smoke.scale.x = smokeSize;
			smoke.scale.y = smokeSize;
			smoke.cullDistance = SMK_cullDistance;
			if(flags & SMK_SLOWFADE)
			{
				smoke.fadeTickRate = 2;
			}
		}
	}
}

class SelacoSmoke : actor {
	int activeSmoke;
	SmokeHandler sh;
	property ExpansionSpeed	:	expansionSpeed;
	property FadingSpeed	:	FadingSpeed;
	property RollingSpeed	:	rollingSpeed;
	property FadeTickRate	: 	fadeTickRate;
	property SmokeLimiter	: 	smokeLimiter;
	property ClearView		:	clearView; // Kill smoke effect if the player gets close.
	property SpriteName		: 	spriteName;
	property SpriteFrames	: 	spriteFrames; // How many frames does the sprite have?
	property invisibleStart : invisibleStart;	 //Fades in with alpha 0, doesn't begin fading out until it's alpha target is reached.
	property invisibleStartAlphaTarget : invisibleStartAlphaTarget;
	property cullDistance : cullDistance;

	mixin smokeCvarCheck;
	int cullDistance;
	int smokeLifetime;
	int smokeMax;
	int smokeID;
	int lifespan;
	int aliveTime;
	int smokeQuality;
	int fadeTickRate;
	int spriteFrames;
	int denseSmoke;
	int maxAllowedSmoke;
	float invisibleStartAlphaTarget;
	float expansionSpeed;
	float fadingSpeed;
	float rollingSpeed;

	string spriteName;

	bool clearView;
	bool rapidlyDie;
	bool smokeLimiter;
	bool invisibleStart;

	int randSeed;

	void handleSmoke()
	{
		SmokeHandler sh = SmokeHandler.instance();
        SelacoSmoke newSmoke = SelacoSmoke(self);

        sh.smokeCount.push(newSmoke); // Keep track of all smoke actors
        sh.recentSmoke.push(newSmoke); // Keep track of recent smoke actors

        newSmoke.smokeQuality = sh.currentSmokeSetting + 1;
		newSmoke.denseSmoke = sh.denseSmokeSetting;
        // Check if we exceed the current limit
        if (sh.smokeCount.size() >= sh.smokeLimits[sh.currentSmokeSetting]) {
            sh.cleanupSmoke();
        }

        // Check if any recent smoke puffs are close to this smoke puff to prevent unneccessary smoke rendering.
        if (sh.smokeCount.size() < sh.smokeLimits[sh.currentSmokeSetting]) {
            sh.findNearbySmoke(SelacoSmoke(newSmoke));
        }

        // Reset gametick counter for clearing recentSmoke
        sh.recentSmokeTick = 0;
	}

	override void OnDestroy() 
	{
		if(sh)
		{
			sh.destroySmoke(self);
		}
		Super.OnDestroy();
	}

	override void BeginPlay()
	{
		sh = SmokeHandler.instance();
		super.BeginPlay();
	}

	override void PostBeginPlay() {
		super.PostBeginPlay(); 

		// Handle smoke spawning, culling and more.
		handleSmoke();

		randSeed = random(17,25);

		// At some point in development I realized I was using Silvia's source file of the Smoke PNG's. Which is a whopping 256x256.
		// I cut it in half, but rather than painstakingly correct all the scales to make them equally as big as before, I'm just doubling it here.
		A_SetScale(scale.x*2);

		if(waterlevel >= 1)
		{
			fadingSpeed+=0.13;
		}
		if(!invisibleStart)
		{
			alpha+=0.10;
		}

		smokeID = random(0,spriteFrames);
		A_SETROLL(random(0,360));
		frame = smokeID;
	}

	override void tick() 
	{

		if(isFrozen()) return;
		
		if(players[consolePlayer].mo && clearView && level.time % randSeed == 0 && Distance2DSquared(players[consolePlayer].mo) < (60 * 60)) {
			clearView = false;
			rapidlyDie = true;
		} 

		if(rapidlyDie)
		{
			alpha-=0.05;
		}

		// Behave like smoke
		roll+=rollingSpeed;
		scale.x+=expansionSpeed;
		scale.y+=expansionSpeed;

		if(aliveTime < 1 && !invisibleStart)
		{
			aliveTime++;
		}

		if(aliveTime == 1)
		{
			aliveTime++;
			switch(smokeQuality) 
			{
				// Speed up the fading process when Smoke Quality is set to Low, we dont want these to last too long.
				case 1: // Low
					fadingSpeed +=0.013;
					break;
				case 2: // Medium
					fadingSpeed +=0.004;
					break;
				case 3: // High
					fadingSpeed +=0.001;
					break;		
				case 4: // Ultra
					fadingSpeed +=0.00065;
					break;			
				// Smoke Quality on Ridiculous? Who cares about performance. Have smoke last longer!
				case 5:
					alpha+=0.15;
					if(fadingSpeed > 0.00046) 
					{
						fadingSpeed -=0.00015;
					}
					break;
			}

			// Add some more in case denseSmoke is on.
			if(!invisibleStart)
			{
				switch(denseSmoke)
				{
					case 0:
						alpha*=0.75;
						break;
					case 2:
						vel*=0.75;
						fadingSpeed*=0.75;
						alpha*=1.25;
						break;
				}
			}
		}

		// If Fading Speed hits 0, it wont fade out. Can't have that.
		if(fadingSpeed <= 0)
		{
			fadingSpeed = 0.0005;
		}

		// Reduce Alpha depending on smoke tick rate and Smoke Fading Speed
		if(!invisibleStart && level.time % fadeTickRate == 0) {
			alpha = alpha-fadingSpeed; 
		}

		if(!invisibleStart && alpha <= 0) {
			destroy();
		}


		handleInvisibleStart();
		super.tick();

	}

	bool handleInvisibleStart()
	{
		if(invisibleStart)
		{
			if(alpha<=invisibleStartAlphaTarget)
			{
				a_fadein(fadingSpeed*1.5);
			}
			if(alpha > invisibleStartAlphaTarget)
			{
				invisibleStart = false;
				alpha = invisibleStartAlphaTarget;
				return true;
			}
			return false;
		}
		return true;
	}

	Default {
		//flags
		+INVISIBLEINMIRRORS
		+FORCEXYBILLBOARD
		+ROLLSPRITE;
		+NOINTERACTION;
		+NOBLOCKMAP;

		// General Properties
		Speed 0.6;
		Alpha 0.35;
		scale 0.15;
		DistanceCheck "r_thingLOD";
		RenderStyle "Translucent";

		// Smoke Properties
		SelacoSmoke.cullDistance 9;
		SelacoSmoke.expansionSpeed 0.005;
		SelacoSmoke.FadingSpeed 0.004;
		SelacoSmoke.rollingSpeed 0.25;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.SpriteName "SMK7";
		SelacoSmoke.Clearview true;
		SelacoSmoke.SpriteFrames 4;
	}	

	States {
		Indexer:
			SMK7 A 0;
			DIRP A 0;

		Spawn:
			TNT1 A 0;
			TNT1 A -1 {
				frame = smokeID;
				sprite = GetSpriteIndex(SpriteName);
			}
	}
}


mixin class smokeCvarCheck {
	void giveSmokeLifespan() {
		//let spawnSetting = GetCVar("r_smokequality");
		//if(spwnSaetting < 0 || spawnSetting > 4) { spawnSetting = 3; }
		//smokeLifetime = spawnChanceSettings[spawnSetting - 1];
	}

	void giveSmokeCount() {
		//let spawnMaxSetting = GetCVar("r_smokequality");
		//if(spawnMaxSetting < 0 || spawnMaxSetting > 4) { spawnMaxSetting = 3; }
		//smokeMax = spawnMaxSettings[spawnMaxSetting - 1];
	}

}


Class ExplosionSmoke : Actor
{
  Default {
    +NOBLOCKMAP;
    +NOTELEPORT;
    +DONTSPLASH;
	DistanceCheck "r_thingLOD";
	+MISSILE;
	+FORCEXYBILLBOARD;
    +CLIENTSIDEONLY;
	+ROLLSPRITE;
    +NOINTERACTION;
	+NOGRAVITY;
	+DOOMBOUNCE;
	+THRUACTORS;
	Health 99999;
	Radius 5;
	Height 5;
	Alpha 0.3;
	RenderStyle "Translucent";
	Scale 1.2;
	Speed 1;
	Mass 0;
}
    States
    {
    Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(waterlevel > 1, "Stap");
		smk9 A 2 A_FadeIn(0.04);
		smk9 AAAAAAAAAA 2;
		smk9 AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMM 4 A_FadeOut(0.025, FTF_REMOVE);
		Goto Death;
	Death:
		TNT1 A 0;
		Stop;
	Stap:		
		TNT1 A 0;
		Stop;
    }
}

class EXTINGUISHERSMOKESMALL : EXTINGUISHERSMOKE
{
	default
	{
		scale 0.1;
	}
}

class EXTINGUISHERSMOKE: ExplosionSmoke
{
	default {
		+ROLLSPRITE;
		Speed 0.8;
		Alpha 0.18;
		scale 0.9;
	}
	States
    {
    Spawn:
		TNT1 A 0;
		TNT1 A 0 {
			A_SETROLL(random(0,360));
		}
		TNT1 A 0 A_JumpIf(waterlevel > 1, "Stap");
		smk9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			A_FadeIn(0.01);
			A_SETSCALE(scale.x + 0.014);
		}
		smk9 AAAAAAAAAAAAAAAAAAAA 1 {
			A_SETSCALE(scale.x + 0.014);
		}
		smk9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 { 
			A_FadeOut(0.003, FTF_REMOVE);
			A_SETSCALE(scale.x + 0.005);
		}
	Goto Death;
	Death:
	    TNT1 A 0;
    Stop;
	Stap:		
		TNT1 A 0;
		Stop;
    }
}

class VentilationSmoke : SelacoActor {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		A_SETROLL(random(0,360));
	}
	default {
		SelacoActor.SleepDistance 1024;
		+ROLLSPRITE
		+NOGRAVITY
		+NOINTERACTION
		scale 0.6;
		alpha 0;
	}
	states {
		spawn:
			SMK9 AAA 1 {
				A_FADEIN(0.053);
				A_SETSCALE(scale.x + +0.04);
			}
			SMK9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				A_FADEOUT(0.005);
				A_SETSCALE(scale.x + +0.05);
			}
			stop;
	}
}

class VentilationSmokeLessTransparant : VentilationSmoke {
	default {
		alpha 0;
	}
}

class SmokeTrailPiece : SelacoSmoke
{
	default
	{
		Speed 0.3;
		Alpha 0.5;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.0009;
		SelacoSmoke.FadingSpeed 0.009;
		SelacoSmoke.rollingSpeed 0.35;
	}
}

// Spawned from Wallshrapel. Spawn in high quantities.
Class SmokeTrailPieceSmall : SmokeTrailPiece
{
	default {
		SelacoSmoke.ClearView false;
		SelacoSmoke.cullDistance 8;
		scale 0.07;
		alpha 0.98;

	}
}
// Spawned from Wallshrapel. Spawn in high quantities.
Class SmokeTrailPieceGlasswindow: SmokeTrailPiece
{
	default {
		SelacoSmoke.FadingSpeed 0.025;
		SelacoSmoke.ExpansionSpeed 0.0014;
		SelacoSmoke.ClearView false;
		scale 0.03;
		alpha 0.68;

	}
}

Class SmokeTrailPieceSmallShort : SmokeTrailPieceSmall
{
	default {
		SelacoSmoke.ClearView false;
		scale 0.04;
		alpha 0.8;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.0021;
		SelacoSmoke.FadingSpeed 0.024;
		SelacoSmoke.rollingSpeed 0.35;
	}
}

class PerfumeSmokeBlue : SmokeTrailPieceSmall
{
	default
	{
		scale 0.02;
		SelacoSmoke.expansionSpeed 0.0006;
		SelacoSmoke.rollingSpeed 0.11;
		SelacoSmoke.SpriteName "ICSM";
	}
}

// Burning scorchmarks
Class ScorchMarkSmoke : SmokeTrailPieceSmall
{
	default {
		SelacoSmoke.ClearView false;
		scale 0.13;
		alpha 0.8;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.002;
		SelacoSmoke.FadingSpeed 0.003;
		SelacoSmoke.rollingSpeed 0.35;
	}
}

// Same as above, but for wood. Spawn in high quantities.
Class SmokeTrailPieceSmallWood : SmokeTrailPieceSmall
{
	default {
		scale 0.11;
		alpha 0.95;
		SelacoSmoke.expansionSpeed 0.0012;
		SelacoSmoke.FadingSpeed 0.009;
		// Smoke Properties
		SelacoSmoke.SpriteName "DIRP";
		SelacoSmoke.spriteFrames 4;
	}
}

// FloorSmookeShooter smoke 
class SmokeTrailPieceFloor  : SelacoSmoke
{
	default {
		scale 0.40;
		alpha 0.95;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.001;
		SelacoSmoke.FadingSpeed 0.009;
		SelacoSmoke.rollingSpeed 0.15;
	}
}

class SmokeTrailPieceFloorExplosion  : SelacoSmoke
{
	default {
		scale 0.13;
		alpha 0.8;

		// Smoke Properties
		+FORCEXYBILLBOARD
		SelacoSmoke.expansionSpeed 0.002;
		SelacoSmoke.FadingSpeed 0.0037;
		SelacoSmoke.rollingSpeed 0.25;
		SelacoSmoke.smokeLimiter true;
		selacosmoke.Clearview false;
	}
}


// Used by WallShrapnel
class SmokeTrailPieceLong: SmokeTrailPieceSmall
{
	default {
		+ROLLSPRITE;
		SelacoSmoke.ClearView false;	
		SelacoSmoke.FadingSpeed 0.0055;
		Speed 0.6;
		Alpha 0.8;
		scale 0.07;
	}
}

class SupplyChestSmoke : SmokeTrailPieceLong
{
	default
	{
		SelacoSmoke.FadingSpeed 0.016;
		SelacoSmoke.ExpansionSpeed 0.009;
	}
}

// Spawned by shooting concrete
class SmokeScatteredCloud: SelacoSmoke
{
	default {
		Alpha 0.95;
		Scale 0.29;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.004;
		SelacoSmoke.FadingSpeed 0.0045;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
	}
}

class SmokeScatteredCloudSmaller: SelacoSmoke
{
	default {
		Alpha 1;
		Scale 0.12;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.003;
		SelacoSmoke.FadingSpeed 0.0045;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
	}
}


// Spawned by shooting concrete
class PlasmaScatteredSmoke: SelacoSmoke
{
	default {
		Alpha 0.55;
		Scale 0.12;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.002;
		SelacoSmoke.FadingSpeed 0.005;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
		SelacoSmoke.cullDistance  3;
		SelacoSmoke.SpriteName "SMK6";
	}
	states
	{
		Index:
			ICSM A 0;
	}
}

class SmokeScatteredCloudSmall: SelacoSmoke
{
	default {
		Alpha 0.75;
		Scale 0.19;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.002;
		SelacoSmoke.FadingSpeed 0.005;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 2;
		SelacoSmoke.smokeLimiter true;
	}
}

class SmokeScatteredCloudFast: SmokeScatteredCloud
{
	default {
		Alpha 0.95;
		Scale 0.16;
		SelacoSmoke.expansionSpeed 0.001;
		SelacoSmoke.FadingSpeed 0.014;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
	}
}

// Check out special agent Big Smoke! (Really big smoke cloud)
class SpawnImpactSmokeBig: SelacoSmoke
{
	default {
		speed 3;
		Alpha 0.95;
		Scale 0.43;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.003;
		SelacoSmoke.FadingSpeed 0.006;
		SelacoSmoke.rollingSpeed 0.04;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
	}
}

class MechLandingSmoke : SelacoSmoke
{
	default
	{
		SelacoSmoke.cullDistance  3;
		speed 3;
		Alpha 0.95;
		Scale 0.43;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.015;
		SelacoSmoke.FadingSpeed 0.035;
		SelacoSmoke.rollingSpeed 0.04;
		SelacoSmoke.fadeTickRate 1;
	}
}

Class SpawnImpactSmoke: SelacoSmoke
{
	default
	{
		speed 3;
		Alpha 0.65;
		Scale 0.33;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.004;
		SelacoSmoke.FadingSpeed 0.002;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
	}
}


Class SpawnImpactSmokeSmall: SpawnImpactSmoke
{
	default
	{
		scale 0.35;
	}
}



class SpawnImpactSmokeBigCluster : SpawnImpactSmokeBig
{
	default
	{
		+FORCEXYBILLBOARD
		alpha 0.9;
	}
}

class CarSmoke : SpawnImpactSmokeBig
{
	default {
		speed 20;
		Alpha 0.65;
		Scale 0.22;

		DistanceCheck "r_carSmokeLOD";

		SelacoSmoke.expansionSpeed 0.003;
		SelacoSmoke.FadingSpeed 0.011;
	}	
}

// Smoke that spawns when shooting the floor
class SmokeTrailPieceSmallTight : SelacoSmoke
{
	default {
		scale 0.04;
		alpha 1.0;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.001;
		SelacoSmoke.FadingSpeed 0.026;
		SelacoSmoke.rollingSpeed 0.35;
		SelacoSmoke.smokeLimiter false;
		SelacoSmoke.cullDistance  3;
	}
}



Class SpawnImpactSmokeSmallerSuperShortThick: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.95;
		Scale 0.1;
		// Smoke Properties
		SelacoSmoke.cullDistance  3;
		SelacoSmoke.expansionSpeed 0.009;
		SelacoSmoke.FadingSpeed 0.021;
		SelacoSmoke.rollingSpeed 0.5;
		SelacoSmoke.fadeTickRate 1;
	}  
}

Class SniperTrailSmoke: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.95;
		Scale 0.008;
		// Smoke Properties
		SelacoSmoke.cullDistance  3;
		SelacoSmoke.expansionSpeed 0.001;
		SelacoSmoke.FadingSpeed 0.021;
		SelacoSmoke.rollingSpeed 0.5;
		SelacoSmoke.fadeTickRate 1;

		selfLighting "565656";
	}  
}

Class MammothProjectileSmoke: SniperTrailSmoke
{
	default {
		Speed 0.1;
		Alpha 0.95;
		Scale 0.055;
		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.003;
		SelacoSmoke.FadingSpeed 0.021;
		SelacoSmoke.rollingSpeed 0.5;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.cullDistance  3;
	}  
}
class MudDust : SelacoSmoke
{
	default {
		scale 1.0;
		alpha 0.9;
		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.004;
		SelacoSmoke.FadingSpeed 0.005;
		SelacoSmoke.rollingSpeed 0.35;
		SelacoSmoke.spriteName "DIRP";
		SelacoSmoke.smokeLimiter true;
	}
}

class MudDustSmall : MudDust
{
	default {
		scale 0.1;
		alpha 0.9;
		SelacoSmoke.FadingSpeed 0.007;
		SelacoSmoke.expansionSpeed 0.005;
		SelacoSmoke.rollingSpeed 0.85;
		SelacoSmoke.smokeLimiter true;
	}
}


Class SpawnImpactSmokeSmallSuperShort: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.75;
		Scale 0.2;
		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.009;
		SelacoSmoke.FadingSpeed 0.025;
		SelacoSmoke.rollingSpeed 0.5;
		SelacoSmoke.fadeTickRate 1;
	}  
}

class WoodTrailPieceLong: SmokeTrailPieceSmall
{
	states {
		Spawn:	
			TNT1 A 0;
			TNT1 A 0 {
				invoker.spriteName = "DIRP";
				invoker.smokeID = random(0,3);
				setStateLabel("SetVariables");
			}
			stop;
	}
}

class BulletImpactSmoke : actor {
	default {
		Alpha 0.8;
		Scale 0.3;
		Renderstyle "translucent";
		+ROLLSPRITE;
		+NOINTERACTION;
	}
	states {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SetRoll(random(0,360));
			SMK3 ABCDEFGHIJKLM 1 A_FADEOUT(0.07);
			stop;
	}
}

class PropImpactEffect : BulletImpactSmoke {
	int frameID;
	default {
		Alpha 0.7;
		Scale 0.2;
	}
	states {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 
			{
				A_SetRoll(random(0,360));
				frameID = random(0,3);
			}
			SMK7 AAAAAAAAAAAAAAAAAAAAAAAAAA 1 
			{
				frame = frameID;
				scale*=1.02;
				A_FADEOUT(0.04);
			}
			stop;
	}
}


class TShapedBulletImpactSmoke : actor {
	default {
		+NOINTERACTION
	}
	States{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("BulletImpactSmoke", 0, 0, 0, frandom(2, 3), frandom(2.5, 3));
			TNT1 A 0 A_SpawnItemEx("BulletImpactSmoke", 0, 0, 0, frandom(2, 3), frandom(-2.5, -3));
			TNT1 A 0 A_SpawnItemEx("BulletImpactSmoke", 0, 0, 0, frandom(2.5, 3), 0, frandom(2.5, 3));
			stop;
	}
}

class BabySmokeEffect : BulletImpactSmoke {
	default {
		Alpha 0.5;
		Scale 0.22;
		//Renderstyle "Add";
		+ROLLSPRITE;
		+NOINTERACTION;
	}
}

class PlantImpactSmoke : BulletImpactSmoke {
	default {
		Alpha 0.15;
	}
	states {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SetRoll(random(0,360));
			SMK4 ABCDEFGHIJKLM 1 A_FADEOUT(0.007);
			stop;
	}
}

class BulletImpactSmokeEnemy : actor {
	override void tick() {
		super.tick();
		scale*=1.02;
	}
	default {
		Alpha 0.5;
		Scale 0.3;
		//Renderstyle "Add";
		+ROLLSPRITE;
		+NOINTERACTION;
		+NOBLOCKMAP
		+THRUACTORS;
	}
	states {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SetRoll(random(0,360));
			SMK3 AABBCCDDEEFFGGHHIIKKLLMM 1 A_FADEOUT(0.025);
			stop;
	}
}

class PurpleArmorImpactSmoke : BulletImpactSmokeEnemy {
	default {
		alpha 0.3;
	}
	states {
		Spawn:
			TNT1 A 0;
			BLOP ABCDEFGHIJKLM 1 A_FADEOUT(0.06);
	}
}

class SlideSmokeTrail : BulletImpactSmokeEnemy {
	default {
		Alpha 0.6;
		Scale 0.4;
	}
	states {
		Spawn:
			TNT1 A 3;
			TNT1 A 0 A_SetRoll(random(0,360));
			SMK3 AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMMMMMMMMMMMMMMMMMMM 1 
			{
				A_SETSCALE(scale.x+0.008);
				A_FADEOUT(0.007, FTF_REMOVE);		
			}
			stop;
	}
}

class NailgunTrailSmoke : actor {
	default {
		Alpha 0.8;
		Scale 0.3;
		//Renderstyle "Add";
		+ROLLSPRITE;
		+NOINTERACTION;
	}
	states {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SetRoll(random(0,360));
			SMK3 ABCDEFGHIJKLM 2 A_FADEOUT(0.01);
			stop;
	}
}


Class SmokeTrailDense: ExplosionSmoke
{
  Default {
	Speed 0.3;
	Alpha 0.55;
	scale 0.6;
  }
}

// Here for old reasons. Dont use this anymore.
class LegacySmoke : ExplosionSmoke {
	int smokeMax;
	int smokeLifetime;
	int smokeCurrentLifetime;
	int smokeFrame;
	int smokeThickness;
	int smokeSpeed;
}

Class SpawnImpactSmokeTinySuperShortThin: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.45;
		Scale 0.1;
		SelacoSmoke.FadingSpeed 0.03;
	}  
}

Class BurningCivilianSmoke : SelacoSmoke {
	default {
		alpha 0.57;
		scale 0.13;
		selacoSmoke.expansionSpeed 0.01;
		SelacoSmoke.FadingSpeed 0.045;
		SelacoSmoke.SmokeLimiter false;
	}
}

class airDroneSmoke : SelacoSmoke
{
	default
	{
		Alpha 0.3;
		Scale 0.3;
		selacoSmoke.expansionSpeed 0.03;
		SelacoSmoke.FadingSpeed 0.03;	
	}
}

class BodyImpactSmoke : SelacoSmoke {
	default {
		Alpha 0.6;
		Scale 0.4;
		SelacoSmoke.FadingSpeed 0.02;
	}
}
class BodyImpactSmokeSmall : BodyImpactSmoke {
	default {
		selacoSmoke.expansionSpeed 0.005;
		Alpha 0.6;
		Scale 0.23;
		SelacoSmoke.FadingSpeed 0.025;
		SelacoSmoke.cullDistance  3;
	}
}

class BodyImpactSmokeSmallDense : BodyImpactSmoke {
	default {
		Alpha 1.0;
		Scale 0.13;
		SelacoSmoke.FadingSpeed 0.06;
	}
}

// Yee-hee-hee-hee, it's tiny.
class BodyImpactSmokeTiny : BodyImpactSmokeSmall {
	default {
		Alpha 0.6;
		Scale 0.05;
		SelacoSmoke.FadingSpeed 0.02;
	}
}
class BodyImpactSmokeUltraTiny : BodyImpactSmokeTiny {
	default {
		Alpha 0.6;
		Scale 0.05;
		selacoSmoke.expansionSpeed 0.002;
		SelacoSmoke.FadingSpeed 0.02;
	}
}
class BodyImpactSmokeUltraTinyFast : BodyImpactSmokeTiny {
	default {
		Alpha 0.6;
		Scale 0.02;
		SelacoSmoke.SmokeLimiter false;
		selacoSmoke.expansionSpeed 0.003;
		SelacoSmoke.FadingSpeed 0.05;
	}
}
class BodyImpactSmokeHighAlpha : BodyImpactSmoke
{
	default
	{
		scale 0.3;
		SelacoSmoke.FadingSpeed 0.01;
		Alpha 0.3;
	}
}
class BodyImpactSmokeHigherAlpha : BodyImpactSmoke
{
	default
	{
		scale 0.1;
		SelacoSmoke.FadingSpeed 0.01;
		Alpha 0.1;
	}
}

Class FlareSmoke: SelacoSmoke
{
	default {
		alpha 0.77;
		scale 0.05;
		SelacoSmoke.FadingSpeed 0.04;
		SelacoSmoke.cullDistance  3;
	}
}

Class FireDamageSmoke: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.55;
		Scale 0.1;
		SelacoSmoke.expansionSpeed 0.009;
		SelacoSmoke.FadingSpeed 0.019;
	}  
}


Class SpawnImpactSmokeSmallLong: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.32;
		Scale 0.7;
		SelacoSmoke.expansionSpeed 0.005;
		SelacoSmoke.FadingSpeed 0.003;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter true;
	}  
}

Class SpawnCeilingPathfinderSmoke : SelacoSmoke {
	default {
		+FLATSPRITE
		Speed 0.1;
		Alpha 0.82;
		Scale 0.42;
		SelacoSmoke.expansionSpeed 0.002;
		SelacoSmoke.FadingSpeed 0.002;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter true;
	}	
}


Class SpawnExteriorSmoke : actor {
	int smokeFrame;
	override void PostBeginPlay() {
		super.PostBeginPlay();
		smokeFrame = random(0,3);
	}
	default {
		+FLATSPRITE
		+MISSILE
		+NOINTERACTION;
		speed 12;
		Speed 0.1;
		Alpha 0.01;
		Scale 1.42;
	}	
	states {
		Spawn:
			TNT1 A 0;
			TNT1 A 25 {
				A_SetrenderStyle(0, STYLE_NONE);
				frame = smokeFrame;
				sprite = GetSpriteIndex("SMK7");
			}
		FadingIn:
			TNT1 A 0 {
				A_SetrenderStyle(0, STYLE_NORMAL);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				frame = smokeFrame;
				A_FADEIN(0.007);
			}
		Looper:
			TNT1 A 225 {
				frame = smokeFrame;
			}
		FadingOut:
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				A_FADEOUT(0.007, FTF_REMOVE);
				frame = smokeFrame;
			}
			stop;
	}
}

Class BodyShotCloud: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.92;
		Scale 0.09;
		SelacoSmoke.expansionSpeed 0.005;
		SelacoSmoke.FadingSpeed 0.012;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter true;
	}  
}

// Spawns around grenade explosions
Class ScatterSmoke: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.92;
		Scale 0.09;
		SelacoSmoke.expansionSpeed 0.005;
		SelacoSmoke.FadingSpeed 0.004;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter true;
	}  
}

Class SmallExplosionSmokePuff: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 1.0;
		Scale 0.19;
		SelacoSmoke.expansionSpeed 0.002;
		SelacoSmoke.FadingSpeed 0.019;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter true;
		SelacoSmoke.cullDistance  3;
	}  
}


// Extension Trail Smoke - Spawns from grenades
Class ExtenionTrailSmoke: SelacoSmoke
{
	default {
		Speed 0.1;
		Alpha 0.42;
		Scale 0.10;
		SelacoSmoke.expansionSpeed 0.003;
		SelacoSmoke.FadingSpeed 0.004;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter true;
	}  
}

// Spawned from shooting Wood
Class BrownCloud: SelacoSmoke {
	default {
		speed 1;
		alpha 0.7;
		scale 0.2;
		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.003;
		SelacoSmoke.FadingSpeed 0.007;
		SelacoSmoke.rollingSpeed 0.04;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
		SelacoSmoke.SpriteName 'DIRP';
		SelacoSmoke.spriteFrames 4;
	}
}

Class BrownCloudLong: BrownCloud {
	default {
		speed 1;
		scale 0.3;
		alpha 0.5;
		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.007;
		SelacoSmoke.FadingSpeed 0.003;
	}
}

Class BrownCloudLonger: BrownCloud {
	default {
		speed 1;
		scale 0.5;
		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.003;
		SelacoSmoke.FadeTickRate 1;
		SelacoSmoke.FadingSpeed 0.0018;
	}
}

Class BrownCloudFootstep: BrownCloud {
	default {
		alpha 0.8;
		scale 0.15;

		// Smoke Properties
		SelacoSmoke.FadingSpeed 0.01;
		SelacoSmoke.ExpansionSpeed 0.008;
		SelacoSmoke.Clearview false;
	}
}

class SpawnFootstepDirtCloud : actor {
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("BrownCloudFootstep", -30, 0, 5);
			stop;
	}
}


class BrownCloudSmall: BrownCloud
{
	default {
		Scale 0.08;
		Alpha 0.9;
		Speed 0.5;
		Gravity 0.8;
	}
}
class BrownCloudSmallShort: BrownCloud
{
	default {
		Scale 0.12;
		Alpha 0.95;
		Speed 0.5;
		Gravity 0.8;

		// Smoke Properties
		SelacoSmoke.FadingSpeed 0.02;
	}
}


class PaperDustEffect : actor {
	int timer;
	int frameID;
	override void tick() {
		super.tick();
		if(alpha > 0) {
				A_SETROLL(roll + 0.1, SPF_INTERPOLATE);
				A_FADEOUT(0.009, FTF_REMOVE);
				A_SETSCALE(scale.x + 0.008);
		}
		if(vel.z > 0)
		{
			A_CHANGEVELOCITY(0,0,-0.0004);
		}
	}

	override void PostBeginPlay()
	{
		frameID = random(0,1);
	}

	default {
		gravity 0.02;
		+NOGRAVITY
		+NOINTERACTION;
		+INTERPOLATEANGLES
		+ROLLSPRITE
		scale 0.25;
		alpha 0.0;
	}
	states {
		Spawn: 
			TNT1 A 0;
			TNT1 A 0 {
				A_SETSCALE(scale.x + frandom(-0.1, 0.1));
				A_SETROLL(random(0,360));
				A_CHANGEVELOCITY(0,0, frandom(0.09, 0.25));
			}
			PADU AAAAAAAAAAAA 1
			{
				A_FADEIN(0.09);
				frame = frameID;
			}
		Looper:
			PADU A 1 
			{
				frame = frameID;
			}
			loop;
		Death:
			TNT1 A 0;
			stop;
	}
}

class PaperDustEffectShort : PaperDustEffect {
	override void tick() {
		if(isFrozen()) { return; }
		super.tick();
		if(alpha > 0) {
				A_SETROLL(roll + 0.3);
				A_FADEOUT(0.008, FTF_REMOVE);
				A_SETSCALE(scale.x*1.01);
				A_CHANGEVELOCITY(0,0,-0.002);
		}
	}	
	states {
		Spawn: 
			TNT1 A 0;
			TNT1 A 0 {
				A_SETROLL(random(0,360));
				A_CHANGEVELOCITY(0,0, frandom(0, 0.3));
			}
			PADU AAAAAAAAAAAAAAAAAAAAA 1 A_FADEIN(0.05);
		Looper:
			PADU A 1;
			loop;
		Death:
			TNT1 A 0;
			stop;
	}
}

class PaperDustEffectShorter : PaperDustEffect {
	override void tick() {
		if(isFrozen()) { return; }
		super.tick();
		if(alpha > 0) {
				A_SETROLL(roll + 0.3);
				A_FADEOUT(0.01, FTF_REMOVE);
				A_SETSCALE(scale.x + 0.004);
				A_CHANGEVELOCITY(0,0,-0.002);
		}
	}	
	states {
		Spawn: 
			TNT1 A 0;
			TNT1 A 0 {
				A_SETROLL(random(0,360));
				A_CHANGEVELOCITY(0,0, frandom(0, 0.3));
			}
			PADU AAAAAAAAAAAA 1 A_FADEIN(0.05);
		Looper:
			PADU A 1;
			loop;
		Death:
			TNT1 A 0;
			stop;
	}
}

// Save compatbility
class FloorSmokeShootier : actor {

}
class FloorSmokeShootierExplosion : actor {

}


class FloorSmokeLauncher : Actor
{
	override void postbeginPlay()
	{
		super.postBeginPlay();
		SmokeHandler sh = SmokeHandler.instance();
		if(waterlevel > 0 || sh.currentSmokeSetting <= 1)
		{
			destroy();
		}
	}

    default {
		+NOBLOCKMAP
        +THRUGHOST;
		+THRUACTORS
        -NOGRAVITY;
        Gravity 1.8;
        Alpha 1.0;
        Radius 5;
        Height 5;
        Speed 23;
    }
	States  {
        Spawn:
            TNT1 A 0;
            TNT1 AAAAAAAAAAAAA 1 A_SpawnItem ("SmokeTrailPieceFloor");
            stop;
        Death:
            Stop;
	}
}

class FloorSmokeLauncherExplosion : FloorSmokeLauncher
{

	int trailLength;
	override void postbeginPlay()
	{
		super.postbeginPlay();
		A_ScaleVelocity(frandom(1.0,1.2));
		trailLength = random(8,14);
	}

	States {
        Spawn:
            TNT1 A 1 
			{
				trailLength--;
				if(trailLength <= 0)
				{
					destroy();
				}
				A_SpawnItem ("SmokeTrailPieceFloorExplosion");
			}
            loop;
        
        Death:
            TNT1 A 0;
            Stop;
	}
}


class FloorSmokeUpward : FloorSmokeLauncherExplosion{
	override void postbeginPlay()
	{
		super.postbeginPlay();
		trailLength = random(5,7);
		
	}

	States {
        Spawn:
		
			TNT1 A 1;
            TNT1 A 0
			{
				trailLength--;
				if(trailLength <= 0)
				{
					destroy();
				}
				A_SpawnItemex("SmokeTrailPieceSmallTight");
			}
            loop;
	}
}

class FloorSmokeUpwardLong : FloorSmokeUpward {
	States {
		spawn:
			TNT1 A 0;
			TNT1 AAAAAAAA 1 A_SpawnItemex("SmokeTrailPieceSmallTight");
			stop;
	}
}


class FloorSmokeLauncherAngled : FloorSmokeLauncher
{
	States {
        Spawn:
            TNT1 A 0;
            TNT1 AAAAAAAAAAAAA 1 A_SpawnItem ("SmokeTrailPieceLong");
            stop;
        
        Death:
            Stop;
	}
}

class ExtinquisherExplosion: Actor
{
	default {
		+FORCERADIUSDMG
		DamageType "ExplosiveImpact";
	}
	States    {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_QuakeEx(7, 7, 4, 60, 0, 700, 0, 0, 0, 0, 0, 0, 1, 1, 5);
			EXTI A 0 A_Explode(450,180);
			Stop;
	}
}

class ExtinguisherExplosionOvercharged : ExtinquisherExplosion
{
	States    
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_QuakeEx(7, 7, 4, 60, 0, 700, 0, 0, 0, 0, 0, 0, 1, 1, 5);
			EXTI A 0 A_Explode(450,260);
			Stop;
	}
}



class frozenSmoke : SelacoActor {
    int frameID;
    override void postbeginPlay() {
        super.postbeginPlay();
        frameID = random(0,3);
    }
    default {
        +NOINTERACTION;
        SelacoActor.sleepdistance 0;
        scale 0.6;
        alpha 0;
    }
    states {
        spawn:
            TNT1 A 0;
            ICSM AAAAAAAAAAAAAAAA 1 {
                frame = frameID;
                A_FADEIN(0.02);
            }
            ICSM AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
                frame = frameID;
                A_FADEOUT(0.002, FTF_REMOVE);
            }
            stop;
    }
}

// For now, primarily used for scripted events to make explosions more dramatic around the player
class SpawnSmokeCluster : SelacoActor
{
	default
	{
		+SelacoActor.preventSleep
		+NOINTERACTION;
	}
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0
			{
				for(int x=0;x<90;x++)
				{
					A_SPAWNITEMEX("SpawnImpactSmokeBigCluster", frandom(-200,600), frandom(-600,600), frandom(40, 200));
				}
			}
			stop;
	}
}
class SpawnSmokeClusterHigh : SelacoActor
{
	default
	{
		+SelacoActor.preventSleep
		+NOINTERACTION;
	}
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0
			{
				for(int x=0;x<90;x++)
				{
					A_SPAWNITEMEX("SpawnImpactSmokeBigCluster", frandom(-200,200), frandom(-200,200), frandom(40, 5600));
				}
			}
			stop;
	}
}
class GeneratorSmoke07C : SelacoSmoke
{
	default
	{
		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.004;
		SelacoSmoke.FadingSpeed 0.002;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
		scale 0.25;
		alpha 0.3;
	}
}

class ConeSmoke : SelacoSmoke
{
	default
	{
		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.015;
		SelacoSmoke.FadingSpeed 0.019;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
		SelacoSmoke.invisibleStart true;
		SelacoSmoke.invisibleStartAlphaTarget 0.08;
		scale 0.35;
		alpha 0;
	}
}


class SpawnSmokeCluster07CGenerator : SelacoActor
{
	default
	{
		+SelacoActor.PreventSleep;
		+NOINTERACTION
	}
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0
			{
				for(int x=0;x<30;x++)
				{
					A_SPAWNITEMEX("GeneratorSmoke07C", frandom(-200,200), frandom(-200,200), frandom(-60, 60));
				}
			}
			stop;
	}
}

// Used in 07C with the rotating light 
class SpawnSmokeCone07C : SelacoActor
{
	int playerDistance;
	bool playerIsClose;
	default
	{
		+NOINTERACTION
	}
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0
			{

				// Get player
				PlayerPawn pawn=players[0].mo;
				let d = Dawn(pawn);
				double alphaFactor = 1.0;
				double fadingSpeedFactor;
				FLineTraceData RemoteRay;
				String hittex;
				LineTrace(angle, 700,  0,offsetz:-32,data: RemoteRay);
				if(RemoteRay.HitType == TRACE_HitWall)
				{
					// Find distance of the player from linetrace position
					if (!playerIsClose) {
						Vector3 hitLocation = RemoteRay.HitLocation;

						// Calculate 2D distance (ignoring the height difference)
						double distance = sqrt((hitLocation.x - d.pos.x) * (hitLocation.x - d.pos.x) + (hitLocation.y - d.pos.y) * (hitLocation.y - d.pos.y));

						if (distance < 200) {
							// Adjust alpha and fadingSpeed based on distance
							alphaFactor = 1.0 - (distance / 200.0);  // Alpha decreases as distance decreases
							console.printf("alphaFactor: %d", alphaFactor);

							playerIsClose = true;
						}
					}

					hittex = texman.GetName(RemoteRay.HitTexture);
					if(hittex == "CEIL5_G3")
					{
						// Forward movement
						for(int x=300; x<=500; x+=50)
						{
							// Sideways
							for(int y=0; y<3; y++)
							{
								actor smokeCloud;
								bool cockIsANerd;
								[cockIsANerd, smokeCloud] = A_SPAWNITEMEX("ConeSmoke", x+frandom(0,60), frandom(-11*y, y*11), frandom(0, -110));
								if(smokeCloud && playerIsClose)
								{
									SelacoSmoke(smokeCloud).invisibleStart = false;
									SelacoSmoke(smokeCloud).invisibleStartAlphaTarget = 0.04 * alphaFactor;
								}
							}
						}
					}
				}
			}
			stop;
	}
}

class SmokeGrenadeSmoke : actor
{
	default
	{
		Speed 1;
		xscale 2;
		yscale 4;
		Alpha 0;
	}
	States
    {
    Spawn:
		TNT1 A 0;
		TNT1 A 0 {
			if(waterLevel > 1)
			{
				destroy();
			}
		}
		SMK3 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_FadeIn(0.02);
		SMK3 A 240;
		SMK3 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_FadeOut(0.02);
	Goto Death;
	Death:
	    TNT1 A 0;
    	Stop;
	}
}

class ExplosionTrailSmoke : actor
{
	
	override void tick()
	{
		super.tick();
		if(alpha > 0 || scale.x > 0)
		{
			alpha-=0.0003; // Yes, the fade out is impressively slow!
			A_SETSCALE(scale.x-0.0002);
		}
		else
		{
			destroy();
		}
	}

	default
	{
		+NOINTERACTION
		renderstyle "translucent";
		alpha 0.7;
		radius 3;
		height 3;
	}
	states
	{
		spawn:
			SMKT ABCDEFGHIJKLMNOP 3;
			loop;
	}
}

class BlackSmokeLauncher : SelacoActor {

	const CATCH_UP_TIME = 190; // Amount of ticks into a level before we allow the thing to sleep

	actor blackSmokeSpawn;
	bool blackSmokeSuccess;

	array<BlackSmokeFire> smokeClouds;

	float smokeSize;
	float expansionSpeed;
	float lifetime;
	float windSpeed;
	int sleepingDistance;
	float spawnoffset;
	override void postbeginPlay()
	{
		super.postbeginPlay();
		// Set default values if arguments are zero
		smokeSize = args[0] == 0 ? 47 : args[0];
		windSpeed = args[1] == 0 ? 5 : args[1];
		sleepingDistance = args[2] == 0 ? 4096 : args[2];
		sleepDist = sleepingDistance;
		expansionSpeed = args[3] == 0 ? 7 : args[3];
		lifetime = args[4] == 0 ? 6 : args[4];
	}

	override void tick()
	{
		super.tick();
		if(level.time >= CATCH_UP_TIME)
		{
			bPreventSleep = false; // We want it to spawn a few stacks before sleeping
		}
		if(level.time % 9 == 0)
		{
			[blackSmokeSuccess,blackSmokeSpawn] = A_SPAWNITEMEX("BlackSmokeFire", spawnoffset, 0, 6, 0, 0, 1.3, flags:SXF_SETMASTER);
			spawnoffset-=1;
			if(spawnOffset < -5)
			{
				spawnOffset = 5;
			}
			BlackSmokeFire blackSmokeActor = BlackSmokeFire(blackSmokeSpawn);
			if(blackSmokeActor)
			{
				blackSmokeActor.smokeSize = smokeSize;
				blackSmokeActor.expansionSpeed = expansionSpeed;
				blackSmokeActor.windSpeed = windSpeed;
				blackSmokeActor.smokeFadeOutSpeed = lifetime;
				smokeClouds.push(blackSmokeActor);
			}
		}
	}

	void removeSmokeFromStack()
	{
		if(smokeClouds.size() > 0)
		{
			smokeClouds.delete(0);
		}
	}

	override void sleep(int ticks)
	{
		// Sleep all clouds
		for(int x=0;x<smokeClouds.size();x++)
		{
			if(smokeClouds[x])
			{
				smokeClouds[x].sleepIndefinite();
			}
		}
		super.sleep(ticks);

	}

	override void wake()
	{
		super.wake();
		// Wake all clouds
		for(int x=0;x<smokeClouds.size();x++)
		{
			if(smokeClouds[x])
			{
				smokeClouds[x].wake();
			}
		}		
	}


	default
	{
		+NOINTERACTION;
		+SelacoActor.preventSleep; // Only for the first few ticks!
		SelacoActor.SleepDistance 2048;
	}
	states {
		Spawn:
			TNT1 A -1;
			stop;
	}
}

class BlackSmokeFire : SelacoActor {

	float smokeSize;
	float expansionSpeed;
	float windSpeed;
	float smokeFadeOutSpeed;
	float zSpeed;
	override void postbeginPlay()
	{
		super.postbeginPlay();
		zSpeed = vel.z;
		A_SETROLL(random(0,360));
		if(smokeSize > 0)
		{
			A_SETSCALE(smokeSize*0.01);
		}
		if(expansionSpeed > 0)
		{
			expansionSpeed*=0.001;
		}
		if(windSpeed > 0)
		{
			windSpeed*=0.001;
		}
		if(smokeFadeOutSpeed  > 0)
		{
			smokeFadeOutSpeed*=0.001;
		}
	}

	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		if(master && BlackSmokeLauncher(master))
		{
			BlackSmokeLauncher(master).removeSmokeFromStack();
		}

		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}


	override void tick()
	{
		A_SETSCALE(scale.x + expansionSpeed);
		A_SETROLL(roll+0.05);
		A_CHANGEVELOCITY(windSpeed, windSpeed, 0, CVF_RELATIVE);
		super.tick();
	}

	default {
		scale 0.47;
		SELACOACTOR.SleepDistance 256;
		RenderStyle "Translucent";
		alpha 0;
		+NOGRAVITY;
		+NOINTERACTION;
		+ROLLSPRITE;
	}	
	int frameID;
	states {
		spawn:
			TNT1 A 0 {
				sprite = getspriteindex("FRSK");
			}
			FRSK A 0 {
				A_CHANGEVELOCITY(0.2, 0, 0.05, CVF_RELATIVE);
				frameID = (random(0,2));
				if(random(0,1) == 1) {
					bxflip = true;
				}
			}
		FadeInSmoke:
			FRSK AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				frame = frameID;
				A_FADEIN(0.03);
			}
		WaitForFadeOut:
			FRSK A 15
			{
				frame = frameID;
			}
		FlyUp:
			FRSK A 1 {
				a_fadeout(smokeFadeOutSpeed, FTF_REMOVE);
				frame = frameID;
			}
			loop;
	}
}

class BlackSmokeFireSlow : BlackSmokeFire
{
	default
	{
		scale 0.3;
		+SelacoActor.PreventSleep;
	}
	states {
		spawn:
			TNT1 A 0 {
				expansionSpeed = 0.035;
				sprite = getspriteindex("FRSK");
			}
			FRSK A 0 {
				frameID = (random(0,2));
				if(random(0,1) == 1) {
					bxflip = true;
				}
			}
		FadeInSmoke:
			FRSK AAAAAAAAA 1 {
				frame = frameID;
				A_FADEIN(0.12);
			}
		WaitForFadeOut:
			FRSK AAAAAAAAAAAAAAA 1
			{
				a_fadeout(0.01, FTF_REMOVE);
				frame = frameID;
			}
		FlyUp:
			FRSK A 1 {
				a_fadeout(0.01, FTF_REMOVE);
				frame = frameID;
			}
			loop;
	}	
}

class BlackSmokeFireFast : BlackSmokeFire
{
	override void tick()
	{
		super.tick();
		scale*=1.015;
		alpha-=0.018;
		if(alpha <= 0)
		{
			destroy();
		}
	}
	default
	{
		scale 0.16;
		alpha 0;
		+SelacoActor.PreventSleep;
	}
	states {
		spawn:
			FRSK A 0 {
				frameID = (random(0,2));
				if(random(0,1) == 1) {
					bxflip = true;
				}
			}
			FRSK AAAAAAA 1 A_FADEIN(0.09);
		WaitForFadeOut:
			FRSK A -1
			{
				frame = frameID;
			}
			loop;
	}	
}

// Spawned by shooting concrete
class RapidPlasmaSmoke: SelacoSmoke
{
	default {
		Alpha 1.0;
		Scale 0.12;

		// Smoke Properties
		SelacoSmoke.expansionSpeed 0.012;
		SelacoSmoke.FadingSpeed 0.025;
		SelacoSmoke.rollingSpeed 0.07;
		SelacoSmoke.fadeTickRate 1;
		SelacoSmoke.smokeLimiter false;
		SelacoSmoke.SpriteName "SMK6";
		SelacoSmoke.cullDistance  3;
	}
	states
	{
		Index:
			ICSM A 0;
	}
}