    
enum AI_WEAPONS
{
    AWPN_ASSAULTRIFLE = 0,
    AWPN_NAILGUN = 1,
    AWPN_PLASMAGUN = 2,
    AWPN_SHOTGUN = 3,
    AWPN_BURSTRIFLE = 4,
    AWPN_MINIGUN = 5,
    AWPN_VRRIFLE = 6,
    AWPN_STINGER = 7
}

extend class EnemySoldier 
{

    virtual void additionalFiringEffects()
    {

    }

    bool checkBulletBlocked(int yOffset = 0, int zOffset = 0)
    {
		FLineTraceData RemoteRay;
		LineTrace(angle,300, pitch,offsetz: zOffset,offsetforward:0, offsetSide:yOffset, data: RemoteRay);
        //&& remoteRay.LinePart == Side.mid -- Might want to add this again.
		if (RemoteRay.HitType == TRACE_HitWall)	
        {
            if(self is "soldier")
            {
                setStateLabel("STRAFENODE_Evade");
                return true;
            }
			return true;
		} 
        return false;
    }

	// Muzzleflash control
	actor muzzleFlashActor;
	bool muzzleFlashSuccess;

    actor flareActor;
    bool flareSuccess;
    string weapon_sound, weapon_muzzle, weapon_projectile, weapon_casing, weapon_prepare, ammoToDrop, weaponModel, weaponFlare, weaponRequiredForDropping, distantWeaponSound;
    name skin_color;
    int weapon_rateoffire_failsafe;
    int weapon_magazine, weapon_rateoffire, weapon_straferateoffire, ammoDropChance, flashHeightOffset;
    float weaponVolume, weaponAttenuation;

    // Assign Weapon Stats
    void assignGuns() 
    {
        ammoDropChance = 0;
        weaponVolume = 0.6;
        weaponAttenuation = 0.95;
        distantWeaponSound = "DISTANT/SHOT";

        if(soldierWeapon == AWPN_ASSAULTRIFLE) 
        {
            weaponFlare = "flareRedMuzzleFlash";
            weaponModel = "EnemyRifle";
            weaponAttenuation = 0.75;
            ammoDropChance = 20;
            weaponVolume = 0.76;
            weapon_straferateoffire = 1;
            weapon_sound = "grunt/firegun";
            ammoToDrop = "AmmoMachinegunDropped";
            weapon_muzzle = "AlienMuzzle";
            weapon_prepare = "RIFCL_CK";
            weapon_projectile = "AlienTracer";
            weapon_casing = "RifleCaseSpawnEnemy";
            weapon_magazine = 30;
            weapon_rateoffire = 5;
        }

        if(soldierWeapon == AWPN_VRRIFLE) 
        {
            weaponModel = "";
            ammoDropChance = 30;
            weaponVolume = 0.80;
            weapon_straferateoffire = 1;
            weapon_sound = "VR/attack";
            ammoToDrop = "AmmoMachinegunDropped";
            weapon_muzzle = "AlienMuzzle";
            weapon_prepare = "RIFCL_CK";
            weapon_projectile = "AlienTracer";
            weapon_casing = "RifleCaseSpawnEnemy";
            weapon_magazine = 40;
            weapon_rateoffire = 5;
        }

        if(soldierWeapon == AWPN_NAILGUN) 
        {
            weapon_straferateoffire = 2;
            weapon_sound = "nailgun/fire";
            weapon_muzzle = "AlienNailgunMuzzle";
            weapon_prepare = "nailgun/NAILPICK";
            weapon_projectile = "NailgunTracerEnemy";
            ammoToDrop = "AmmoNailgun_dropped";
            weapon_casing = "EmptyNailCaseSpawn";
            weapon_magazine = 90;
            weapon_rateoffire = 3;
            maxburstLength = 25;
        }

        if(soldierWeapon == AWPN_STINGER) 
        {
            distantWeaponSound = "SIEGER/SHOT/DISTANCE";
            weapon_straferateoffire = 2;
            weaponVolume = 1.0;
            weapon_sound = "sieger/shot";
            weapon_muzzle = "AlienMuzzleBlue";
            weapon_prepare = "nailgun/NAILPICK";
            weapon_projectile = "SiegerTracer";
            ammoToDrop = "";
            weapon_casing = "EmptyNailCaseSpawn";
            weapon_magazine = 90;
            weapon_rateoffire = 4;
            maxburstLength = 10;
        }

        if(soldierWeapon == AWPN_PLASMAGUN) 
        {
            skin_color = "PlasmaCyan";
            weaponModel = "EnemyPlasmaRifle";
            weaponVolume = 0.65;
            weaponAttenuation = 0.8;
            weapon_sound = "plasmarifle/fire";
            distantWeaponSound = "Plasmarifle/fire/distant";
            weapon_prepare = "enforcer/readyrifle";
            weapon_muzzle = "plasmaMuzzle";
            weapon_projectile = "PlasmaProjectileEnemy";
            ammoToDrop = "AmmoEnergySmall";
            ammoDropChance = 15;
            ENEMY_IdentifierTag = "PlasmaTrooper";  // Why do we set this here?
            weapon_casing = "";
            weapon_magazine = 999;
            weapon_rateoffire = 5;
            weaponRequiredForDropping = "PLASMARIFLE";
        }

        if(soldierWeapon == AWPN_BURSTRIFLE) 
        {
            ammoDropChance = 40;
            weaponVolume = 0.85;
            weapon_straferateoffire = 1;
            weapon_sound = "enforcer/fire";
            ammoToDrop = "AmmoMachinegunDropped";
            weapon_muzzle = "EnforcerMuzzle";
            weapon_prepare = "RIFCL_CK";
            weapon_projectile = "EnforcerBullet";
            weapon_casing = "RifleCaseSpawnEnemy";
            weapon_magazine = 50;
            weapon_rateoffire = 3;
            flashHeightOffset = 7;
        }


        if(soldierWeapon == AWPN_SHOTGUN) 
        {
            ammoDropChance = 12;
            weaponmodel = "EnemyShotgun";
            ammoToDrop = "AmmoShotgunSmall_Dropped";
            weaponRequiredForDropping = "SHOT_GUN";
        }

        if(soldierWeapon == AWPN_MINIGUN) 
        {
            ammoDropChance = 80;
            weapon_magazine = 573;
            weaponmodel = "EnemyMinigun";
        }
    }
    
	virtual void prepareRifle() 
    {
		if (rifleReadyCooldown == 0 && isTargetVisible()) 
        {
            lookForHazard();
			A_PlaySound("RIFCL_CK", 0, 0.7, pitch:frandom(0.9,1.1));
			rifleReadyCooldown = 60;
		}
	}

	// SCRIPT IDs:
	// 1 - Regular Shooting, Standing, sloppy
	// 2 - Regular shooting, standing, aimed
	// 3 - Slow shooting, crouched, very accurate
	// 4 - Strafe shooting left, standing, sloppy
	virtual void FireWeapon(int scriptID, int yMuzzleLocation, int zMuzzleLocation, int RateOfFire, int shotaccuracy, int xMuzzleLocation = 7, bool useWarp = true, int projectileAngle = -999) {// Shoot the weapon
        if(target is "PathNode") {
			target = players[0].mo;
            if(developer) A_PrintBold("Soldier weapon tried to fire at a pathnode!");
		}

        // In case of no weapon, give an Assault Rifle.
        // This should never run!
        if(!soldierWeapon) {
            soldierWeapon = 0;
            assignGuns();
        }

        if((target) && weapon_rateoffire_failsafe <= 0) { // We need this check because there's a bug that makes them fire too fast. Will fix this eventually.
            additionalFiringEffects();
            zMuzzleLocation++;
            
            actor projectileActor;

            weapon_rateoffire_failsafe = weapon_rateoffire;
            shotaccuracy+=2;
            if(skill <= 1) {
                shotaccuracy = shotaccuracy + 2;
            }
            if(skill > 2) {
                shotaccuracy = shotaccuracy - 2;
            }

            A_PLAYSOUND(distantWeaponSound, CHAN_AUTO, 0.4, pitch:frandom(0.96, 1.04));
            
            currentAmmo--;
            if (currentAmmo < 6) {
                A_PlaySound("combat/firedry", CHAN_AUTO, 1.0, 0, weaponAttenuation);
            }
            if(currentAmmo <= 0)
            {
                setStateLabel("ReloadWeapon");
                return;
            }
            if(rateOfFire != 0) {
                A_SetTics(RateOfFire);
            }
            if(RateOfFire < 0 ) {
                A_SetTics(1);
            }
            if(frostTimer > 0)
            {
                A_SETTICS(RateOfFire+5);
            }

            // Spawn gun smoke if the squad is small to save performance
            if(squad && squad.size() <= 1) {
                A_SpawnItemEx("BulletImpactSmokeEnemy",zMuzzleLocation-7, yMuzzleLocation, zMuzzleLocation+flashHeightOffset, frandom(-0.5, -2), frandom(0.1, 2), frandom(-0.3,0.3));
                A_SpawnItemEx("BulletImpactSmokeEnemy",zMuzzleLocation-7, yMuzzleLocation, zMuzzleLocation+flashHeightOffset, frandom(-0.5, -2), frandom(-0.1, -2), frandom(-0.3,0.3));
                A_SpawnItemEx("BulletImpactSmokeEnemy",zMuzzleLocation-7, yMuzzleLocation, zMuzzleLocation+flashHeightOffset, frandom(-0.5, -2), frandom(-0.3,0.3), frandom(0.1, 2));        
            }

            A_FACETARGET();
            A_PlaySound(weapon_sound, CHAN_AUTO, weaponVolume, 0, 0.7, false, frandom(0.9,1.0));

            // MUZZLE FLASH CONTROL
            // Warp the muzzleflash to follow the shooter correctly
            if(useWarp) {
                [flareSuccess, flareActor] = A_SPAWNITEMEX(weaponFlare, xMuzzleLocation+2, yMuzzleLocation, zMuzzleLocation+flashHeightOffset, 0, 0, 0, flags:SXF_SETMASTER);
                [muzzleFlashSuccess, muzzleFlashActor] = A_SPAWNITEMEX(weapon_muzzle, xMuzzleLocation, yMuzzleLocation, zMuzzleLocation+flashHeightOffset, 0, 0, 0, flags:SXF_SETMASTER);
                if(muzzleFlashActor)
                {
                    AlienMuzzle(muzzleFlashActor).effectOffset = (xMuzzleLocation+20, yMuzzleLocation, zMuzzleLocation+flashHeightOffset);
                }
                if(flareActor)
                {
                    FlareMaster(flareActor).effectOffset = (xMuzzleLocation+23, yMuzzleLocation, zMuzzleLocation+flashHeightOffset);
                }
            }
            
            // Legacy method. Generally less pretty.
            if(!useWarp) {
                A_SPAWNITEMEX(weapon_muzzle, xMuzzleLocation, yMuzzleLocation, zMuzzleLocation+flashHeightOffset, 0, 0, 0);
            }

            A_SpawnProjectile("GunFireSmoke", zMuzzleLocation, 0, 0, 0, 0, 0);
            A_SpawnItemEx("GunFireSmoke", zMuzzleLocation, yMuzzleLocation, 32 + flashHeightOffset, frandom(1.5, 3), frandom(1.5, 3));
            A_SpawnItemEx("GunFireSmoke", zMuzzleLocation, yMuzzleLocation, 32 + flashHeightOffset, frandom(1, 2), frandom(-1.5, -3));
            A_SpawnItemEx("GunFireSmoke", zMuzzleLocation, yMuzzleLocation, 32 + flashHeightOffset, frandom(1.5, 2), 0, frandom(1.5, 3));
            projectileActor = A_FireEnemyWeapon(weapon_projectile, zMuzzleLocation+4+flashHeightOffset, 0, frandom(shotaccuracy*-1, shotaccuracy), CMF_TRACKOWNER | CMF_OFFSETPITCH , frandom(1.1, -1.2));
            if(projectileActor && EnemySoldier(self).squadLeaderBuff)
            {
                projectileActor.A_ScaleVelocity(1.5);
            }
            A_SpawnItem (weapon_casing, 0, 30,0);
        }
        burstLength--;
		if (burstLength > 0) {
			switch (scriptID) {
				case 1: SetStateLabel("ShootWeapon1"); break;
				case 2: SetStateLabel("ShootWeapon_Aiming"); break;
				case 3: SetStateLabel("ShootWeapon_Crouching"); break;
				case 4: burstLength++; break; // Burst does not apply here
				case 5: SetStateLabel("LayDownCoolDown"); break;
                case 6: SetStateLabel("MountingShieldAttack"); break; // Used when soldier mounts a shield 
			}
		}
		if (burstLength <= 0) {
			burstLength = MaxburstLength;
		}
	}
}

class EnemyTracerShotgun: EnemyTracer
{

    override void BeginPlay() {
        int cvarSkill = getCvar("Skill");
		if(cvarSkill >=3) {
            A_ChangeVelocity(40, 0, 0, CVF_RELATIVE);
        }
    }

    default {
        speed 60;
        Projectile;
        speed 140;
        alpha 0.9;
        EnemyTracer.whizChance 3;
        SelacoTracer.puffType "HitpuffShotgunAlien";
        DamageFunction (random(5,6));
        //Decal "BulletDecalNew1"
        seesound "weapons/chainwiz";
        DamageType "BulletAlien";
        scale .11;
    }
	States
	{
		Spawn:
			TNT1 A 0;
			TRAC A 1 BRIGHT;
			TNT1 A 0 ThrustThingZ(0,random(-4, 4),0,1);
			TRAC A 1 BRIGHT;
			Goto Spawn2;
			
		Spawn2:
			TRAC A -1 BRIGHT;
			Loop;
				
		Death:
            TNT1 A 0 {
                spawnPuffActor();
                bulletImpactWorld();
                A_PLAYSOUND("tracer/fly", CHAN_AUTO, 0.3, 0, 1.0);
                A_PLAYSOUND("impact/tracerhit", CHAN_5, 0.15);
            }
			TNT1 A 35 {
				if (getCvar("g_impactshake") == 1) {
					A_QuakeEx( 1, 1, 1, 14, 0, 100, 0, 0, 1, 1, 1, 1, 1, 1);
				}
				if (getCvar("g_impactshake") == 2) {
					A_QuakeEx(frandom(1.3, 1.3), frandom(1.3, 1.3), frandom(1.3, 1.3), 14, 0, 100, 0, 0, 3, 3, 3, 2, 2, 2); 
				}
			}
			Stop;
        XDeath:
            TNT1 A 0;
            Stop;
	}
}

class EnemyTracerShotgunSilent : EnemyTracerShotgun
{
    default
    {
        SelacoTracer.puffType "HitpuffShotgunNoSound";
    }
}

class EnemyTracerSniper : EnforcerBullet {
    default {
        damageType "EnemySniper";
        damage 120;
        speed 3000;
    }
    states {
		Spawn:
			TNT1 A 0;
            goto Spawn2;
        Spawn2:
            VOXE L 1 bright;
            loop;
		Death:
            TNT1 A 0 A_SpawnItemEx("HitPuffShotgun",4,0,0,0,0,0, 180);
            TNT1 A 0 {
                A_SETANGLE(angle-180);
                bulletImpactWorld();
                A_PLAYSOUND("tracer/fly", CHAN_AUTO, 0.3, 0, 1.0);
                A_SPAWNITEMEX("sniperImpactSoundZone");
            }
			TNT1 A 35 {
                int cvar = getCvar("g_impactshake");
				if (cvar == 1) {
					A_QuakeEx( 2, 2, 2, 14, 0, 100, 0, 0, 1, 1, 1, 1, 1, 1);
				}
				if (cvar == 2) {
					A_QuakeEx(frandom(3.3, 3.3), frandom(3.3, 3), frandom(1.3, 1.3), 11, 0, 100, 0, 0, 3, 3, 3, 2, 2, 2); 
				}
			}
			Stop;
    }
}

// Chance roll missed, fire a shot that phases through the player
class EnemyTracerSniperDummy : EnemyTracerSniper
{
    override int SpecialMissileHit (Actor victim) {
        // Tracers can pass through certain objects.
        if(victim is "dawn") {
            return 0;
        }
		return super.SpecialMissileHit(victim);
	}
}