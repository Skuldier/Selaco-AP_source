class faucet_MASTER : Interactable {
	int waterTicks;
	float waterSprayAccuracy;
	int damageState;
	bool isActivated;
	Vector3 originalPos;
	string destructionFrame;
	default {
		+SHOOTABLE
		+NOBLOODDECALS
		+USESPECIAL
		SelacoActor.UseTag "$INTERACT_ACTIVATE";
		Tag "$OBJECT_FAUCET";
		mass 250;
		health 10;
		radius 8;
		height 13;
		Activation THINGSPEC_Activate;
		BloodType "Stacked_Sparks_lite", "Stacked_Sparks_lite", "Stacked_Sparks_Lite";
		PainSound "impact/hardmetal";
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		originalPos = pos;
		waterSprayAccuracy = 0;
	}

	override void tick() {
		super.tick();
		SetOrigin(originalPos, true);
		if(isActivated && waterTicks <= 120) {
			waterTicks++;
			sprayWater();
			// Restore after limit reached
			if(waterticks == 120) {
				A_STOPSOUND(CHAN_6);
				waterTicks = 0;
				bPreventSleep = false;
				sleepIndefinite();
				isActivated = false;
				bUseSpecial = true;
				activationType = THINGSPEC_Activate;
			}
		}
	}

	virtual void sprayWater() {
		A_SPAWNITEMEX("WaterParticleXSmall", 10, -0.4, 10, frandom(-0.1,0.1), frandom(-1*waterSprayAccuracy, waterSprayAccuracy));
	}

	override void activate(Actor activator) {
		bPreventSleep = true;
		wake();
		A_PLAYSOUND("SCRIPT/faucet1", CHAN_5, 0.7, 0, 0.6);
		A_PlaySound("script/waterdrip", CHAN_6, 1.0, 1, 0.6);
		isActivated = true;
		bUseSpecial = false;
	}
}

class faucet_BLUE : faucet_MASTER {

	override void PostBeginPlay() {
		super.PostBeginPlay();
		destructionFrame = "faucet_BLUE_DAMAGED";
	}

	states {
		Spawn:
			VOXE L 0;
			VOXE L -1
			{
				sleepIndefinite();
			}
			stop;
		Death:
			TNT1 A 0 A_PAIN();
			TNT1 A 0 A_SPAWNITEMEX(destructionFrame);
			stop;
	}
}

class faucet_BLUE_DAMAGED : faucet_MASTER {

	override void PostBeginPlay() {
		super.PostBeginPlay();
		waterSprayAccuracy = 0.8;
		destructionFrame = "faucet_BLUE_BROKEN";
	}

	states {
		Spawn:
			VOXE L 0;
			VOXE L -1;
			stop;
		Death:
			TNT1 A 0 A_PAIN();
			TNT1 A 0 A_SPAWNITEMEX(destructionFrame);
			TNT1 A 0 A_SpawnItemEx("faucet_PIECE", 0, 0, 4, frandom(4,5), 0, 3);
			stop;
	}
}

class faucet_BLUE_BROKEN : faucet_MASTER {
	virtual void sprayBrokenWater() {
		A_SPAWNITEMEX("WaterParticleXSmall", frandom(-1, 1), frandom(-1,1), random(5,7), frandom(1,3), frandom(-1,1), frandom(2,3));
	}

	default {
		-UseSpecial;
		+NOINTERACTION;
		Activation THINGSPEC_Default;
	}
	states {
		Spawn:
			VOXE L 0;
			VOXE L 0 A_PlaySound("script/waterdrip", CHAN_5, 1.0, 1.0);
			VOXE LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL 1 {
				sprayBrokenWater();
			}
			VOXE L 0 A_STOPSOUND(CHAN_5);
			VOXE L -1;
			stop;
	}	
}

class Faucet_hybrid : faucet_BLUE {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		destructionFrame = "Faucet_hybrid_DAMAGED";
	}

	override void sprayWater() {
		A_SPAWNITEMEX("WaterParticleXSmall", 12, -0.1, 3, frandom(0.2,0.3), frandom(-1*waterSprayAccuracy, waterSprayAccuracy));
	}
}

class Faucet_hybrid_DAMAGED : faucet_BLUE_DAMAGED {

	override void sprayWater() {
		A_SPAWNITEMEX("WaterParticleXSmall", 12, -0.1, 3, frandom(0.2,0.3), frandom(-1*waterSprayAccuracy, waterSprayAccuracy));
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		waterSprayAccuracy = 0.8;
		destructionFrame = "Faucet_hybrid_BROKEN";
	}
}

class Faucet_hybrid_BROKEN : faucet_BLUE_BROKEN {

	override void sprayBrokenWater() {
		A_SPAWNITEMEX("WaterParticleXSmall", frandom(-1, 1), frandom(-1,1), random(1,2), frandom(1,3), frandom(-1,1), frandom(2,3));
		A_SPAWNITEMEX("WaterParticleXSmall", frandom(-1, 1), frandom(-1,1), random(1,2), frandom(1,3), frandom(-1,1), frandom(2,3));
	}

	default {
		-UseSpecial;
		+NOINTERACTION;
		Activation THINGSPEC_Default;
	}
	
}

class faucet_PIECE : Actor {
	mixin ParticleDefinitionEmitter;
	default {
		radius 5;
		height 5;
		+MISSILE
		+DOOMBOUNCE
		+THRUACTORS
		+USEBOUNCESTATE
		gravity 0.7;
		BounceFactor 0.5;
		BounceCount 2;
		speed 3;
	}
    states {
        Spawn:
            TNT1 A 0;
			TNT1 A 0 A_SETANGLE(random(0,259));
        Looper:
            VOXE L 3 {
                A_SETPITCH(PITCH+25, SPF_INTERPOLATE);
            }
            loop;
		Bounce:
            TNT1 A 0 {
                for(int x=0;x<=3;x++) {
                    A_SPAWNITEMEX("BodyImpactSmokeSmall", 0, 0, 0, frandom(-1,1), frandom(-1,1), frandom(0.4,1.7));
                }
            }
			TNT1 A 0 {
				EmitDefinition('SparkBriefDefintion', 0.75, 30, pitch:frandom(-60,-120), flags:PE_ABSOLUTE_PITCH);
			}
			TNT1 A 0 A_PlaySound("impact/metal",CHAN_AUTO, 0.65, 0, 1.0, false, 1.75);
			goto Looper;
        Death:
            VOXE L 60 {
                A_SETPITCH(0);
            }
            VOXE L 1 {
                SleepIndefinite();
            }
    }
}