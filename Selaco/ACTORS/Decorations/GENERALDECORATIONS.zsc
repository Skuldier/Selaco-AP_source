class EarthMemorialFlyers : SelacoActor {
    default {
        //$Category SelacoDecorations
        scale 1;
        height 5;
        radius 5;
        DistanceCheck "r_ThingLOD";
        +NOINTERACTION;
    }
	states {
		spawn:
			VOXE L 0;
			VOXE L -1 {
				SleepIndefinite();
			}
			stop;
	}
}

// Deals no damage, is used to destroy Yellow Cracks.
class YellowBarrel : PickupableDecoration {
    actor mapIcon;
    bool succ;

    override void tick() {
        super.tick();

        // Look for yellow paint
        if(level.time % 5 == 0 && checkProximity("WallDestroyerCrackedYELLOW", 30.0, 1, CPXF_CHECKSIGHT | CPXF_SETTARGET) && target) 
        {
            // Position a prime-able barrel right in front of it.
            target.A_SPAWNITEMEX("YellowBarrelPositioned", 20, 0, -400);
            if(mapIcon) {
                mapIcon.destroy();
            }
            destroy();
        }

		if(!mapIcon && level.time % random(10,15) == 0 && LookForPlayers(true)) 
		{
            [succ, mapIcon] = A_SPAWNITEMEX("map_yellowBarrel");
            Notification.QueueNew('MapNotification', "Automap Updated", StringTable.localize("$OBJECT_REAGENT"), "ICO2FX", 0);
		}
        if(mapIcon) {
            mapIcon.warp(self, 0, 0, 0, flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
        }

    }


    // A cheap hack to prevent bounce death
    // Bouncecount should never not be -1, but in some savegames it has been known to change
    // So we re just going to make sure this very important object never dies
    override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
        if(bouncecount == 0) {
            bouncecount = -1;
            return;
        }
        
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}


    default {
        +BUDDHA;
        +SelacoACTOR.DecorativeActor
        -NOPAIN;
		-SelacoActor.AllowPunting;
        SelacoActor.SleepDistance 2048;
        +SelacoActor.WakeNearPlayer;
        PickupableDecoration.ThrowVel 0.3;
        PickupableDecoration.HoldHeight -32;
        +PickupableDecoration.SlowDownPlayer;
        -PickupableDecoration.RaiseAllowed;
        -PickupableDecoration.ChargedThrow;
        -PickupableDecoration.TranslucentPickup;
        -SelacoActor.AimAssist;
        -NOBLOOD
        height 26;
        SelfLighting "444444";
        damagetype "YellowBarrel";
        tag "$OBJECT_REAGENT";
        mass 80000;
        SelfLighting "0000000";
        gravity 1.5;
		BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
		PainSound "impact/hardmetal"; 
        // Yellow barrels are important
		DistanceCheck "r_ThingLODImportant";
    }

    states {
        Pickup:
        Throw:
        Looper:
        Spawn:
            VOXE L -1;
            stop;
    }

    override void Activate (Actor activator) {
        if(bCanPickUp) {
            if(!isPickedUp()) {
                if(activator is "Dawn") {
                    if(activator.pos.z > pos.z + height - 10) { 
                        // Reset activate flag
                        activationtype |= THINGSPEC_Activate;
                        return; 
                    }   // Don't pick up barrel from above, it's too heavy for poor dawn
                }
            }
        }

        Super.Activate(activator);
	}

    override string GetUsePrompt(string highCol) {
		if(players[consolePlayer].mo && players[consolePlayer].mo.pos.z > pos.z + height - 10) {
            string ut = UseTag == "" ? "$ACT_USE" : UseTag;
            return String.Format("\c[DARKGRAY]%s %s", StringTable.Localize(ut), GetCharacterName());
        }

		return Super.GetUsePrompt(highCol);
    }

    override void convertToProjectile(bool thrown) {
        return;
    }

    override void throwTelek(bool asProjectile) {
        if(asProjectile) {
            // Reduce velocity, we shouldn't be able to fire very hard
            if(vel.length() > 15) {
                vel = vel.unit() * 15.0;
                if(telekOwner) vel += telekOwner.vel;
            }
        }
    }
}

class YellowBarrelPositioned : Interactable
{

    
    mixin DangerIndicatorHandler;
    actor explosionActor;
    bool success;
    
    bool primed;
    float dangerPitch;
    bool primeReady;
    vector3 currPosition;
    int primeTimer;
    int aliveTime;

    override void beginPlay()
    {
        super.BeginPlay();
        A_PLAYSOUND("place/yellowbarrel", CHAN_AUTO, 0.8, 0, 0.6);
    }


    override void tick()
    {
        super.tick();
        if(aliveTime == 1)
        {
            currPosition = pos;
        } else
        {
            aliveTime++;
        }

        if(currPosition.length() > 0)
        {
            SetOrigin(currPosition, false);
        }

        // Barrel is primed.
		if(primed) {
			// Prevent Mr. Barrel from falling asleep during its shift
			sleepDist = 0;
			EmitDefinition('MetalShrapnelParticle360Definition', chance: 1.0, numTries: 12, angle:random(0,360), pitch:frandom(-150, -220), speed:frandom(-4,-5), offset:(0, 0, 32), velocity:(0, 0, frandom(0.2,7)), flags:PE_ABSOLUTE_OFFSET);
			Selflighting = "ff1300";
			if(primeTimer % 4 == 0) {
				A_SpawnItemEx("SmokeScatteredCloudFast", 0,0,40, frandom(-0.03, 0.03), frandom(-0.03, 0.03), 1);
				Selflighting = "";
			}

			// Pitch the sound up every 8 ticks
			if(primeTimer % 8 == 0) {
				BlinkDangerIndicator(120);
				A_PLAYSOUND("ui/dangerwarning", CHAN_AUTO, 1.0, 0, 2.3, 0, dangerPitch);
				A_PLAYSOUND("ui/dangerwarning", CHAN_AUTO, 1.0, 0, 2.3, 0, dangerPitch);
				dangerpitch = dangerpitch + 0.01;
			}

			// Expand the barrel and...
			if(primeTimer > 70) {
				A_SetScale(scale.x + 0.05, scale.y, 0, true);
			}

			// EXPLODE!
			if(primeTimer == 75) {
				die(self, self);
			}
			primeTimer++;
		}

    }

    default 
    {
        +USESPECIAL
        activation THINGSPEC_Activate;
        +BUDDHA;
        -NOPAIN;
        -SelacoActor.AimAssist
        height 26;
        SelfLighting "0000000";
        SelacoActor.UseTag "$INTERACT_PRIME";
        damagetype "YellowBarrel";
        tag "$OBJECT_REAGENT";
        mass 20000;
    }
    states
    {
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                for(int x=0;x<=5;x++) {
                    A_SPAWNITEMEX("BodyImpactSmoke", 0, 0, 0, frandom(-1,1), frandom(-1,1), frandom(0.4,1.7));
                }
                A_SPAWNITEMEX("BulletImpactEffectMetalZpuff");
                EmitDefinition('ShortSpark360SmallParticleDefinition', chance:0.75, numTries:50, pitch:-45, speed:-2);
            }
            VOXE L -1;
        Looper:
            VOXE A -1;
            loop;
        Active:
            VOXE A 25
            {
                A_PLAYSOUND("yellowbarrel/activate", CHAN_AUTO, 0.3);
                bUseSpecial = false;
                dangerPitch = 1.0;
                activationtype = THINGSPEC_Default;               
            }
            VOXE A 1
            {
                primed = true;
            }
            goto looper;
		Death:	
			TNT1 A 0 A_SetMass(150);

            TNT1 A 0 {
                activationtype = THINGSPEC_Default;
                A_PLAYSOUND("YELLOWBARREL/Explosion", CHAN_AUTO, 1.0, 0, 0.6);
                A_PLAYSOUND("YELLOWBARREL/Explosion", CHAN_AUTO, 1.0, 0, 0.6);

                // lmao
                if(skill == SKILL_SMF)
                {
                    for(int x=0;x<3;x++)
                    {
                        A_SPAWNITEMEX("CrawlerMine", 0, 0, 16*x);
                    }
                }
            }

			VOXE AAAAAAAAAAA 1 {
				EmitDefinition('MetalShrapnelParticle360Definition', chance: 1.0, numTries: 35, angle:random(0,360), pitch:frandom(-30, -360), speed:7, offset:(0, 0, 32));
            }

			TNT1 A 0 {
                A_SPawnItemEx("PlayerShaker1");
				// Create explosion instance
				[success, explosionActor] = A_SpawnItemEx("YellowBarrelExplosion");
                spawnLight(700, 470, 90, 160, 0, -1,overbright:2, divisionSpeed:1.1);
				// To prevent weirdness from happening
				bSolid = false;
				bThruActors = true;
                for(int x=0; x<45;x++) {
                    A_SPAWNITEMEX("YellowSlimeLong", frandom(-40,40), frandom(-40,40), frandom(0,45), frandom(-4,4), frandom(-4,4), frandom(1,7));
                }
				// Spawn scorchmark
				A_SPAWNITEMEX("ScorchMarkFloor");
			}

			TNT1 A 0 A_SpawnItemEx ("BaseExplosionEffect",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); 
			VOXE L 0 {
				EmitDefinition('MetalShrapnelParticle360Definition', chance: 1.0, numTries: 225, angle:0, pitch:-90, speed:4, offset:(0, 0, 32));
            }
			TNT1 A 0 A_NoBlocking;
			TNT1 A 0 A_Fall;
		
			EXPL A 0 Radius_Quake (2, 24, 0, 15, 0);
			TNT1 A 0 A_PlaySound("kaboom/explode", 3);
			TNT1 A 0 A_Playsound("destruction/derby", chan_auto);
			TNT1 AAA 0 A_SpawnProjectile ("ExplosionSmoke", 1, 0, random (0, 360), 2, random (50, 130));
			Stop;
    }
}

class WetFloorSign : PickupableDecoration {
	default {
		health 10;
		radius 16;
		height 25;
        -NOBLOOD
        +SelacoActor.thruplayers;
        +SelacoActor.ThruDecorations;
		PickupableDecoration.FallDamageThreshold FALLTHRESHOLD_MEDIUM;
		tag "$OBJECT_WETFLOORSIGN";
        SelacoActor.CollisionSound "PUSH/SMALLPROP";
        bloodtype "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary";
        PainSound "impact/breakable";
	}
	states {
		spawn:
			VOXE L 0 A_SETPITCH(0);
			VOXE L -1;
			stop;
		Death.FallDamage:
			TNT1 A 0 A_PLAYSOUND("dest/snap", CHAN_AUTO);
			TNT1 A 0 A_SPAWNITEMEX("WetFloorSign_BROKEN_A", 0, 0, 32, 4, 0, 2);
			TNT1 A 0 A_SPAWNITEMEX("WetFloorSign_BROKEN_B",0, 0, 32, -4, 0, 2);
			stop;
		Death.shotgun:
		Death.explosiveimpact:
			TNT1 A 0 A_SPAWNITEMEX("WetFloorSign_BROKEN_A", 0, 0, 32, 9, 0, 9);
			TNT1 A 0 A_SPAWNITEMEX("WetFloorSign_BROKEN_B",0, 0, 32, -9, 0, 9);
			stop;
		Death:
			TNT1 A 0 A_SPAWNITEMEX("WetFloorSign_BROKEN_A", 0, 0, 32, 4, 0, 5);
			TNT1 A 0 A_SPAWNITEMEX("WetFloorSign_BROKEN_B",0, 0, 32, -4, 0, 4);
			stop;
		}
}

class WetFloorSign_BROKEN_A : BrokenplasticPiece {
	states {
		Spawn:
			VOXE L 0;
			TNT1 A 0 A_SETANGLE(random(0,360));
		Looper:
			VOXE L 4 {
				A_SetPitch(pitch + 50);
				A_SETROLL(roll+25);
			}
			loop;
		Bounce:
            TNT1 A 0
            {
                for(int x=0;x<=3;x++) {
                    A_SPAWNITEMEX("BodyImpactSmokeTiny", 0, 0, 0, frandom(-1,1), frandom(-1,1), frandom(0.4,0.6));
                }
            }
			TNT1 A 0 A_PLAYSOUND("bounce/plasticsmall", CHAN_AUTO, 1.0, 0, 0.9, 0, frandom(0.9,1.1));
			goto Looper;
		Death:
			TNT1 A 0 {
				A_PLAYSOUND("bounce/plasticsmall");
			}
			VOXE L 1700 {
				A_SETROLL(0);
				A_SETANGLE(frandom(0,360));
				A_SetPitch(0);
			}
			stop;
	}

}

class WetFloorSign_BROKEN_B : WetFloorSign_BROKEN_A {

}

class LightCubeOn : Interactable {
    default {
        tag "$OBJECT_LIGHTCUBE";
        +SHOOTABLE
        +USESPECIAL
        -THRUACTORS;
        health 10;
        radius 15;
        height 15;
        scale 1.0;
        SelacoActor.UseTag "$INTERACT_TURNOFF";
        Activation THINGSPEC_Activate;
        Selflighting "f6ccff";
        BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
    }
    states {
        Spawn:
            VOXE L -1;
            loop;
        Death:
            TNT1 A 0 {
                A_PLAYSOUND("dest/snap", CHAN_AUTO);
                A_SpawnProjectile("LightCubeBroken", 4, 0, 180);
            }
            stop;
        Inactive:
        Active:
            TNT1 A 0 A_PLAYSOUND("script/lightoff");
            TNT1 A 0 A_SPAWNITEMEX("LightCubeOff");
            stop;
    }
}

class LightCubeOff : LightCubeOn {
    default {
        SelacoActor.UseTag "$INTERACT_TURNON";
        Selflighting "000000";
    }
    states {
        Active:
            TNT1 A 0 A_PLAYSOUND("script/lighton");
            TNT1 A 0 A_SPAWNITEMEX("LightCubeOn");
            stop; 
    }
}



class LightCubeBroken : PickupableDecoration {
    default {
        speed 10;
        +MISSILE;
        gravity 0.8;
        mass 300;
        BounceFactor 0.7;
        BounceCount 3;
        activation THINGSPEC_Default;
        scale 1.0;
        Selflighting "000000";
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_CHANGEVELOCITY(0, 0, 6);
            }
        Looper:
            VOXE L 2 {
                A_SPAWNITEMEX("SpawnImpactSmokeTinySuperShortThin");
                EmitDefinition('ShortSparkParticleDefinition', chance: 1.0, numTries: 15, angle:frandom(0, 360), pitch:frandom(0, 40), speed:frandom(1, 2));
                EmitDefinition('LongerSparkDefinition', chance: 1.0, numTries: 5, angle:frandom(0, 360), pitch:frandom(0, 40), speed:frandom(1, 2));
                A_SETANGLE(angle + 20);
            }
            loop;
        Death:
			VOXE LLLLLLLLL random(60,90) {
				A_SpawnItemEx("GunFireSmokeMassive", 0, 0,16, 0, 0, 1);
				A_SpawnItemEx("GunFireSmokeMassive", 0, 0, 16, 0, 1, 1);
				A_SpawnProjectile ("SparkEmberUpward", 10, -5, random (0, 70), 2, random (0, 190));
			}
            VOXE L -1 {
                A_SETPITCH(0);
            }
    }
}


class Trashbag : PickupableDecoration {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if(random(0,1) == 1) {
			bxflip = true;
		}
	}
	default {
		tag "$OBJECT_TRASHBAG";
		PickupableDecoration.grabSound "impact/trashpickup";
		PickupableDecoration.landingSound "IMPACT/TRASHLAND";
		+SHOOTABLE
		scale 1.0;
        mass 300;
		health 5;
        height 20;
	}
	states {
		Spawn:
			VOXE L -1;
			stop;
		Death:
			TNT1 A 0 A_PLAYSOUND("DEST/TRASBRK", CHAN_AUTO, 1.0, 0, 0.8, 0, frandom(0.7,1.1));
			TNT1 A 0 A_SpawnProjectile("BrownCloudSmall", 0, 0, random (0, 120), 2, random (0, 60));
            TNT1 AAAA 0 A_SPAWNITEMEX("PaperDustEffectShorter", frandom(-20,20), frandom(-20,20), 0);
			TNT1 A 0 {
				EmitDefinition('TrashbagChunkSmallDefinition', 1.0, 100, offset:(0,0,8), particleSpawnOffsets:3);
			}
            TNT1 A 0 A_SPAWNITEMEX("bulletImpactEffectWoodSmall");
			TNT1 A 0 {
				for(int i; i<random(60,80);i++) {
					A_SPAWNITEMEX("JunkLauncher", 0, 0, 0, frandom(0.7,0.8), frandom(0.7, 0.8), 1, frandom(0,360), 0, 180);
				}
			}
			stop;
	}
}

class trashbagwhite : Trashbag { }

class  TEA_BAG_DROPPED : PickupableDecoration {
    default {
        tag "$OBJECT_TEABAG";
        +SelacoActor.ThruDecorations
        +SelacoActor.thruplayers
        radius 3;
}
    states {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class TEA_BAG_STRAIGHT : TEA_BAG_DROPPED { }

class TEA_BAG_CLUTTERED : Interactable { 
    default {
        +USESPECIAL
        Activation THINGSPEC_Activate;
        SelacoActor.UseTag "$INTERACT_SCATTER";
        tag "$OBJECT_TEABAGS";
    }
    states {
        Spawn:
            VOXE L -1;
            stop;
        Active:
            TNT1 A 0 {
                A_SPAWNITEMEX("TEA_BAG_STRAIGHT", 3,2, 0, angle:45);
                A_SPAWNITEMEX("TEA_BAG_STRAIGHT", -2,3, 0, angle:167);
                A_SPAWNITEMEX("TEA_BAG_DROPPED",4,-3, 0, angle:117);
                A_SPAWNITEMEX("TEA_BAG_DROPPED",7,5, 0, angle:217);
                A_SPAWNITEMEX("TEA_BAG_DROPPED",-6,5, 0, angle:257);
                A_SPAWNITEMEX("TEA_BAG_DROPPED",-3,-4, 0, angle:327);
            }
            stop;
    }
}

class BaronOfGel : PickupableDecoration {
	default {
		health 4;
		scale 0.7;
        mass 150;
		-NOBLOOD;
		+PickupableDecoration.dumpsterCompatible;
		PickupableDecoration.grabSound "pickup/dishwasher";
		PickupableDecoration.landingSound "land/dishwasher";
		tag "$OBJECT_SHOWERGEL";
		BloodType "WaterSplashBaseSmall", "WaterSplashBaseSmall", "WaterSplashBaseSmall";
	}
	states {
		Death:
			TNT1 A 0 A_playSound("script/GWYNBRK");
			TNT1 A 0 A_SpawnItemEx("BaronOfGelLit", 0, 0, 4, frandom(0.2,0.3), frandom(0.2,0.3), 2);
			TNT1 A 0 A_SpawnItemEx("WaterSplashBaseSmall", 0, 0, 4, frandom(0.2,0.3), frandom(0.2,0.3), 2);
			stop;
	}
}

class GaiaPerfume : GenericPerfumeBottle 
{
    default {
        tag "$OBJECT_GAIA";
        DistanceCheck "r_ThingLOD";
        Alpha 0.8;
        Health 1;
        height 16;
        radius 10;
        +SHOOTABLE
        +BLOODSPLATTER
        +NOBLOODDECALS
        -SOLID
        //$Category SelacoDecorations
        BloodType "", "", "";
        Scale 1;
    }
	States
	{
		Spawn:
		    VOXE L -1;
		Death:
			TNT1 A 0 A_playSound("dest/glassm");
		    TNT1 A 0
            {
                EmitDefinition('ShortSparkParticleDefinition', 1.0, 35, pitch:frandom(-60,-120));
                EmitDefinition('GlassParticleSmall360BriefDefinition', 1.0, 42, angle: 0, speed: 2,offset: (frandom(-5,5), frandom(-5,5), random(-5,5)));
                EmitDefinition('GlassParticleSmall360Definition', 1.0, 27, angle: 0, speed: 2,offset: (frandom(-5,5), frandom(-5,5), random(-5,5)));
            }
            TNT1 A 0 A_SpawnItemEx("WaterSplashBaseSmall", 0, 0, 4, frandom(0.2,0.3), frandom(0.2,0.3), 2);
			stop;
		Destroy:
			TNT1 A 0;
			stop;
	}
}

class circuitboardDecoration : SelacoActorStatic {
    default {
        +SelacoActor.IsTrash;
    }
	states {
        Spawn:
            TNT1 A 0;
			VOXE L -1 {
                frame = random(0,7); // Assign one of 3 Circuitboard skins
				SleepIndefinite();
			}
			stop;
    }
}

class GrateModel :Actor {
    bool touchedByPlayer;
    override void touch(actor toucher) {
        if(toucher is 'dawn' && !touchedByPlayer) {
           S_StartSound("impact/melee", CHAN_WEAPON);
            A_QuakeEx( 3, 3, 3, 8, 0, 20, 0, 0, 10, 10, 10, 6);
            fallOver();
        }
    }

    void fallOver() {
        touchedByPlayer = true;

        A_PLAYSOUND("SCRIPT/BREAKMETALGRATE", CHAN_AUTO, 1.0, 0, 0.6);
        A_SetSize(3, 3);
        A_CHANGEVELOCITY(10, 0, 0, CVF_Relative);
        bThruActors = true;
        A_CHANGELINKFLAGS(false);        
    }

    override void tick() {
        super.tick();
        if(touchedByPlayer && pitch <= 80) {
            pitch+=10;
        }
    }
    
    default {
        +SHOOTABLE
        +Solid;
        +SPECIAL
        +NOBLOODDECALS
        friction 0.8;
        radius 25;
        health 50;
        scale 1.0;
        Bloodtype "Stacked_sparks_lite", "Stacked_sparks_lite", "Stacked_sparks_lite";
    }
    states {
        Spawn:
            TNT1 A 1;
            VOXE L -1;
        ForceTrigger:
            TNT1 A 0 {
                A_SETSCALE(1.2);
                fallOver();
            }
        ForceTriggerBig:
            TNT1 A 0 {
                A_SETSCALE(2.2);
                fallOver();
            }
        xDeath:
        Death:
            VOXE L 0;
            VOXE L -1;
            stop;
    }
}

class PaperActor : SelacoActor
{

    override void activate(actor activator)
    {
        activator.A_QuakeEx(frandom(0,0.6), frandom(0,0.6), frandom(0,0.1), 2, 0, 700, 0, 0, 0, 0, 0, 0, frandom(0, 0.6), frandom(0, 0.6), frandom(0, 0.6));
        setStateLabel("Tear");
    }

    default {
        //$Category SelacoDecorations
        SelacoActor.useTag "$INTERACT_TEAR";
        tag "$OBJECT_POSTER";
        radius 12;
        mass 100;
        height 25;
        maxStepHeight 1;
        health 5;
		deathsound "dest/paper";
		Bloodtype "PaperChunk_UP", "PaperChunk_UP", "PaperChunk_UP";
        -solid;
        -SelacoActor.SlopeAlignment;
        +SelacoActor.DisallowGravityManipulation;
        -SelacoActor.allowGravityManipulation;
		+NOGRAVITY
        +DONTTHRUST
		+SHOOTABLE
        +USESPECIAL
        Activation THINGSPEC_SWITCH;
		+NOBLOODDECALS;
        +WALLSPRITE;
    }

	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_RECOIL(50);
            TNT1 A 0;
			VOXE L -1
            {
                SleepIndefinite();
            }
			loop;
        Inactive:
        Active:
		Death.ExplosiveImpact:
		Death.Shotgun:
		Death: 
			TNT1 AAAAAA 0 A_SPAWNITEMEX("PaperDustEffect", frandom(0,50), frandom(-20,20), random(-20,20), frandom(0.3,0.6));
			TNT1 A 0 A_PlaySound("dest/paper");
            VOXE L 0;
			Stop;
        Tear:
            TNT1 A 0
            {
                bNoInteraction = true;
                bPreventSleep = true;
                Wake();
                A_PLAYSOUND("PAPER/TEAR", CHAN_AUTO, 0.7);
                A_PlaySound("dest/paper");
                A_SPAWNITEMEX("PaperChunk", 5, 0, 16);
                vel = (0,0,0);
            }
            VOXE LLLL 1 A_FADEOUT(0.2);
            stop;
		}  

}

class UC36_POSTER : PaperActor          {  default { tag "$OBJECT_UC36POSTER";} }
class SHOTGUN_POSTER : PaperActor       {  default { tag "$OBJECT_ESG24POSTER";} }
class NAILGUN_POSTER : PaperActor       {  default { tag "$OBJECT_NAILGUNPOSTER";} }
class MGL2_POSTER : PaperActor          {  default { tag "$OBJECT_MGL2POSTER";} }
class YOGA_WINDOW : PaperActor          {  default { tag "$OBJECT_NOTE";} }
class CLEAN_POOLCUE : PaperActor        {  default { tag "$OBJECT_NOTE";} }
class DOCTOR_EYE : PaperActor           {  default { tag "$OBJECT_EYETESTPOSTER";} }     

class OldPlanetFeasts_menu : PaperActor {  
    default 
    { 
        height 35;
        tag "$OBJECT_OLDFEASTMENU";
    } 
} 

class WrongOrder : PaperActor          {  default { tag "$OBJECT_NOTE";} }
class DOCTOR_ORGANS : PaperActor       {  default { tag "$OBJECT_ORGANPOSTER";} }
class DOCTOR_PAIN : PaperActor         {  default { tag "$OBJECT_PAINPOSTER";} }
class ShittyOfficeReference : PaperActor {
    override void tick() {
        super.tick();
        //Check if there's a wall behind. if not, collapse.
        FLineTraceData RemoteRay;
        LineTrace(angle - 180, 30, pitch,offsetz: height-2,data: RemoteRay);
        if (RemoteRay.HitType != TRACE_HitWall) {
            die(self,self);
        }
    }
    default {
        tag "$OBJECT_NOTE";
        height 10;
    }
}

class BLUEPRINT_WALL : PaperActor
{
    int blueprintFrame;
    override void postBeginPlay()
    {
        super.postbeginPlay();
        blueprintFrame = (args[0] == 0) ? random(0,7) : args[0];
    }

    default
    {
        tag "$OBJECT_BLUEPRINT";
    }

    states
    {
        Spawn:
            TNT1 A 0;
            VOXE A -1
            {
                frame = blueprintFrame;
            }
            stop;
    }
}

class PartyHat : PickupableDecoration {
    default
    {
        +SelacoActor.thruplayers
        health 5;
        radius 10;
        height 10;
        -NOBLOOD;
        scale 1;
        tag "$OBJECT_PARTYHAT";
    }
	states {
		spawn:
			TNT1 A 0;
			VOXE L -1;
			stop;
        xDeath:
        Death:
            TNT1 A 0
            {
                A_PLAYSOUND("dest/partyhat", CHAN_AUTO);
            }
            TNT1 AAAAA 0 A_SPAWNITEMEX("PaperDustEffect", frandom(-20,20), frandom(-20,20), random(0,29));
            stop;
	}
}


class BookClub : PaperActor                 { default {tag "$OBJECT_BOOKCLUBDOORNOTE"; } }

class ARACHNO_POSTER_1 : PaperActor         { default {tag "$OBJECT_ARACHNOPOSTER"; } }
class ARACHNO_POSTER_2 : ARACHNO_POSTER_1 {}
class ARACHNO_POSTER_3 : ARACHNO_POSTER_1 {}
class CONTROLLED_CONSTRUCTION_STICKER : PaperActor {
    default
    {
        activation THINGSPEC_DEFAULT;
        -UseSpecial;
    }
}
class PeriodicTable : PaperActor                        {  default   {   tag "$OBJECT_LABPOSTER";}   }
class PeriodicTableClean : PeriodicTable { }           
class LABPOSTER1 : PaperActor                           {  default   {   tag "$OBJECT_LABPOSTER";}   }
class LABPOSTER2 : LABPOSTER1 {}
class LABPOSTER3 : LABPOSTER1 {}
class LABPOSTER4 : LABPOSTER1 {}
class LABPOSTER5 : LABPOSTER1 {}
class LABPOSTER6 : LABPOSTER1 {}
class LABPOSTER7 : LABPOSTER1 {}
class LABPOSTER8 : LABPOSTER1 {}
class LABPOSTER9 : LABPOSTER1 {}
class LABPOSTER10 : LABPOSTER1 {}
class LABPOSTER11 : LABPOSTER1 {}
class LABPOSTER12 : LABPOSTER1 {}
class BAND_POSTER1 : LABPOSTER1                         {  default   {   tag "$OBJECT_EAGLEEYEDTIGERS";}   }
class SELACOTRONICS_LABEL_1 : PaperActor                {  default   {   tag "$OBJECT_SELACOTRONICSPOSTER";}   }
class SELACOTRONICS_LABEL_2 : SELACOTRONICS_LABEL_1{}
class SELACOTRONICS_LABEL_3 : SELACOTRONICS_LABEL_1{}
class SELACOTRONICS_LABEL_4 : SELACOTRONICS_LABEL_1{}
class COFFEE_POSTER_1 : PaperActor                      {  default   {   tag "$OBJECT_COFFEEPOSTER";}   }
class COFFEE_POSTER_2 : COFFEE_POSTER_1 { }
class LIPSTICK_DRAWING : PaperActor {
    default {
        activation THINGSPEC_DEFAULT;
        -USESPECIAL
        -SHOOTABLE
        +BUDDHA
        +INVISIBLEINMIRRORS
    }
}
class CEILING_NOTE : PaperActor                         {  default   {   tag "$OBJECT_NOTE";}   }
class JONATHAN_PHOTO : PaperActor                       {  default   {   tag "$OBJECT_JONATHANPOSTER";}   }
class AUS_FLAG : PaperActor {
    default {
        height 29;
    }
}
class SPACEFROG_POSTER : PaperActor                     {  default   {   tag "$OBJECT_SPACEFROG";}   }

class MankindPoster : PaperActor {  
    default   
    {   
        height 35;
        tag "$OBJECT_MANKINDPOSTER";
    }   
}
class TOMSWOONEY : PaperActor {
    default
    {
        tag "$OBJECT_TOMSWOONEY";
    }
}


class DOCTOR_EYE_FLAT : SelacoActorStatic {
	states {
		Spawn:
			VOXE L -1;
	}
}

class SCATTEREDBLUEPRINTS : SelacoActorStatic {
	states {
		Spawn:
			VOXE L -1;
	}
}

class BLUEPRINTS_MECH : DatapadEntry {

    actor bluePrintActor;
    bool nerd;

    override bool TryPickup (in out Actor other) {
        [nerd, bluePrintActor] = A_SPAWNITEMEX("BLUEPRINTS_MECH_PICKUP");
        return super.TryPickup(other);
    }

    override void postbeginPlay()
    {
        super.postBeginPlay();
        area = 31;
        entryNum = 16;
    }

    default
    {
        scale 1.0;
        radius 30;
        height 40;
        tag "$OBJECT_BLUEPRINT";
        +NOGRAVITY;
        +DONTTHRUST;
        -SelacoItem.FlyAnimation
    }
	states {
		Spawn:
			VOXE L -1;
            stop;
        Pickup:
            goto PickupSuccess;
	}
}

class BLUEPRINTS_MECH_PICKUP : SelacoActorStatic
{
    default
    {
        +NOGRAVITY;
        +DONTTHRUST;
    }
    states
    {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 A_SETROLL(4);
            VOXE L -1;
            stop;
    }
}

class CANNEDFOOD : PickupableDecoration {
    override void postbeginPlay()
    {
        super.postBeginPlay();
        if(args[0] != 0) {
            frameNum = args[0];
        } else {
            frameNum = random(0,9);
        }
    }

	override void Die (Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
        // Face origin of target
        int velocityBuff;
        if(MeansOfDeath ==  "ExplosiveImpact") {
            velocityBuff = 6;
        }
		if(source || inflictor) 
        {
            if(inflictor) {
                A_FACE(inflictor);
            }
            if(source && !inflictor) {
                A_FACE(source);
            }
        }
        // Fly into opposite direction of target
        [success, canActor] = A_SPAWNITEMEX("CannedFoodProjectile", 0,0,10,frandom(-2,-5) - velocityBuff, 0, random(2,8+velocityBuff), flags:SXF_SETMASTER);
        let cannedFoodProperties = CannedFoodProjectile(canActor);
        if(cannedFoodProperties) 
        {
            cannedFoodProperties.frameNum = frameNum;
        }
        Super.Die(source, inflictor, dmgflags, MeansOfDeath);
    }

    actor canActor;
    bool success;

    default {
        +NOBLOODDECALS
        +SHOOTABLE;
        -NOBLOOD
        tag "$OBJECT_CANNEDFOOD";
        radius 5;
        height 8;
        health 10;
        bloodtype "BulletImpactEffectMetalSmall", "BulletImpactEffectMetalSmall", "BulletImpactEffectMetalSmall";
    }
	states {
		Spawn:  
            TNT1 A 0;
            TNT1 A 0 {
            }
			VOXE A -1 {
                frame = frameNum;
            }
			stop;
        Death:
        Pain:
            TNT1 A 0;
            stop;
	}
}

// Same above, but these are knocked over!
class CANNEDFOOD_FLAT : CANNEDFOOD {

}

// Same above, except flying!
class CannedFoodProjectile : SelacoActor {
    int frameNum;
    default {
        +NOBLOCKMAP;
        +THRUACTORS
        +MISSILE
        +DOOMBOUNCE
        +USEBOUNCESTATE
        gravity 0.7;
        BounceFactor 0.7;
        BounceCount 3;
    }
    states {
        Spawn:
            TNT1 A 0;
            VOXE A 2 {
                A_SETPITCH(pitch+25);
                frame = frameNum;
            }
            loop;
        Bounce:
            TNT1 A 0 {
                A_SPAWNITEMEX("BulletImpactEffectMetalSmallReallyFuckingTinylol");
                A_PLAYSOUND("impact/can", CHAN_AUTO, 1.0, 0, 0.9, pitch:frandom(0.7,0.9));
            }
            goto spawn;
        Death:
            VOXE A -1 {
                A_SPAWNITEMEX("BulletImpactEffectMetalSmallReallyFuckingTinylol");
                A_PLAYSOUND("impact/can", CHAN_AUTO, 1.0, 0, 0.9, pitch:frandom(0.7,0.9));
                frame = frameNum;
                A_SETPITCH(0);
                A_SETANGLE(frandom(0,360));
            }
            stop;
    }
}

// Used exclusively for secrets.
class KEYBOARDGREEN : Keyboard { 
    default {
        tag "$OBJECT_KEYBOARDSECRET";
        +BUDDHA;
    }
}

//TO-DO: MOVE TO THE TOILET CLASS AFTER DEMO
class Urinal : Toilet {
    default {
        +SelacoActor.DisallowGravityManipulation;
        -SelacoActor.AllowGravityManipulation;
        +NOGRAVITY;
        Toilet.DestructionParticleAngle 25;
    }
}


class SodaCanGigantic : SodaCan {

    override void Activate(actor activator) {
        activator.A_PLAYSOUND("items/drink1", CHAN_AUTO, 1.0, pitch:0.8);
        activator.A_SetHealth(activator.getMaxHealth()+100);
        destroy();
    }

    default {
        tag "$OBJECT_MASSIVECAN";
        +BUDDHA;
        height 25;
        radius 25;
        scale 3.8;
        Fooditem.healamount 100;
        FoodItem.calorieCount 950;
    }
    States {
        Active:
        Inactive:
            TNT1 A 0;
        death:
            TNT1 A 70;
            stop;
    }
}

class MetalPipes : SelacoActor {
    int spawnSetting;
    int failChancePipe;
    override void PostBeginPlay() {
        failChancePipe = 255;
    }

	override void die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
        spawnSetting = GetCVar("r_particleintensity");
        int angle;
        float additionalzVelocity = 1.5;
        float additionalyVelocity = 0;
        if(MeansOfDeath == "ExplosiveImpact" || MeansOfDeath == "SniperBullet") {
            angle = 360;
            additionalzVelocity = 3;
            additionalyVelocity = 1;
        }
        for(int x=0;x<=SpawnSetting;x++) {
            failChancePipe-=50;
        }
        for(int x=-3;x<=2;x++) {
             for(int y=0;y<=5;y++) {
                if(random(0,100) <= 25) {
                    A_SPAWNDEFINEDPARTICLE("BulletImpactEffectMetalSmallDefinition", frandom(-30,30), frandom(-20,20), frandom(5,45));
                } 
                A_SpawnItemEx("MetalPipeSingle", xofs:x*4, yofs:0, zofs:y*3+4, xvel:frandom(-6,6), yvel:frandom(-1,1) + frandom(0,additionalyVelocity), zvel:y*additionalzVelocity+frandom(0.1,0.9), angle:random(0,angle), failchance:failChancePipe);
            }
        }
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}


    default {
	    DamageFactor "Gridlock", 10000;
        DamageFactor "ExplosiveImpact", 100000;
        DamageFactor "shotgun", 5;
        DamageFactor "MagnumBullet", 10;
        DamageFactor "SniperBullet", 10;
	    DamageFactor "BulletAlien", 20.0;
	    PainChance "ExplosiveImpact", 255;
	    BloodType "BulletImpactEffectMetalSmall", "BulletImpactEffectMetalSmall", "BulletImpactEffectMetalSmall";
	    PainSound "impact/hardmetal";
        -Selacoactor.DecorativeActor;
        +SelacoActor.SleepWhenIdle;
        -SelacoActor.WakeNearPlayer;
        -SelacoActor.WakeOnTouch;
        +SOLID;
        +SHOOTABLE;
        +NOBLOODDECALS;
        height 25;
        radius 35;
        health 75;
        painchance 255;
        mass 700;
    }
    States {
        Spawn:
            VOXE L -1;
            stop;
        Pain:
            TNT1 A 0 A_PAIN();
            goto spawn;
        Death:  
            TNT1 A 0;
            stop;
    }
}

class MetalPipeSingle : actor {
    mixin  SleepDebugger;

    int firstAngle;
    override void PostBeginPlay() {
        super.PostBeginPlay();
        pitch = random(0,360);
        firstAngle = angle + frandom(-20,20);
    }


    override void tick() {
        super.tick();
        angle = firstangle;
    }

    default {
        +MISSILE
        +DOOMBOUNCE
        +USEBOUNCESTATE
        +INTERPOLATEANGLES
        +THRUACTORS;
        BounceCount 3;
        gravity 0.6;
        BounceFactor 0.6;
        radius 5;
        height 5;
        speed 4;
        scale 0.8;
    }

    states {
        Spawn:
            VOXE L 1;
        Looper:
            VOXE L 1 {
                A_SETPITCH(PITCH+35, SPF_INTERPOLATE);
            }
            loop;
		Bounce:
            TNT1 A 0 {
                for(int x=0;x<=2;x++) {
                    A_SPAWNITEMEX("BodyImpactSmokeTiny", 0, 0, 0, frandom(-1,1), frandom(-1,1), frandom(0.4,1.7));
                }
                A_SPAWNITEMEX("BulletImpactEffectMetalSmallArmor", frandom(-4,4), frandom(-30,30));
            }
            TNT1 A 0 A_PlaySound("impact/heavy/metal",CHAN_AUTO, 0.35, 0, 1.0, false, pitch:1.4);
			TNT1 A 0 A_PlaySound("IMPACT/METALPIPE",CHAN_AUTO, 0.35, 0, 1.0, false, pitch:1.0);
			goto Looper;
        Death:
            TNT1 A 0 {
                angle = firstAngle;
                A_SETPITCH(0);
            }
            TNT1 A 0 A_PlaySound("impact/heavy/metal",CHAN_AUTO, 0.35, 0, 1.0, false, pitch:1.4);
			TNT1 A 0 A_PlaySound("IMPACT/METALPIPE",CHAN_AUTO, 0.35, 0, 1.0, false, pitch:1.0);
            VOXE L 10;
			VOXE L 1 {
                if(getCvar("g_permanentDestruction"))
                {
                    sleepindefinite();
                } else {
                    sleep(540);
                }
            }
            VOXE LLLLLLLLLLLLLLLLLLL 1 A_FADEOUT(0.05, FTF_REMOVE);
            stop;
    }
}

class MetalPipeStandalone : SelacoActorstatic {
    default {
        +NOINTERACTION
        +ROLLSPRITE;
        -SELACOACTOR.SlopeAlignment;
    }
    states {
        Spawn:
            TNT1 A 0;
            VOXE L -1;
            stop;
    }
}

class WIREROLLWHEEL : SelacoActor {

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        wireRollName = "WIREROLL_WIRE";
        wireRollMissileName = "WIREROLL_WIRE_MISSILE";
    }

    string wireRollName;
    string wireRollMissileName;
    int warpHeight;
    default {   
        scale 1;
        radius 25;
        height 30;
        mass 700;
        +SOLID
		+SELACOACTOR.thruplayers;
		+SELACOACTOR.decorativeActor;
        +SHOOTABLE;
        +NOBLOODDECALS
        health 20;
		BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
		PainSound "impact/hardmetal";        
    }

    actor wire;
    bool wireSuccess;
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                [wireSuccess, wire] = A_SPAWNITEMEX(wireRollName, 0, 0, 0, flags:SXF_SETMASTER);
            }
            VOXE L -1;
            stop;
        Death:
            VOXE L 0 {
                if(wire) 
                {
                    A_PLAYSOUND("SCRIPT/BREAKMETALGRATE", CHAN_AUTO, 1.0, 0, 0.9, pitch:frandom(1.25,1.3));
                    A_SpawnProjectile(wireRollMissileName, 4, angle:angle+180);
                    wire.A_STOPSOUND(CHAN_5);
                    wire.destroy();
                }
            }
            VOXE B -1;
    }
}

class WIREROLLWHEEL_EMPTY : WIREROLLWHEEL {
    States {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class WIREROLL_WIRE : Interactable {
    int warpHeight;
    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        warpHeight = 13;
    }
    default {
        tag "$OBJECT_WIREROLL";
        SelacoActor.UseTag "$INTERACT_SPIN";
        radius 20;
        +USESPECIAL;
        +INTERPOLATEANGLES;
        +NOBLOODDECALS;
		+SELACOACTOR.thruplayers;
		+SELACOACTOR.decorativeActor;
        +NOGRAVITY;
        activation THINGSPEC_SWITCH;
    }

    override void tick() {
        super.tick();
        if(master) {
            A_Warp(AAPTR_MASTER, 0, 0, warpHeight, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
        }
    }
    states {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                bUseSpecial = true;
                activationType = THINGSPEC_SWITCH;
            }
            VOXE L -1;
            stop;
        Inactive:
        Active:
            TNT1 A 0 {
                a_playsound("WIREROLL/SPIN", CHAN_5, 1.0, 0, 0.7);
                bUseSpecial = false;
                activationType = THINGSPEC_DEFAULT;
                bPreventSleep = true;
            }
        Roll:
            VOXE ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAABBCCDDAABBCCDDAAABBBCCCDDDDD 1;
            TNTA A 0 { bPreventSleep = false; }
            Goto Spawn;
    }
}

// Bigger variant
class WIREROLLWHEEL_BIG : WIREROLLWHEEL {
    override void tick() {
        super.tick();
        if(master) {
            A_Warp(AAPTR_MASTER, 0, 0, 28, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
        }
    }

    default
    {
        -SelacoActor.thruplayers;
    }

     override void PostBeginPlay()
    {
        super.PostBeginPlay();
        wireRollName = "WIREROLL_WIRE_BIG";
        wireRollMissileName = "WIREROLL_WIRE_BIG_MISSILE";
    }
}

class WIREROLL_WIRE_BIG : WIREROLL_WIRE {
    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        warpHeight = 17;
    }

	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
		//bxFlip = true; // Whoops lol. The death frame is mirrored, now we mirror it to kill the mirror!
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}

    default
    {
        -SelacoActor.thruplayers;
    }

}

class WIREROLL_WIRE_MISSILE : SelacoActor{
    default {
        +MISSILE;
    }
	default {
		radius 5;
		height 5;
		+MISSILE
		+DOOMBOUNCE
		+THRUACTORS
		+USEBOUNCESTATE
        +INTERPOLATEANGLES
		gravity 0.7;
		BounceFactor 0.5;
		BounceCount 2;
		speed 4;
	}
    states {
        Spawn:
            TNT1 A 0;
			TNT1 A 0 A_SETANGLE(random(0,259));
            tnt1 a 0 A_CHANGEVELOCITY(0,0,4);
        Looper:
            VOXE L 3 {
                A_SETANGLE(angle+30);
            }
            loop;
		Bounce:
            TNT1 A 0 {
                EmitDefinition('ShortSparkParticleDefinition', 1.0, 35, pitch:frandom(-60,-120));
                for(int x=0;x<=3;x++) {
                    A_SPAWNITEMEX("BodyImpactSmokeSmall", 0, 0, 0, frandom(-1,1), frandom(-1,1), frandom(0.4,1.7));
                }
            }
			TNT1 A 0 A_PlaySound("impact/metal",CHAN_AUTO, 0.65, 0, 1.0, false, 1.75);
			goto Looper;
        Death:
            TNT1 A 0 A_SPAWNITEMEX("WIREROLL_WIRE_PICKUPABLE");
            stop;
    }
}

class WIREROLL_WIRE_BIG_MISSILE : WIREROLL_WIRE_MISSILE
{
    states
    {
        Death:
            TNT1 A 0 A_SPAWNITEMEX("WIREROLL_WIRE_BIG_PICKUPABLE");
            stop;
    }
}
class WIREROLL_WIRE_PICKUPABLE : PickupableDecoration {
    default {
        tag "$OBJECT_WIREROLL";
        +THRUACTORS
        -SHOOTABLE
        mass 150;
        height 10;
        radius 17;
    }
    states {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class WIREROLL_WIRE_BIG_PICKUPABLE : WIREROLL_WIRE_PICKUPABLE {
    default
    {
        mass 350;
        height 15;
        radius 37;
    }
}

// These are crates that block the path. Have to be moved with a Gravity Manipulator
class HEAVYCRATE : SelacoActor 
{
    default
    {
        +SHOOTABLE
        +SOLID
        +CANPASS
        +NOBLOODDECALS
        -Thruactors
        +BUDDHA
        friction 0.05;
        painchance 255;
        radius 44;
        height 50;
		+SelacoActor.AllowGravityManipulation;
		mass 2500;
		Activation THINGSPEC_SWITCH;
		BloodType "Stacked_Sparks_Lite";
        PainSound "impact/heavycrate";
    }

    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Pain:
            TNT1 A 0 A_PAIN();
            goto spawn;
    }
}

// TODO: Maybe animate the drawers moving forward?
class Toolbox : Interactable  
{
	const SQUEAK_TIMER = 170;
    const PUSHFACTOR_WHEELS = 0.75;
    const PUSHFACTOR_AGAINSTWHEELS = 0.45;
    const PUSH_LIGHT_CHANCE = 3;
	int squekTimerTicks;
    int cooldown;
    bool pushWheelDirection;

	override void tick() 
	{
		super.tick();
        handlePushing();
	}

    void handlePushing()
    {
		if(vel.length() < 0.7 && squekTimerTicks > 30)
		{
			squekTimerTicks = 0;
			A_PLAYSOUND("BARREL/PUSHSTOP", CHAN_6, 0.4, pitch:frandom(1.3,1.5));
		}

		if(isMoving() && vel.length() > 0.3) 
        {

            // Calculate movement direction based on angle
            float sidewaysVelocity = abs((Cos(angle) * (vel.y)) - (Sin(angle) * (vel.x)));
            float forwardVelocity = abs((Sin(angle) * (vel.y)) + (Cos(angle) * (vel.x)));
            
            if(forwardVelocity > sideWaysvelocity)
            {
                pushFactor = PUSHFACTOR_AGAINSTWHEELS;
                pushWheelDirection = false;
            }
            else
            {
                pushFactor = PUSHFACTOR_WHEELS;
                pushWheelDirection = true;
            }

            // Pushed against the direction of the wheel
            if(!pushWheelDirection && level.time > 10)
            {
                cooldown++;
                squekTimerTicks++;
                if(squekTimerTicks >= SQUEAK_TIMER)
                {
                    squekTimerTicks = 0;
                    A_PLAYSOUND("barrel/push", CHAN_5, 0.2, pitch:frandom(1.4,1.6));
                }
                if(cooldown > 1) {
                    string EffectToSpawn;
                    cooldown = 0;

                    if(waterlevel == 0) {
                        EffectToSpawn = "SparksNoFlare";
                        A_Playsound("toolbox/push", CHAN_7, 0.45, 1, 0.8);
                    }
                    if(waterlevel > 0) {
                        EffectToSpawn = "WaterSplashBaseSmallShort";
                        A_Playsound("toolbox/push", CHAN_7, 0.35, 1, 0.8, 0, 0.88);
                    }

                    A_SPAWNITEMEX(EffectToSpawn, 10, 15 ,0);
                    A_SPAWNITEMEX(EffectToSpawn, -10, -15 ,0);
                    A_SPAWNITEMEX(EffectToSpawn, -10, 15 ,0);
                    A_SPAWNITEMEX(EffectToSpawn, 10,-15 ,0);

                    if(random(0,100) <= PUSH_LIGHT_CHANCE)
                    {
                        EmitDefinition('ShortSpark360SmallParticleDefinition', chance:0.75, numTries:15);
                    }
                }   
            }
            // Pushed in the direction of the wheel
            else
            {
                A_PLAYSOUND("movers/chairride", CHAN_7, 1.0, 1, pitch:0.8);
            }
        // Stand Still
		} else 
        {
			A_Stopsound(CHAN_7);
		}
    }

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        // Replace with damaged variant
        if(args[0] == 1)
        {
            A_SpawnItemEX("Toolbox_damaged_1");
            destroy();
        }
    }

    mixin MEDIUM_METAL_PROP;
    default {
        tag "$OBJECT_TOOLBOX";
        SelacoActor.UseTag "$INTERACT_PULL";
        damageFactor "BulletAlien", 7;
        health 25;
        radius 23;
        height 25;
        mass 600;
        pushfactor 0.45;
        Activation THINGSPEC_SWITCH;
        +PUSHABLE
        +USESPECIAL
        Interactable.pullFactor 0.1;
        +SelacoActor.AllowGravityManipulation;
        +SelacoActor.thruDecorations;
        +SHOOTABLE
    }
    states
    {
        Active:
        Spawn:
            VOXE L -1;
            loop;
        Death:
            TNT1 A 0 {
                A_PLAYSOUND("SCRIPT/BREAKMETALGRATE", CHAN_AUTO, 0.6, 0, 0.9, pitch:frandom(1.05,1.15));
                A_SpawnItemEX("Toolbox_damaged_1", 0, 0, 0, -2);
            }
            stop;
    }
}

class Toolbox_damaged_1 : Toolbox
{
    states
    {
        Death:
            TNT1 A 0 {
                A_PLAYSOUND("SCRIPT/BREAKMETALGRATE", CHAN_AUTO, 0.6, 0, 0.9, pitch:frandom(1.05,1.15));
                A_SPAWNITEMEX("toolbox_drawer", 20, 0, 32, frandom(1,2), frandom(-1,1), frandom(0.5,1.9));
                A_SPAWNITEMEX("toolbox_drawer", 20, 0, 32, frandom(7,8), frandom(-1,1), frandom(1.5,2.9));
                A_SpawnItemEX("Toolbox_damaged_2");
            }
            stop;
    }
}
class Toolbox_damaged_2 : Toolbox
{
    states
    {
        Death:
            TNT1 A 0 {
                A_PLAYSOUND("SCRIPT/BREAKMETALGRATE", CHAN_AUTO, 0.6, 0, 0.9, pitch:frandom(1.05,1.15));
                A_SPAWNITEMEX("toolbox_drawer", 20, 0, 32, frandom(1,2), frandom(-3,3), frandom(0.5,1.9));
                A_SPAWNITEMEX("toolbox_drawer", 20, 0, 32, frandom(4,5), frandom(-1,1), frandom(1.5,2.9));
                A_SpawnItemEX("Toolbox_damaged_3");
            }
            stop;
    }
}
class Toolbox_damaged_3 : Toolbox
{
    default
    {
        +BUDDHA;
    }
    states
    {
        Death:
           VOXE L -1;
           stop;
    }
}

class toolbox_drawer : SelacoActor
{

    int ticks;
    override void tick()
    {
        super.tick();
        ticks++;
        if(ticks > 7)
        {
            bThruactors = false;
            bSolid = true;
        }
    }

	override bool canCollideWith(Actor other, bool passive) {
		let stuff = Super.CanCollideWith(other, passive);
		let actor = SelacoActor(other);
        if((actor) && (actor.getClassName() == "toolbox_drawer"))
        {
            return true;
        }
        if((actor) &&  actor.bDecorativeActor)
        {
            return false;
        }
		return stuff;
	}


	static const String ToolList[] =
		{
			"Copperwire",
            "HAMMER",
            "SCREWDRIVER_A",
            "CircuitBoard",
            "SCREWDRIVER_B",
            "SCREWDRIVER_C",
            "PLIER"
	};	

    default {
        +MISSILE;
        radius 7;
        height 4;
        +THRUACTORS;
        +SelacoACtor.thruplayers
        +Doombounce;
        +USEBOUNCESTATE
        BounceFactor 0.5;
        bouncecount 3;
    }
    states
    {
        spawn:
            VOXE L 0;
            TNT1 A 0
            {
                A_SPAWNITEMEX(ToolList[random(0,ToolList.size()-1)], 7, frandom(-10,10), 0, frandom(1,3), frandom(-3,3), frandom(1,2), angle:random(0,360));
                A_SETANGLE(angle+random(-60,60));
            }
        Looper:
            VOXE L 3
            {
                A_SETANGLE(angle+10);
                A_SETPITCH(pitch+35);
                if(vel.z == 0)
                {
                    setStateLabel("death");
                }
            }
            loop;
        Death:
            VOXE L -1 {
                A_SETPITCH(0);
            }
        Bounce:
            TNT1 A 0 {
                A_SPAWNITEMEX("SmokeTrailPieceSmallTight", 0, 0, 0, 0, 0, 1);
                A_PlaySound("impact/metalsmall",CHAN_AUTO, 0.4, 0, 0.9, false, frandom(1.0,1.15));
            }
            goto looper;
    }
}

class Toolbox_drawer_standalone : PickupableDecoration
{
    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        frameNum = random(0,3);
    }
    default {
        tag "$OBJECT_ToolboxDrawer";
        radius 18;
        height 4;
        mass 300;
        +THRUACTORS;
        +SHOOTABLE;
        +SelacoACtor.thruplayers 
        PickupableDecoration.grabSound "OBJECT/PICKUP/DRAWER";
        PickupableDecoration.landingSound "OBJECT/LANDING/DRAWER";
        health 20;
		BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
		PainSound "impact/hardmetal";         
    }
    states
    {
        Spawn:
            VOXE L 0;
            VOXE L -1 {
                frame = frameNum;
            }
            loop;
        Death:
            TNT1 A 0 A_PLAYSOUND("SCRIPT/BREAKMETALGRATE", CHAN_AUTO, 1.0, 0, 0.9, pitch:frandom(1.05,1.15));
            TNT1 A 0 A_SPAWNITEMEX("toolbox_drawer", 0, 0, 4, frandom(2,3), frandom(-3,3), frandom(1.5,2.9));
            stop;
    }
}

class GoldenKeyActor : Interactable  {

    override void activate(actor activator)
    {
        activator.A_GiveInventory("GoldenKey", 1);
        A_PlaySound("KEYOLD/PICKUP", CHAN_AUTO, 1.0, 0, 0);
        destroy();
    }

    default
    {
        //category SelacoDecorations
        +USESPECIAL;
        +NOGRAVITY;
        -SelacoActor.SlopeAlignment;
        Activation THINGSPEC_ACTIVATE;
        radius 30;
        height 25;
        scale 0.4;
        SelacoActor.UseTag "$ACT_PICKUP";
        tag "$OBJECT_GOLDENKEY";
    }
	states {
		Spawn:
            TNT1 A 0;
			VOXE L -1;
			loop;
	}
}

class GoldenKey : Inventory {
	default
	{
		inventory.maxamount 100;
	}
}


class CivilianCarB_DESTROYED : CivilianCarDestroyed
{
    override void spawnHitboxes()
    {
        hitboxesSpawned  = true;
        bNoInteraction = false;
        A_SPAWNITEMEX("CARHITBOX_LOW_BROKEN", 60, -15, 0, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW_BROKEN", 60, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW_BROKEN", 40, -15, 0, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW_BROKEN", 40, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH_BROKEN", 5, -15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH_BROKEN", 5, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH_BROKEN", -40, -15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH_BROKEN", -40, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW_BROKEN", -45, -15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW_BROKEN", -45, 15, flags:SXF_SETMASTER);
        bool dontcare;
        [dontcare, shadow] = A_SPAWNITEMEX("CivilianCarShadow", 0, 0, flags:SXF_SETMASTER);     
    }  
}

class Vehicle_truck : CivilianCar
{

    override void postbeginPlay()
    {
        Super.PostbeginPlay();

        AlignToPlane(self, checkZ: false);
        A_SPAWNITEMEX("CARHITBOX_LOW", 60, -15, 0, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW", 60, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW", 40, -15, 0, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW", 40, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH", 5, -15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH", 5, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH_TRUCK", -40, -15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH_TRUCK", -40, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW", -45, -15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_LOW", -45, 15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH_TRUCK", -60, -15, flags:SXF_SETMASTER);
        A_SPAWNITEMEX("CARHITBOX_HIGH_TRUCK", -60, 15, flags:SXF_SETMASTER);

        bool dontcare;
        [dontcare, shadow] = A_SPAWNITEMEX("CivilianCarShadow", 0, 0, flags:SXF_SETMASTER);        
    }

    default
    {
        CivilianCar.isNormalCar false;
    }

    states
    {
        spawn:
            TNT1 A 0;
            //TNT1 A 0 A_SPAWNITEMEX("CivilianCarShadow", 0, 0, 0);
            VOXE A -1;
            stop;
    }
}

class Vehicle_truck_pizza : Vehicle_truck { }

class CivilianCarShadow : SelacoActor
{
    override void tick()
    {
        super.tick();
        // If master is gone, we no longer need the shadow
        if(!master)
        {
            destroy();
        }
        if(master && pos != (master.pos.xy, master.floorz))
        {
            // Always put the shadow on the ground
            A_WARP(AAPTR_MASTER, master.pos.x, master.pos.y, master.floorZ, angle:master.angle, flags: WARPF_ABSOLUTEPOSITION | WARPF_NOCHECKPOSITION | WARPF_WARPINTERPOLATION);
            angle = master.angle;
            AlignToPlane(self, checkZ: false);
        }

        alpha = 0.8 * (1.0 - ((master.pos.z - master.floorz) / 64.0));
    }
    
    override void postBeginPlay() {
        Super.postBeginPlay();
        AlignToPlane(self, checkZ: false);
    }

    default 
    {
        +SelacoActor.SlopeAlignment;
        -SelacoActor.WakeNearPlayer;
        -SelacoActor.WakeOnPain;
        -SelacoActor.WakeOnTouch;
        RenderStyle "translucent";
        alpha 0.8;
        +NOINTERACTION;
        yscale 1.4;
        xscale 1.1;
    }
    states
    {
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                // We dont want car shadows when it isnt touching the floor.
                if(pos.z != floorz)
                {
                    destroy();
                }
            }
            CSHA A -1;
            stop;
    }
}

class CarRainSoundEmitter : SelacoActor
{

    override void PostBeginPlay()
    {
        super.postbeginPlay();
        // We dont want multiple Car Rain emitters near eachother.
        if(checkProximity(getClassName(), 150, 2))
        {
            destroy();
            return;
        }
        A_PLAYSOUND("ambient/car/rain", CHAN_BODY, 0.55, 1, pitch:1.2);

        let handler = RainHandler.Instance();
        if(handler) handler.rainSoundSpawned(self);
    }

    void stopSound() {
        A_STOPSOUND(CHAN_BODY);
    }

    void startSound() {
        A_STOPSOUND(CHAN_BODY);
        A_PLAYSOUND("ambient/car/rain", CHAN_BODY, 0.55, 1, pitch:1.2);
    }

    states
    {
        Spawn:
            TNT1 A -1;
            stop;
    }
}

class TechPlatform : Interactable
{
    bool isRaised;
    actor activatorActor;

    mixin MEDIUM_METAL_PROP;
    default
    {
        tag "$OBJECT_SCISSORLIFT";
        SelacoActor.UseTag "$INTERACT_RAISE";
        health 100;
        radius 29;
        height 17;
        mass 250;
        +PUSHABLE
        +USESPECIAL
        +SHOOTABLE
        +SOLID
        PainSound "impact/heavycrate";
        Activation THINGSPEC_SWITCH;
    }
    
    override void activate(actor activator)
    {
        activatorActor = activator;
        super.activate(activator);
    }

    override void deactivate(actor deactivator)
    {
        activatorActor = deactivator;
        super.deactivate(deactivator);
    }


    States
    {
        Spawn:
            VOXE A -1
            {
                if(isRaised)
                {
                    frame = 1;
                }
                else
                {
                    frame = 0;
                }
            }
            stop;
        inactive:
        Active:
            TNT1 A 0 
            {
                if(isRaised)
                {
                    if(!(activatorActor is getClass()))
                    {
                        A_PLAYSOUND("SCRIPT/BABYBUTTON", CHAN_AUTO, 0.2);
                        A_PLAYSOUND("TECHPLATFORM/DEACTIVATE", CHAN_5, 1.0);
                    }
                    usetag = "$INTERACT_RAISE";
                    isRaised = false;
                    A_SETSIZE(-1, 17);
                }
                else
                {
                    if(!(activatorActor is getClass()))
                    {
                        A_PLAYSOUND("SCRIPT/BABYBUTTON", CHAN_AUTO, 0.2);
                        A_PLAYSOUND("TECHPLATFORM/ACTIVATE", CHAN_5, 1.0);
                    }
                    usetag = "$INTERACT_LOWER";
                    A_SETSIZE(-1, 31);
                    isRaised = true;
                }
            }
            goto Spawn;
        ForceActive:
            TNT1 A 0
            {
                activate(self);
            }
        Death:
            TNT1 A 0 {
                bUseSpecial = false;
                activationType = THINGSPEC_DEFAULT;
                A_PLAYSOUND("dest/blumet1", CHAN_AUTO, 1.0, 0, pitch:1.20);
                A_SPAWNPROJECTILE("TechPlatform_BrokenPiece", 32, angle:-180, flags:CMF_ABSOLUTEPITCH , pitch:frandom(-40,-75));
                A_SETSIZE(-1, 7);
            }
            VOXE C -1;
            stop;
    }
}

class TechPlatform_BrokenPiece : SelacoActor
{
     default {
        speed 15;
        +MISSILE;
        radius 5;
        height 4;
        +THRUACTORS;
        +SelacoACtor.thruplayers
        +Doombounce;
        +USEBOUNCESTATE
        BounceFactor 0.5;
        SeeSound "impact/metalsmall";
        bouncecount 3;
    }
    states
    {
        spawn:
            VOXE L 0;
        Looper:
            VOXE L 3
            {
                A_SETPITCH(pitch+35);
                if(vel.z == 0)
                {
                    setStateLabel("death");
                }
            }
            loop;
        Death:
            VOXE L -1 {
                A_SETPITCH(0);
            }
        Bounce:
            TNT1 A 0 {
                A_SPAWNITEMEX("SmokeTrailPieceSmallTight", 0, 0, 0, 0, 0, 1);
                A_PlaySound("impact/metalsmall",CHAN_AUTO, 0.4, 0, 0.9, false, frandom(1.0,1.15));
            }
            goto looper;
    }   
}

class WHITEBOARD : SelacoActor
{
    int frameID;
    override void postbeginPlay()
    {
        frameID = random(0,2);
    }
    default {
        -NOBLOOD;
        +SOLID;
        +SELACOACTOR.DecorativeActor;
        +PUSHABLE;
        +NOBLOODDECALS
        health 10;
        radius 25;
        height 55;
        mass 500;
        +SELACOACTOR.allowGravityManipulation;
        +SHOOTABLE;
	    BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
	    PainSound "impact/heavycrate";
    }
    states {
        Spawn:
            TNT1 A 0;
            VOXE A -1{
                frame = frameID;
            }
            loop;
        Death:
            TNT1 A 0 {
                A_PLAYSOUND("impact/hardmetal", CHAN_AUTO, 1.0, 0, 0.7);
                A_PLAYSOUND("impact/hardmetal", CHAN_AUTO, 1.0, 0, 0.7);
                A_PLAYSOUND("impact/hardmetal", CHAN_AUTO, 1.0, 0, 0.7);
                A_SPawnItemEx("Stacked_Sparks_Lite", frandom(-20,20), frandom(-20,20), frandom(0,50));
                for(int x=25;x>0;x--)
                {
                    A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", frandom(-20,20), frandom(-20,20), frandom(0,50));
                }
            }
            TNT1 A 0 A_SPawnItemEx("WHITEBOARD_BROKEN");
            stop;
    }
}
class WHITEBOARD_BROKEN : SelacoActor
{
    default {
        -NOBLOOD;
        +NOBLOODDECALS
        +SHOOTABLE;
        +SELACOACTOR.DecorativeActor;
        +BUDDHA
        +SOLID;
        mass 500;
        radius 25;
        height 40;
	    BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
	    PainSound "impact/heavycrate";
    }
    states {
        Spawn:
            TNT1 A 0;
            VOXE L -1;
    }
}

class HOLOKEYBOARDPROJECTOR : Interactable
{
    actor linkedProjector;
    bool success;
    override void postbeginPlay()
    {
		PlayerPawn pawn=players[0].mo;
		let d = Dawn(pawn);
        if(args[0] == 1)
        {
            deactivate(d);
        } else
        {
            spawnKeyboard();
        }
        super.postBeginPlay();
    }

    void spawnKeyboard()
    {
        [success, linkedProjector] = A_SPAWNITEMEX("HOLOKEYBOARD", 10);
    }

    override void activate(actor activator)
    {
        A_PLAYSOUND("HOLOKEYBOARD/ACTIVATE", CHAN_AUTO, 0.7);
        activationType = THINGSPEC_Deactivate;
        usetag = "$INTERACT_TURNOFF";
        spawnKeyboard();
        super.activate(activator);
    }

    override void deactivate(actor deactivator)
    {
        A_PLAYSOUND("HOLOKEYBOARD/DEACTIVATE", CHAN_AUTO, 0.7);
        usetag = "$INTERACT_TURNON";
        activationType = THINGSPEC_Activate;
        if(linkedProjector)
        {
            linkedProjector.destroy();
        }
        super.deactivate(deactivator);
    }


    default
    {
        tag "$OBJECT_HOLOKEYBOARD";
        SelacoActor.UseTag "$INTERACT_TURNOFF";
        activation THINGSPEC_Deactivate;
        +USESPECIAL;
        +SHOOTABLE;
        +DONTTHRUST;
        -NOBLOODDECALS
        radius 9;
        height 5;
        //-NOBLOOD;
        +SELACOACTOR.DecorativeActor;
        -SelacoActor.WakeNearPlayer;
        -SelacoActor.WakeOnTouch;
        health 5;
	    BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
	    PainSound "impact/heavycrate";
    }
    states
    {
        active:
        Spawn:
            VOXE A -1 { sleepIndefinite(); }
            stop;
        inactive:
            VOXE B -1 { sleepIndefinite(); }
            stop;
        Death:
            TNT1 A 0
            {
                if(linkedProjector)
                {
                    linkedProjector.destroy();
                }
				A_PLAYSOUND("impact/hardmetal", CHAN_AUTO);
				A_PLAYSOUND("destruction/equipmentfailure", CHAN_AUTO);
                A_SPAWNITEMEX("SparkEmberUpward", 0, 0, 5);
                for(int x=0;x<2;x++) {
                    A_SpawnProjectile("circuitboardtiny", random(6,10), angle:random(0,360), CMF_AIMDIRECTION, pitch:frandom(-15,-2));
                }
            }
            stop;
    }
}
class HOLOKEYBOARD : Interactable
{

    override void postBeginPlay()
    {
        super.postBeginPlay();
        A_PLAYSOUND("HOLOKEYBOARD/HUM", CHAN_5, 0.6, 1.1, pitch:1.1);
    }

    override void tick()
    {
        super.tick();
    }
    default
    {
        alpha 0.5;
        scale 0.7;
        radius 6;
        height 2;
        tag "$OBJECT_PROJECTEDKEYBOARD";
        renderstyle "add";
        activation THINGSPEC_DEFAULT;
        +USESPECIAL;
        +NOINTERACTION;
    }
    states
    {
        inactive:
        active:
        Spawn:
            VOXE LLLLLL random(1,2) A_FADEOUT(0.015);
            VOXE LLLLLL random(1,2) A_FADEIN(0.015);
            loop;
    }
}

class CITY_TRASHBIN : SelacoActor{

    override void postbeginPlay()
    {
        super.PostBeginPlay();
        [success, holoGram] = A_SPAWNITEMEX("CITY_TRASHBIN_HOLOGRAM", flags:SXF_SETMASTER);
    }

    override void tick()
    {
        super.tick();
        if(holoGram)
        {
            holoGram.A_Warp(AAPTR_MASTER, zofs:13, flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
        }
    }

    bool isHit;
    mixin MEDIUM_METAL_PROP;
    actor holoGram;
    bool success;

    default
    {
        +BUDDHA
        +SHOOTABLE;
        MaxStepHeight 5;
        Health 5;
        mass 350;
    }
    states {
        Spawn:
            VOXE A -1;
            stop;
        Pain:
            TNT1 A 0
            {
                if(!invoker.isHit)
                {
                    if(holoGram)
                    {
                    holoGram.destroy(); 
                    }
                    for(int x=0;x<50;x++)
                    {
                        A_SPAWNITEMEX("JunkLauncher", frandom(-1,1), frandom(-1,1), frandom(24,30), frandom(0.3,3), frandom(0.3,3), frandom(0.4,2), random(0,360), 0, 180);
                    }
                    invoker.isHit = true;
                }
            }
            VOXE B -1;
    }
}

class CITY_TRASHBIN_HOLOGRAM : SelacoActor
{

    default
    {
        selflighting "4fff2b";
        +NOINTERACTION;
        renderstyle "translucent";
        alpha 0.8;
    }

    states 
    {
        Spawn:
            VOXE A -1 bright;
            stop;
    }

}

class Pasteboard : PickupableDecoration
{
    mixin MEDIUM_METAL_PROP;
    default
    {
        tag "$OBJECT_PASTEBOARD";
        friction 0.4;
        mass 150;
        +SelacoActor.thruplayers
        health 5;
    }
    states
    {
        Putdown:
        Throw:
        Pickup:
        Spawn:
            VOXE L -1;
            stop;
        Xdeath:
        Death:
            TNT1 A 0 A_SpawnProjectile("Pasteboard_shot", 2, 0, flags: CMF_AIMDIRECTION, pitch:frandom(-70,-180));
            TNT1 AAAAA 0 A_SPAWNITEMEX("PaperDustEffect", frandom(-20,20), frandom(-20,20), random(0,20), frandom(0,0.5), 0, frandom(0,0.1), angle:random(0,360));
            TNT1 AAAAA 0 A_SpawnProjectile("PaperPiece", random(5,13), random(-10,10), random (-40, 40), 2, random (60, 180));
            stop;
    }
}

class Pasteboard_shot : SelacoActorDecorationMissile
{
    default 
    {
        speed 6;
    }
}

class BookMedium : magazine_dawn
{
    
    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        if(args[0] == 0)
        {
            frameNum = random(0,17);
        }
        else
        {
            frameNum = args[0];
        }
        assignBookTag();
    }

    void assignBookTag()
    {
        switch(frameNum)
        {
            case 99:
                frameNum = 0;
            case 0:
                setTag("$OBJECT_BOOK_SCIENCE");
                break;
            case 1:
                setTag("$OBJECT_BOOK_ROMAN");
                break;
            case 2:
                setTag("$OBJECT_BOOK_SCIENCE");
                break;
            case 3:
                setTag("$OBJECT_BOOK_SCIENCE");
                break;
            case 4:
            case 5:
                setTag("$OBJECT_BOOK_MANUAL");
                break;
            case 6:
                setTag("$OBJECT_BOOK_HISTORY");
                break;
            case 7:
                setTag("$OBJECT_BOOK_MATH");
                break;
            case 8:
            case 9:
                setTag("$OBJECT_BOOK_MANUAL");
                break;
            case 10:
                setTag("$OBJECT_BOOK_BIOGRAPHY");
                break;
            case 11:
                setTag("$OBJECT_BOOK_MANUAL");
                break;
            case 12:
                setTag("$OBJECT_BOOK_SPACEBRO");
                break;
            case 13:
                setTag("$OBJECT_BOOK_ARCHITECTURE");
                break;
            case 14:
                setTag("$OBJECT_BOOK_MANUAL");
                break;
            case 15:
                setTag("$OBJECT_BOOK_BUILDENGINE");
                break;
             case 16:
                setTag("$OBJECT_BOOK_ROMAN");
                break;               
        }
    }

    default
    {
        +SELACOACTOR.thruplayers
        +SELACOACTOR.decorativeActor;
		PickupableDecoration.grabSound "PCKBOOK";
        PickupableDecoration.dumpsterSound "trashbin/paper";
		PickupableDecoration.landingSound "landing/paper";
		+PickupableDecoration.dumpsterCompatible;
        PickupableDecoration.HoldDistance 30;
        +USESPECIAL;
        +HITSCANTHRU;
        -THRUACTORS;
        +CANPASS
        +SOLID
        +SelacoACtor.EnemyProjectilePassThru;
        -NOBLOOD;
        height 3;
        radius 5;
        deathsound "dest/paper";
        Bloodtype "", "", "";
    }
    states
    {
        Spawn:
            TNT1 A 0;
            VOXE A -1 {
                frame = frameNum;
            }
        XDeath:
        Death:
      		TNT1 AAAAA 0 A_SPAWNITEMEX("PaperDustEffect", frandom(-20,20), frandom(-20,20), random(0,29));
			TNT1 AAAAA 0 A_SpawnProjectile("SmokeTrailPiece", 0, 0, random (0, 60), 2, random (0, 60));
			TNT1 A 0
			{
				emit('BookPaperParticle', 1.0, 25);
			}
            stop;
    }
}

class BookMediumDawnApartment : BookMedium
{
    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        if(args[0] == 0)
        {
            frameNum = random(0,10);
        }
        else
        {
            frameNum = args[0];
        }
        assignBookTag();
    }

    void assignBookTag()
    {
        switch(frameNum)
        {
            case 99:
                frameNum = 0;
            case 0:
                setTag("$OBJECT_BOOK_CHEMISTRY");
                break;
            case 1:
                setTag("$OBJECT_BOOK_ELECTRONICS");
                break;
            case 2:
                setTag("$OBJECT_BOOK_CHEMISTRY");
                break;
            case 3:
                setTag("$OBJECT_BOOK_SCIENCE");
                break;
            case 4:
            case 5:
                setTag("$OBJECT_BOOK_ELECTRONICS");
                break;
            case 6:
                setTag("$OBJECT_BOOK_HISTORY");
                break;
            case 7:
                setTag("$OBJECT_BOOK_SCIENCE");
                break;
            case 8:
            case 9:
                setTag("$OBJECT_BOOK_SCIENCE");
                break;
            case 10:
                setTag("$OBJECT_BOOK_PETKEEPING");
                break;             
        }
    }

    states
    {
          Spawn:
            TNT1 A 0;
            VOXE A -1 {
                frame = frameNum;
            }      
    }
}

class BookMedium_CODE_1 : BookMedium { 
    override void postbeginPlay()
    {
        frameNum = 0;
    }
    default
    {
        +DONTTHRUST
        +NOPAIN;
        +BUDDHA
        tag "$OBJECT_BOOK_MYSTERIOUS";
    }
}
class BookMedium_CODE_2 : BookMedium_CODE_1 { 
    override void postbeginPlay()
    {
        frameNum = 1;
    }
}
class BookMedium_CODE_3 : BookMedium_CODE_1 { 
    override void postbeginPlay()
    {
        frameNum = 2;
    }
}
class BookMedium_CODE_4 : BookMedium_CODE_1 { 
    override void postbeginPlay()
    {
        frameNum = 3;
    }
}
class BookSmall : BookMedium
{
    override void PostBeginPlay()
    {
        super.beginPlay();
        if(args[0] == 0)
        {
            frameNum = random(0,4);
        }
        else
        {
            frameNum = args[0];
        }
        assignBookTag();
    }

    void assignBookTag()
    {
        switch(frameNum)
        {
            case 99:
                frameNum = 0;
            case 0:
                setTag("$OBJECT_BOOK_ARCHAELOGY");
                break;
            case 1:
                setTag("$OBJECT_BOOK_HISTORY");
                break;
            case 2:
                setTag("$OBJECT_BOOK_ROMAN");
                break;
            case 3:
                setTag("$OBJECT_BOOK_SCIENCE");
                break;
            case 4:
                setTag("$OBJECT_BOOK_HISTORY");
                break;
            case 5:
                setTag("$OBJECT_BOOK_BIOGRAPHY");
                break;
        }
    }
}

mixin class PrinterBase
{
    default
    {
        tag "$OBJECT_PRINTER";
        +SHOOTABLE
        +SOLID;
        +NOBLOODDECALS
        friction 0.83;
		PushFactor 0.95;
		SelacoActor.SpecialPushFactor 0.85;
		+SelacoActor.SpecialPushable;
		+SelacoActor.SpecialPushDirectionFix;
        mass 450;
        health 25;
        height 35;
        Painchance 255;
        radius 25;
        BloodType "BulletImpactEffectMetalSmall", "BulletImpactEffectMetalSmall", "BulletImpactEffectMetalSmall";       
    }
    states
    {
        death.explosiveimpact:
            VOXE L -1
            {
                A_SPAWNITEMEX("PRINTER_PIECE_3", 0, -10, 30, frandom(2.5,7.5),0,frandom(3,14), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_4", 0, -10, 30, frandom(2.5,7.5),0,frandom(3,14), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_1", 0, 10, 30, frandom(2.5,7.5),0,frandom(3,14), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_1", 0, 10, 30, frandom(2.5,7.5),0,frandom(3,14), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_2", 0, 10, 30, frandom(2.5,7.5),0,frandom(3,14), angle:random(0,360));
                for(int x=0;x<8;x++)
                {
                    A_SPAWNITEMEX("PRINTER_PIECE_5", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(0.5,7.5),0,frandom(3,17), angle:random(0,360));
                    A_SPAWNITEMEX("PRINTER_PIECE_6", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(0.5,7.5),0,frandom(3,17), angle:random(0,360));                    
                }
            }
        BecomeBroke:
            TNT1 A 0 A_SpawnItemEx("OFFICEPRINTER_BROKEN");
            stop;
    }
}

class OFFICEPRINTER : Interactable
{
    mixin PrinterBase;
    bool isOpened;

    default
    {
        SelacoActor.UseTag "$INTERACT_OPEN";
        +USESPECIAL;
        activation THINGSPEC_SWITCH;
    }
    states
    {
        Spawn:
            VOXE A -1
            {
                if(invoker.isOpened)
                {
                    frame = 1;
                }
            }
            stop;
        Pain:
            TNT1 A 0
            {
                A_PLAYSOUND("DESTRUCTION/SHEETMETAL", chan_auto, 0.8);
            }
            goto spawn;
        Active:
        Inactive:
            TNT1 A 0
            {
                // Printer has not been opened yet
                if(!invoker.isOpened)
                {
                    useTag = StringTable.localize("$ACT_USE");
                    a_playsound("OBJECT/PRINTER/open", chan_auto);
                    invoker.isOpened = true;
                    setStateLabel("Spawn");
                }
            }
            TNT1 A 0 A_PLAYSOUND("OBJECT/PRINTER");
            TNT1 A 0
            {
                bUseSpecial = false;
                activationType = THINGSPEC_DEFAULT;
            }
            VOXE CDEFGHIJJJKJIHGFED 3;
            VOXE B 1;
            TNT1 A 0 
            {
                A_SPAWNITEMEX("PaperPiece", 0, 27, 32);
            }
            TNT1 A 0
            {
                bUseSpecial = true;
                activationType = THINGSPEC_SWITCH;
            }
            goto spawn;
        RepeatForever:
            VOXE BBBBBB 0 A_SPAWNITEMEX("PaperPiece", frandom(-3,3), frandom(24,29), frandom(28,32));
            TNT1 A 0 A_PLAYSOUND("dest/paper", CHAN_AUTO, 0.25);
            VOXE B 1;
            loop;
        Death:
            TNT1 A 0
            {
				for(int x=0;x<6;x++)
				{
                    A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", frandom(-15,15), frandom(-15,15), frandom(-10, 25));
				}  
                for(int x=0;x<25;x++)
                {
                    A_SpawnItemEx("GunFireSmokeMassive", frandom(5,15), frandom(-3,3), frandom(20,36), frandom(0.2,0.8), 0, frandom(0,1), angle:random(0,360));
                }
                for(int x=0;x<=2;x++)
                {
                    A_PLAYSOUND("impact/metalsmall", CHAN_AUTO, 1.0, 0, 0.7);
                }              
            }
            TNT1 A 0
            {
                A_SPAWNITEMEX("PRINTER_PIECE_2", 0, -10, 30, frandom(2.5,4.5),0,frandom(3,8), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_1", 0, 10, 30, frandom(2.5,4.5),0,frandom(3,8), angle:random(0,360));
            }
            goto becomeBroke;
    }
}

class OFFICEPRINTER_BROKEN : SelacoActor
{
    mixin PrinterBase;
    default
    {
        height 34;
        health 45;
    }
    states
    {
        Spawn:
            TNT1 A 0;
            VOXE LLLLLL random(10,45)
            {
                A_SpawnItemEx("GunFireSmokeMassive", frandom(-5,5), frandom(-15,15), 32, 0, frandom(0.2,0.5), 1);
			    A_SpawnItemEx("GunFireSmokeMassive", frandom(-5,5), frandom(-15,15), 32, 0, frandom(0.2,0.5), 1);
				A_SpawnProjectile ("SparkEmberUpward", 32, frandom(-15,15), random (0, 70), 2, random (0, 190));
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", frandom(-6,6),frandom(-15,15),35);
            }
            VOXE L -1;
            stop;
        Death.Shotgun:
        Death.ExplosiveImpact:
            TNT1 A 0 {
                A_SPAWNITEMEX("PRINTER_PIECE_3", 0, -10, 30, frandom(2.5,5.5),0,frandom(5,12), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_4", 0, -10, 30, frandom(2.5,5.5),0,frandom(5,12), angle:random(0,360));
                //A_SPAWNITEMEX("PRINTER_PIECE_1", 0, 10, 30, frandom(2.5,5.5),0,frandom(3,8), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_5", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(2.5,7.5),0,frandom(7,12), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_6", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(2.5,7.5),0,frandom(7,12), angle:random(0,360)); 
                A_SPAWNITEMEX("PRINTER_PIECE_5", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(2.5,7.5),0,frandom(7,12), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_6", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(2.5,7.5),0,frandom(7,12), angle:random(0,360));                    
            }
            goto RealDeath;
        Death:
            TNT1 A 0 {
                A_SPAWNITEMEX("PRINTER_PIECE_3", 0, -10, 30, frandom(2.5,5.5),0,frandom(3,8), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_4", 0, -10, 30, frandom(2.5,5.5),0,frandom(3,8), angle:random(0,360));
                //A_SPAWNITEMEX("PRINTER_PIECE_1", 0, 10, 30, frandom(2.5,5.5),0,frandom(3,8), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_5", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(0.5,5.5),0,frandom(3,8), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_6", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(0.5,5.5),0,frandom(3,8), angle:random(0,360)); 
                A_SPAWNITEMEX("PRINTER_PIECE_5", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(0.5,5.5),0,frandom(3,8), angle:random(0,360));
                A_SPAWNITEMEX("PRINTER_PIECE_6", frandom(5,15), frandom(-3,3), frandom(20,26), frandom(0.5,5.5),0,frandom(3,8), angle:random(0,360));                    
            }
        RealDeath:
            TNT1 A 0
            {
                a_playsound("OBJECT/PRINTER/BREAK", chan_auto, 1.0, 0, 0.6, pitch:0.85);
                for(int x=0;x<25;x++)
                {
                    A_SpawnItemEx("GunFireSmokeMassive", frandom(5,15), frandom(-3,3), frandom(20,45), frandom(0.2,0.8), 0, frandom(0,1), angle:random(0,360));
                }
                for(int x=4;x>0;x--)
                {
                    A_SPAWNITEMEX("SmallExplosionNoSound", frandom(-3,5), frandom(-10,10), frandom(5,25));
                }
                A_SPAWNITEMEX('ScatterSmoke', 0, 0, 25);
                A_SpawnProjectile ("SparkEmberUpward", 32, -3, random (0, 70), 2, random (0, 190));
                A_SPAWNITEMEX("OFFICEPRINTER_BROKEN_2");
            }
            stop;
    }
}

class OFFICEPRINTER_BROKEN_2 : SelacoActor
{
    mixin PrinterBase;
    default
    {
        mass 1200;
        height 22;
        +BUDDHA
    }
    states
    {
        Spawn:
            VOXE LLLLLLLLLLLLLLL random(10,35)
            {
                A_SpawnItemEx("GunFireSmokeMassive", 0, 0, 16, 0, frandom(0.2,0.5), 1);
			    A_SpawnItemEx("GunFireSmokeMassive", 0, 0, 16, 0, frandom(0.2,0.5), 1);
				A_SpawnProjectile ("SparkEmberUpward", 19, frandom(-10,10), random (0, 25), 2, random (0, 190));
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", frandom(-6,6),frandom(-6,6),16);
            }
            VOXE L -1;
    }
}

class PRINTER_PIECE_1 : SelacoActorDecorationMissile { 
    default
    {
        SeeSound "impact/metalsmall";
    }
}
class PRINTER_PIECE_2 : PRINTER_PIECE_1 { }
class PRINTER_PIECE_3 : PRINTER_PIECE_1 { }
class PRINTER_PIECE_4 : PRINTER_PIECE_1 { }
class PRINTER_PIECE_5 : PRINTER_PIECE_1 { 
    default
    {
        seeSound "bounce/plastic";
    }
}
class PRINTER_PIECE_6 : PRINTER_PIECE_1 { 
    default
    {
        seeSound "bounce/plastic";
    }
}
class PrinterFrames : SelacoActor
{
    default
    {
        scale 0.97;
        SelacoActor.sleepDistance 0;
        +NOINTERACTION;
        +FLATSPRITE;
        

    }
    states
    {
        Spawn:
            PRSC ABCDEFGHIJIHGFEDCBA 3 BRIGHT;
            stop;
    }
}


class COFFEECUP : PickupableDecoration
{
	actor cupActor;
	bool success;
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		frameNum = random(0,1);
        if(random(0,2))
        {
            A_SPAWNITEMEX("NapkinBrown", frandom(-0.2,0.2), frandom(-0.2,0.2), angle:random(0,360));
        }
	}

	default
	{
        mass 125;
		+SHOOTABLE;
        +SelacoACtor.decorativeActor;
        +SelacoActor.thruplayers;
		health 10;
		radius 6;
		height 6;
		PickupableDecoration.FallDamageThreshold FALLTHRESHOLD_WEAK;
	}

	states
	{
		Spawn:
			TNT1 A 0;
			VOXE A -1
			{
				frame = frameNum;
			}
		Death.FallDamage:
			TNT1 A 0 
			{
                A_PlaySound("script/watersplash", CHAN_AUTO, 1.0, 0, 0.9, pitch:frandom(1.15,1.25));
				for(int x=0;x<3;x++)
				{
					A_SpawnItemEx("WaterSplashBaseSmallShort", 0, 0, 4, frandom(-2,2), frandom(-2,2), 2);
				}
				A_SPAWNITEMEX("WaterSplashEffect", 0, 0, 0);
				A_PLAYSOUND("bounce/plasticsmall", CHAN_AUTO);
				[success, cupActor] = A_SPAWNITEMEX("COFFEECUP_BROKEN");
				if(cupActor)
				{
					COFFEECUP_BROKEN(cupActor).frameID = frameNum;
				}
                destroy();
			}
			stop;
		Death:
			TNT1 A 0
			{
                A_PlaySound("script/watersplash", CHAN_AUTO, 1.0, 0, 0.9, pitch:frandom(1.15,1.25));
                for(int x=0;x<4;x++)
                {
                    A_SpawnItemEx("WaterSplashBaseSmallShort", 0, 0, 4, frandom(-2,2), frandom(-2,2), 2);
                }
                A_SPAWNITEMEX("WaterSplashEffect", 0, 0, 0);
                A_PLAYSOUND("bounce/plasticsmall", CHAN_AUTO);
                cupActor = A_SpawnProjectile("COFFEECUP_BROKEN_SHOT", 10, angle:-180, flags:CMF_ABSOLUTEPITCH , pitch:frandom(-40,-75));
                if(cupActor)
                {
                    COFFEECUP_BROKEN_SHOT(cupActor).frameID = frameNum;
                }	
			}
			stop;
	
	}
}

class COFFEECUP_BROKEN : SelacoActorStatic
{
	int frameID;
	states
	{
		Spawn:
			TNT1 A 0;
			VOXE A -1
			{
				frame = frameID;
			}
	}
}

class COFFEECUP_BROKEN_SHOT	: SelacoActorDecorationMissile
{

	int frameID;
	default
	{
        speed 8;
		Seesound "bounce/plasticsmall";
	}
    states {
        Spawn:
            VOXE A 0;
        Looper:
            VOXE A 2
            {
				frame = frameID;
                A_SETPITCH(pitch+35);
            }
            loop;
		Bounce:
            TNT1 A 0 {
                for(int x=0;x<1;x++)
                {
                    A_SpawnItemEx("WaterSplashBaseSmallShortTight", 0, 0, 4, frandom(-2,2), frandom(-2,2), 2);
                }
            }
			TNT1 A 0 A_PlaySound("bounce/plasticsmall",CHAN_AUTO, 0.25, 0, 1.0, false, 1.75);
			goto Looper;
        Death:
            VOXE L 30
            {
				frame = frameID;
                A_SETPITCH(0);
            }
            VOXE L -1
            {
				frame = frameID;
                SleepIndefinite();
                A_SETPITCH(0);
            }
            stop;
    }
}

class Mouse : Interactable
{

    override void deactivate(actor deactivator)
    {
        activate(deactivator);
    }

    override void activate(actor activator)
    {
        A_PLAYSOUND("OBJECT/MOUSECLICK", CHAN_AUTO, pitch:frandom(0.96,1.04));
        totalClicks++;
        switch(totalClicks)
        {
            case 50:
                usetag = "$ACT_PLEASESTOP";
                break;
            case 69: // I wanted this to be 65. Cockatrice made me do it.
                A_SpawnItemEX("SmallExplosion");
                A_SPAWNITEMEX("Mouse_broken");
                destroy();
        }       
    }

    int totalClicks;
	default
	{
        tag "$OBJECT_MOUSE";
		+SelacoActor.thruplayers;
        -SelacoActor.WakeNearPlayer;
        -SelacoActor.WakeOnTouch;
        +SelacoActor.PreventSleep;  // We always sleep, no reason to handle this automatically
        +SelacoActor.DecorativeActor;
		+SelacoActor.AllowRandomizerReplacement;
        
		ThruBits THRUBITS_DESK_STATICS;		// Will not collide with any other static desk objects
		+ALLOWTHRUBITS;

		+SHOOTABLE;
        +USESPECIAL;
        activation THINGSPEC_SWITCH;
        BloodType "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary";
        health 10;
		radius 5;
		height 5;
	}
	states
	{
        Active:
        Inactive:
		Spawn:
            TNT1 A 0;
			VOXE L 5 { if(level.mapTime > 5) sleepIndefinite(); }
			loop;
        Death:
            TNT1 A 0 A_SpawnProjectile("Mouse_broken_projectile", 10, angle:-180, flags:CMF_ABSOLUTEPITCH , pitch:frandom(-40,-75));
            stop;
	}
}

class Mouse_broken: SelacoActorStatic
{
    states
    {
        spawn: 
            VOXE L -1;
            stop;
    }
}

class Mouse_broken_projectile: SelacoActorDecorationMissile
{
    default
    {
        radius 8;
        speed 3;
    }
}

class AcidContainer : SelacoActor
{
    
    mixin MEDIUM_METAL_PROP;
    default
    {
        damageType "Acid";
        +SHOOTABLE
        +canpass
        height 37;
        radius 20;
        health 60;
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Death:
            TNT1 A 0
            {
                A_Explode(500, 220);
                for(int i=0;i<80;i++) {
                    A_SPAWNITEMEX("LargeGlassParticle1", random(-3, 3), random(-9, 9), random(3, 40), frandom(-8, 8), frandom(-8, 8), frandom(1, 7));
                }
                A_StartSound("destruction/glassbreak", volume: 1.0, attenuation: 0.9);
                A_PlaySound("EXPLOSION/ACID1", CHAN_AUTO, 0.9, 0, 0.8, pitch:1.2);
                if(getCvar("g_Screenshake") >= 1 && CheckProximity("Dawn", 400.0, 1)) {
                    A_QuakeEx(8, 8, 8, 9, 0, 700, 0, 0, 0, 0, 0, 0, 5, 5, 5);
                }
                A_SpawnItem("BaseShockwave");
                spawnLight(370, 900, 90, 90, -1,overbright:0, divisionSpeed:1.1);
            }
			TNT1 AAAAAAAAA 0 {
				A_SPAWNITEMEX ("AcidsplosionLong", frandom(-46, 46),frandom(-46, 46), frandom(0,45));
			}
			TNT1 A 0 A_SpawnItemEx ("BaseAcidExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 AAAAAAAAAAAAAAAAAAA 0 A_SPAWNITEMEX("AcidSplash", frandom(-30, 30),frandom(-30, 30), frandom(0, 2), frandom(-3,3), frandom(-3,3), frandom(5,9));
            TNT1 A 0 A_SPAWNITEMEX("AcidContainer_piece",0,0,24, frandom(5,7), 0, frandom(3,5), angle:random(0,360));
            VOXE B 3;
            TNT1 A 0 {
                if(CheckProximity("Dawn", 700.0, 1)) {
                    ACS_NamedExecuteAlways("SpawnHudShake", 0, 10, 10, 35);
                    Dawn.ShakeWeapon(10,10);
                }
                if(getCvar("g_Screenshake") >= 1) {
                    A_QuakeEx(1, 1, 1, 25, 0, 700, 0, 0, 0, 0, 0, 0, 2, 2, 4);
                }
            }
            VOXE B -1;
            stop;
    }
}

class AcidContainer_piece : SelacoActorDecorationMissile
{
    default 
    {
        speed 8;
    }
    states
    {

    }
}

class AmmoMagazine_Decoration : SelacoActorStatic
{
    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class AmmoMagazine_stacked_Decoration : AmmoMagazine_Decoration
{
 
}

class PERFUME_A : GenericPerfumeBottle
{

}
class PERFUME_B : PERFUME_A
{
    
}
class PERFUME_C : PERFUME_A
{
    
}
class PERFUME_D : PERFUME_A
{
    
}
class PERFUME_E : PERFUME_A
{
    
}
class PERFUME_F : PERFUME_A
{
    
}

class Datapad_Decoration : PickupableDecoration {
    default
    {
    	tag "$OBJECT_DATAPAD";
        health 10;
        scale 1.0;
        radius 7;
        height 5;
        mass 249;
        +Selacoactor.decorativeActor;
        +NOBLOOD
        +SHOOTABLE
    }
	states {
		Spawn:
			TNT1 A 0;
			VOXE L -1;
			stop;
		Death:
            TNT1 A 0
            {
                for(int x=0;x<4;x++) {
                    A_SpawnProjectile("circuitboardsmall", random(6,10), angle:random(0,360), CMF_AIMDIRECTION, pitch:frandom(-170,-90));
                }
                A_SPAWNITEMEX("SmallExplosionNoSound", 0, 0, 5);
            }
			TNT1 A 0 A_SpawnItemEx ("SparkEmberUpward", 0, 0, 5);
			stop;
	}
}

class ARCADE_CABINET : Interactable
{
    int frameID;

    override void postBeginPlay()
    {
        super.postBeginPlay();
        frameID = args[0];
    }
    default
    {
        +SHOOTABLE;
        +SOLID
        mass 1000;
        health 15;
        radius 25;
        height 60;
	    BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
	    PainSound "impact/heavycrate";
        -SelacoActor.AllowGravityManipulation;
        +SelacoActor.DisallowGravityManipulation;
    }
    states
    {
        spawn:
            TNT1 A 0;
            VOXE L -1
            {
                frame = frameID;
            }
            stop;
        death:
            TNT1 A 0 
            {
                actor arcadeActor;
                bool success;
                A_PLAYSOUND("impact/hardmetal", CHAN_AUTO);
                 A_PLAYSOUND("destruction/equipmentfailure", CHAN_AUTO);
				A_PLAYSOUND("Dest/snap", chan_auto);
				for(int x=1;x<getCvar("r_ParticleIntensity");x++) {
                    A_SpawnProjectile("circuitboard", random(20,32), angle:random(0,360), CMF_AIMDIRECTION, pitch:frandom(-80,-170));
                }
				A_SpawnProjectile("ComputerMonitorPiece2", random(0,0), 0, frandom(0, 360));
				A_SpawnProjectile("ComputerMonitorPiece2", random(0,32), 0, frandom(0, 360));
				A_SpawnProjectile("ComputerMonitorPiece3", random(0,32), 0, frandom(0, 360));
				A_SpawnProjectile("ComputerMonitorPiece3", random(0,32), 0, frandom(0, 360));
                [success, arcadeActor] = A_SPAWNITEMEX("ARCADE_CABINET_DESTROYED");
                if(arcadeActor)
                {
                    ARCADE_CABINET_DESTROYED(arcadeActor).frameID = frameID;
                }
            }
            stop;
    }
}

class ARCADE_CABINET_DESTROYED : SELACOACTOR
{
    int frameID;
    default
    {
        +BUDDHA
        +SOLID
	    BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
	    PainSound "impact/heavycrate";
        radius 20;
        height 60;
    }
    states
    {
        Spawn: 
            TNT1 A 0;
            TNT1 A 0 A_SETANGLE(angle + random(-10,10));
            VOXE AAAAAAAAAAAAAAAAAA random(15,45) 
            {
                frame = frameID;
				A_SpawnItemEx("GunFireSmokeMassive", frandom(-1*radius+7, radius+7), 0, frandom(0,height-5), 0, 0, 1);
				A_SpawnItemEx("GunFireSmokeMassive", frandom(-1*radius+7, radius+7), 0, frandom(0,height-5), 0, 1, 1, angle:random(0,360));
				A_SPAWNDEFINEDPARTICLE("BulletImpactEffectMetalSmallDefinition", frandom(-1*radius+3, radius+3), 0, frandom(5,height-5), 0, 1, 1, angle:random(0,360));
				A_SpawnProjectile ("SparkEmberUpward", frandom(0,height-5), frandom(-1*radius+7, radius+7), random (0, 70), 2, random (0, 190));
			}
            VOXE A -1
            {
                frame = frameID;
            }
            stop;
    }
}

class NeonSignHeart : Interactable
{
    default
    {
        SelacoActor.SleepDistance 2048;
        tag "$OBJECT_NEONSIGN";
        SelacoActor.UseTag "$INTERACT_TURNOFF";
        renderstyle "translucent";
        +NOGRAVITY
        +DONTTHRUST
        +USESPECIAL
        activation THINGSPEC_SWITCH;
        radius 40;
        height 40;
    }

    states
    {
        spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                A_PLAYSOUND("ambient/neonhum", CHAN_5, 1.0, 1);
            }
        Bootup:
            VOXE AAA 6;
        looper:  
            TNT1 A 0;
            VOXE BCDEEEDCB 6;
            goto bootup;
        active:
            TNT1 A 0
            {
                A_STOPSOUND(CHAN_5);
                a_playsound("NEON/ON", chan_6, 0.6);
                usetag = "$INTERACT_TURNON";
            }
            VOXE A -1;
            loop;
        Inactive:
            TNT1 A 0
            {
                a_playsound("NEON/OFF", chan_6, 0.6);
                A_PLAYSOUND("ambient/neonhum", CHAN_5, 1.0, 1);
                usetag = "$INTERACT_TURNOFF";
            }
            goto looper;
    }
}

class PlantPot : PickupableDecoration
{

    const CONNECTION_RANGE = 10; // How close should a plant be before it connects with a pot?

    array<MasterPlant> connectedPlants;
    int aliveTime;

    override void tick()
    {
        super.tick();
        updateChildPlants();

        // We have to give plants time to spawn in, so there's a short delay before the connections happen.
        if(aliveTime == 1)
        {
            connectWithPlants();
        }
        if(aliveTime <= 1)
        {
            aliveTime++;
        }
    }

    void connectWithPlants()
    {
         // Find a nearby plant to connect with.
		ThinkerIterator it = ThinkerIterator.Create("MasterPlant");
		MasterPlant plantActor = MasterPlant(it.Next());
		for (; plantActor; plantActor = MasterPlant(it.Next())) 
        {
			if(distance2D(plantActor) < CONNECTION_RANGE)
            {
                plantActor.master = self;
                plantActor.bDontThrust = true;
                plantActor.bNoGravity = true;
                plantActor.bAllowGravityManipulation = false;
                plantActor.bDisallowGravityManipulation = true;
                updateChildPlants();
                connectedPlants.push(plantActor);
            }
        }
        bPreventSleep = false;       
    }

    // Update plants that are connected to this pot.
    void updateChildPlants()
    {
        for(int x=0;x<connectedPlants.size();x++)
        {
            if(connectedPlants[x])
            {
                connectedPlants[x].A_Warp(AAPTR_MASTER, 0, 0, height-4, 0, WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_NOCHECKPOSITION);
            }
        }
    }

    void killChildPlants()
    {
        for(int x=0;x<connectedPlants.size();x++)
        {
            if(connectedPlants[x])
            {
                connectedPlants[x].bPreventSleep = true;
                connectedPlants[x].setStateLabel("pain.PotMurder");
            }
        }       
    }

    default
    {
        tag "$OBJECT_PLANTPOT";
        SelacoActor.sleepDistance 128;
        +SELACOACTOR.preventSleep;
        +SELACOACTOR.DecorativeActor;
        +SelacoActor.ThruPlayers;
        +SHOOTABLE;
        -NOBLOOD;
        mass 300;
        friction 0.8;
        height 12;
        painchance 256;
		PickupableDecoration.FallDamageThreshold FALLTHRESHOLD_WEAK;
        BloodType "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary";
        Health 10;
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Death:
			TNT1 A 0 
            {
                bPreventSleep = true;
                killChildPlants();
                A_SPAWNITEMEX("DirtDecalTiny");
                A_SpawnDefinedParticle("BulletImpactEffectPlasticStationaryDefinition");
				EmitDefinition("PorcelaiBrownDefinition", chance:1.0, numTries:35);
                for(int x=0;x<6;x++)
                {
                    A_SPAWNITEMEX("SpawnFootstepDirtCloud", frandom(-8,8), frandom(-8,8),frandom(0,5));
                }
                A_playSound("destruction/ceramic", CHAN_5, 0.7, pitch:frandom(0.7,0.8));
			}
            stop;
    }
}

class TISSUEBOX : PickupableDecoration
{
    default
    {
        radius 10;
        height 10;
        health 10;
        mass 240;
        +SELACOACTOR.ThruPlayers;
        +SELACOACTOR.DecorativeActor;
		+BloodSplatter
		-NOBLOOD
        BounceSound "impact/box";
		BloodType "Cardboard_Chunk", "Cardboard_Chunk", "Cardboard_Chunk";
        PickupableDecoration.grabSound "landing/cardboard";
        PickupableDecoration.landingSound "landing/cardboard";
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Death:
            TNT1 A 0
            {
                A_SPAWNITEMEX("Cardboard_piece_1_RED", frandom(-2,2), frandom(-2,2), 3, frandom(-3,3), frandom(-3,3), frandom(2,8));
                A_SPAWNITEMEX("Cardboard_piece_2_RED", frandom(-2,2), frandom(-2,2), 3, frandom(-3,3), frandom(-3,3), frandom(2,8));
                A_SPAWNITEMEX("Cardboard_piece_3_RED", frandom(-2,2), frandom(-2,2), 3, frandom(-3,3), frandom(-3,3), frandom(2,8));
                A_SPAWNITEMEX("Cardboard_piece_4_RED", frandom(-2,2), frandom(-2,2), 3, frandom(-3,3), frandom(-3,3), frandom(2,8));
            }
			TNT1 AAA 0 {
				A_SPAWNITEMEX("Cardboard_Chunk", frandom(-20,20), frandom(-20,20),frandom(0,30));
			}
            TNT1 A 0 A_PLAYSOUND("dest/cardboardbreak", CHAN_AUTO, 1.0, 0, 0.7, 0, frandom(1.3,1.5));
            stop;
    }
}

class FORSALE_SIGN : DecorationObject
{

    override void postBeginPlay()
    {
        super.postBeginPlay();
		// Adjust hitbox based on the new scale
		A_SETSIZE(radius*scale.x, height*scale.y);
    }

    default
    {
        +NOGRAVITY
        +DONTTHRUST;
        +SHOOTABLE;
        +SELACOACTOR.ThruPlayers;
        -MoveWithSector
        -NOBLOOD
        +NOBLOODDECALS
        radius 30;
        height 15;
        health 25;
        mass 10000;
        -USESPECIAL
        activation THINGSPEC_DEFAULT;
	    BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
	    PainSound "impact/heavycrate";
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Death:
            TNT1 AAAAAAAAAA 0
            {
                A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-16, 16),frandom(10, 48),frandom(-15, 35));
			    A_SpawnItemEx("PlasmaPuffTaserSmaller", frandom(-16, 16),frandom(10, 48),frandom(-15, 35));
            }
            VOXE A 0
            {
                actor pieceActor;
                bool succ;
                A_PLAYSOUND("dest/JunctionBox", CHAN_AUTO, 0.6, pitch:frandom(1.1,1.25));
                [succ, pieceActor] = A_SPAWNITEMEX("FORSALE_SIGN_PIECE", 5, 10, 0, 4, 0, 2);
                if(pieceActor)
                {
                    pieceActor.scale = scale;
                }
                bNoInteraction = true;
                bNoGravity = true;
            }
            VOXE AAAAAAAAAAAAAA random(25,35)
            {
                A_SPAWNITEMEX("Sparks", 5, 0, 25);
                A_SPAWNDEFINEDPARTICLE("BulletImpactEffectMetalSmallDefinition", 5,frandom(25,45), random(-6,8));
                A_SPAWNDEFINEDPARTICLE("BulletImpactEffectMetalSmallDefinition", 5,frandom(25,45), random(-6,8));
                A_SpawnProjectile ("SparkEmberUpward", 25, -3, random (0, 70), 2, random (0, 190));
            }
            stop;
    }
}

class FORSALE_SIGN_PIECE : SelacoActorDecorationMissile
{

}

class PLASTIC_CRATE : PickupableDecoration
{
    
	static const String plasticChunks[] =
		{
			"PLASTIC_CRATE_CHUNK_LEFT",
			"PLASTIC_CRATE_CHUNK_LEFT",
			"PLASTIC_CRATE_CHUNK_RIGHT",
            "PLASTIC_CRATE_CHUNK_RIGHT"
	};	

    void destroyCrate()
    {
        actor plasticChunk;
        bool success;

        A_PLAYSOUND("PLASTIC/CRATE/DESTROY", CHAN_AUTO, 0.65, pitch:frandom(1.0,1.3));

        for(int x=0;x<5;x++)
        {
            A_SpawnDefinedParticle("BulletImpactEffectPlasticStationaryDefinition", frandom(-15,15), frandom(-15,15), frandom(0,8));
        }
        for(int x=0;x<plasticChunks.size();x++)
        {
            [success, plasticChunk] = A_SPAWNITEMEX(plasticChunks[x], frandom(-10,10), frandom(-10,10), frandom(1,4), frandom(1,4), 0, frandom(3,9), angle:(x*90)+frandom(-5,5));
            if(plasticChunk)
            {
                PLASTIC_CRATE_CHUNK_LEFT(plasticChunk).frameNum = frameNum;
                if(hasSalmon)   
                {
                    frameNum = 4;  
                    spawnSalmon();
                }
                if(hasMelon)    
                { 
                    spawnMelonJuice();
                    frameNum = 2;  
                }
                if(hasFlour)    
                { 
                    spawnFlour();
                    frameNum = 2;  
                }
            }
        }
    }

    bool hasFlour, hasSalmon, hasMelon;

    void spawnSalmon()
    {
        A_PLAYSOUND("GIB/STOMP", CHAN_AUTO, 0.1, pitch:frandom(1.3,1.5));
        for(int x=0;x<9;x++)
        {
            actor paintColor;
            bool success2;
            [success2, paintColor] = A_SPAWNITEMEX("PaintSplatterBase",frandom(-4,4), frandom(8,-8), frandom(2,height), frandom(-2,2), frandom(-2,2), frandom(0,4));
            if(paintColor)
            {
                PaintSplatterBase(paintColor).A_SETTRANSLATION("RedPaint");
            }
        }
    }

    void spawnMelonJuice()
    {
        A_PLAYSOUND("GIB/STOMP", CHAN_AUTO, 0.2, pitch:frandom(1.3,1.5));
        for(int x=0;x<3;x++)
        {
            actor paintColor;
            bool success2;
            [success2, paintColor] = A_SPAWNITEMEX("PaintSplatterBase",frandom(-4,4), frandom(8,-8), frandom(2,height), frandom(-2,2), frandom(-2,2), frandom(0,4));
            if(paintColor)
            {
                PaintSplatterBase(paintColor).A_SETTRANSLATION("RedPaint");
            }
        }
        for(int x=0;x<1;x++)
        {
			A_SPAWNITEMEX("WaterMelonChunk_1", 7, 7, 3, frandom(1,6), 0, frandom(4,9), angle:frandom(35,65));
			A_SPAWNITEMEX("WaterMelonChunk_2", 7, -7, 3, frandom(1,6), 0, frandom(4,9), angle:frandom(65,175));
			A_SPAWNITEMEX("WaterMelonChunk_3", -7, 7, 3, frandom(1,6), 0, frandom(4,9), angle:frandom(190,284));
			A_SPAWNITEMEX("WaterMelonChunk_4", -7, -7, 3, frandom(1,6), 0, frandom(4,9), angle:frandom(285,350));
        }
    }

    void spawnFlour()
    {
        for(int x=0;x<7;x++)
        {
            A_SPAWNITEMex ("EXTINGUISHERSMOKESMALL", random(0, 15), frandom(-15,15), random(0, 25), frandom(0.3, 0.5), frandom(0.2,0.3), 0, frandom(0,360));
        }
        for(int x=0;x<100;x++)
        {
            A_SpawnItemEx("saltparticle", frandom(-2, 2), frandom(-2,2), frandom(4,5), frandom(-3, 3), frandom(-3,3), frandom(0.1,6));
        }
    }

    default
    {
        -NoBlood;
        health 32;
        height 14;
        painchance 256;
        painSound "impact/breakable";
        tag "$OBJECT_PLASTIC_CRATE";
        mass 240;
		bloodtype "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary", "BulletImpactEffectPlasticStationary";
    }

    override void postbeginPlay()
    {
        super.postBeginPlay();
        frameNum = random(1,5);
        if(args[0] > 0)
        {
            frameNum = args[0];
        }
        if(args[0] == 7)
        {
            mass = 450;
            gravity = 1.12;
            SetTag("$OBJECT_PLASTIC_CRATE_SALMON");
            hasSalmon = true;
        }
        if(args[0] == 8)
        {
            mass = 450;
            gravity = 1.12;
            SetTag("$OBJECT_PLASTIC_CRATE_FLOUR");
            hasFlour = true;
        }
        if(args[0] == 9)
        {
            mass = 480;
            gravity = 1.22;
            SetTag("$OBJECT_PLASTIC_CRATE_WATERMELONS");
            hasMelon = true;
        }
    }

    states
    {
        Pain:
            TNT1 A 0 A_PAIN();
        Spawn:
            TNT1 A 0;
            VOXE A -1
            {
                frame = frameNum;
            }
            stop;
        Death:
            TNT1 A 0
            {
                destroyCrate();
            }
            TNT1 A 0;
            stop;
    }
}

class PLASTIC_CRATE_CHUNK_LEFT : SelacoActorDecorationMissile
{

    override void postBeginPlay()
    {
        super.postBeginPlay();
        A_SETANGLE(random(0,360));
    }

    override void bounceEffects()
    {
        A_PLAYSOUND("bounce/woodplank", CHAN_AUTO,  1.0, pitch:frandom(1.2,1.5));
        A_SPAWNITEMEX("BodyImpactSmokeSmall");
    }

    default
    {
        Seesound "";
    }

    int frameNum;
    states {
        Spawn:
            VOXE A 0;
        Looper:
            VOXE A 2
            {
                frame = frameNum;
                if(vel.length() == 0)
                {
                    setStateLabel("Death");
                }
                loopingEffects();
                A_SETPITCH(pitch+35);
            }
            loop;
		Bounce:
			TNT1 A 0
            {
                bounceEffects();
            }
			goto Looper;
        Death:
            VOXE A 30
            {
                frame = frameNum;
                bounceEffects();
                A_SETPITCH(0);
            }
            VOXE A 1
            {
                frame = frameNum;
                A_SETPITCH(0);
                sleep(160);
                if(getCvar("g_permanentDestruction") == 1)
                {
                    sleepindefinite();
                }
            }
            VOXE AAAAAAAAAAAAAAAAAAAA 1
            {
                A_FADEOUT(0.05, FTF_REMOVE);
                frame = framenum;
            }
            stop;
    }
}

class PLASTIC_CRATE_CHUNK_RIGHT : PLASTIC_CRATE_CHUNK_LEFT { }

class Paper_Bag : PickupableDecoration
{
    override void postBeginPlay()
    {
        super.postBeginPlay();
        frameNum = args[0];
    }

    default
    {
        +SELACOACTOR.DecorativeActor;
        +SELACOACTOR.thruplayers;
        -NOBLOOD;
        radius 8;
        height 8;
        deathsound "dest/paper";
        Bloodtype "", "", "";
        tag "$OBJECT_Paper_Bag";
        health 10;
    }
    states
    {
        Spawn:
            TNT1 A 0;
            VOXE A -1
            {
                frame = frameNum;
            }
            stop;
        Death:
            TNT1 AAAAA 0 A_SPAWNITEMEX("PaperDustEffect", frandom(-20,20), frandom(-20,20), random(0,29));
            TNT1 A 0
            {
                for(int x=0;x<2;x++)
                {
                    A_SPAWNITEMex ("EXTINGUISHERSMOKESMALL", random(0, 15), frandom(-15,15), random(2, 12), frandom(0.1, 0.1), frandom(0.1,0.1), 0, frandom(0,360));
                }
                for(int x=0;x<150;x++)
                {
                    A_SpawnItemEx("saltparticle", frandom(-2, 2), frandom(-2,2), frandom(4,5), frandom(-2, 2), frandom(-2,2), frandom(0.1,6));
                }
            }
            stop;
    }
}

class Scissors : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_SCISSORS";
    }
}
class Comb_A : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_COMB";
    }
}
class Comb_B : Comb_A {}
class CurlingIron : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_CURLINGIRON";
    }
}
class Hairclipper : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_HAIRCLIPPER";
    }
}
class Hairdryer : SMALL_TOOL 
{
    default
    {
        tag "$OBJECT_HAIRDRYER";
    }
}

class BunHolder : SMALL_TOOL
{
    override void postbeginPlay()
    {
        super.postbeginPlay();
        frameNum = random(0,3);
    }

    default
    {
        +THRUACTORS;
        tag "$OBJECT_BUNHOLDER";
    }
    states
    {
        spawn:
            TNT1 A 0;
            VOXE A -1
            {
                frame = frameNum;
            }
    }
}

class BARBELL_HEAVY : PickupableDecoration
{
    default
    {
        +SELACOACTOR.thruDecorations;
        +SELACOACTOR.thruplayers;
        -NOBLOOD
        PainChance 255;
        friction 0.73;
        PainSound "impact/heavycrate";
	    BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
        gravity 1.25;
        mass 700;
        radius 15;
        height 10;
        tag "$OBJECT_BARBELL";
    }
    states
    {
        Pain:
            VOXE L 0 A_PAIN();
        Spawn:
            VOXE L -1;
            stop;
    }
}

class BARBELL_MEDIUM : BARBELL_HEAVY
{
    default
    {
        radius 12;
        gravity 1.16;
        mass 600;        
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}
class BARBELL_SMALL_HEAVY : BARBELL_HEAVY
{
    default
    {
        gravity 1.16;
        mass 500;        
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}
class BARBELL_SMALL_LIGHT : BARBELL_HEAVY
{
    default
    {
        gravity 1.12;
        mass 350;        
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class WEIGHT_HEAVY : BARBELL_HEAVY
{
    default
    {
        radius 6;
        height 3;
        tag "$OBJECT_WEIGHT";
    }
}

class WEIGHT_LIGHT : WEIGHT_HEAVY
{

}

class KETTLEBELL : WEIGHT_HEAVY
{
    override void postbeginPlay()
    {
        super.postBeginPlay();
        frameNum = args[0];
        if(args[0] == 0)
        {
            framenum = random(1,3);
        }
    }
    default
    {
        tag "$OBJECT_KETTLEBELL";
        radius 6;
        height 9;
    }
    states
    {
        Spawn:
        Pain:
            TNT1 A 0;
            VOXE L -1
            {
                frame = frameNum;
            }
    }
}

class JUMPROPE : SelacoActorStatic
{
    states
    {
        spawn:
            VOXE L -1;
            stop;
    }
}

class foamroller : PickupableDecoration
{

    override void postBeginPlay()
    {
        super.postBeginPlay();
        frameNum = random(0,3);
    }

    default
    {
        tag "$OBJECT_FOAMROLLER";
        radius 6;
        height 15;
        +SHOOTABLE
        health 5;
        +SELACOACTOR.thruDecorations;
        +SELACOACTOR.thruPlayers
    }
    states
    {
        Spawn:
            TNT1 A 0;
            VOXE A -1
            {
                frame = frameNum;
            }
            stop;
        Death:
            TNT1 A 0 A_SpawnProjectile ("PAPERSMOKE", 5, 0, random (0, 10), 2, random (0, 10));
			TNT1 AAAAA 0 {
				A_SPAWNITEMEX("Cardboard_Chunk", frandom(-20,20), frandom(-20,20),frandom(0,30));
			}
            stop;
    }
}

class foamroller_sideways : foamroller
{
    default
    {
        radius 10;
        height 8;
    }
}

class Dart : PickupableDecoration
{
    actor d;
    bool projectileSpawn;
    override void postbeginPlay()
    {
        super.postBeginPlay();
		PlayerPawn pawn=players[0].mo;
		d = Dawn(pawn);
        if(!projectileSpawn)
        {
            frameNum = random(0,5);
        }
    }

    default
    {
        -PUSHABLE;
        +NOGRAVITY;
        +DONTTHRUST
        +SELACOACTOR.thruplayers;
        +SELACOACTOR.thruDecorations;
		-PickupableDecoration.TranslucentPickup;
		PickupableDecoration.HoldDistance 16;
		PickupableDecoration.HoldHeight -3;
		PickupableDecoration.ThrowVel 22;
        -PickupableDecoration.HoldFromBack;
        +PickupableDecoration.HoldFromFront;
        radius 4;
        height 2;
    }
    states
    {
        spawn: 
            TNT1 A 0;
            VOXE L -1
            {
                frame = frameNum;
            }
            loop;
        Pickup:
            TNT1 A 0
            {
                bNoGravity = false;
            }
            goto spawn;
		Throw:
			VOXE L 0 {
                actor dartProjectile;
                bool success;
				A_PLAYSOUND("knife/throw", CHAN_AUTO, 0.8, 0, 0, 0, pitch:frandom(0.8,1.1));
				// Keeps pitch into account.
				[success, dartProjectile] = A_SPAWNITEMEX("DartProjectile",xofs:cos(d.pitch)*5,yofs:0,zofs:0-(sin(d.pitch)*5),xvel:cos(d.pitch)*ThrowVel,yvel:0,zvel:-sin(d.pitch)*ThrowVel);
                if(dartProjectile)
                {
                    DartProjectile(dartProjectile).frameID = frameNum;
                }
			}
			stop;
    }
}

class DartProjectile : KNIFEPROJECTILE
{
    override int SpecialMissileHit (Actor victim) 
    {
        // Pass through Swoony
		if(SelacoActor(victim) && victim is "PaperActor")  {
            // Pass through
            return 1;
        }
		return super.SpecialMissileHit(victim);
	}

    int frameID;
    default
    {
        damage 0;
        speed 22;
        -DoomBounce;
        bounceFactor 0;
        +SELACOACTOR.thruplayers;
        +SELACOACTOR.thruDecorations;
		-PointyTracer.rotatePitch;
		-PointyTracer.spawnFlares;
        selflighting "000000";
    }
    states
    {
        spawn:
            TNT1 A 0;
			VOXE L 1
            {
                frame = frameID;
            }
			loop;
        xdeath:
            TNT1 A 0 
            {
                actor dart;
                bool success;
				[success, dart] = A_SPawnItemEx("Dart", 3);
                if(dart)
                {
                    dart(dart).frameNum = frameID;
                    dart(dart).projectileSpawn = true;
                    dart(dart).bNoGravity = false;
                    dart(dart).gravity = 1.4;
                }
            }
            stop;
        death:
            TNT1 A 0 
            {
                actor dart;
                bool success;
				[success, dart] = A_SPawnItemEx("Dart", -14);
                if(dart)
                {
                    dart(dart).frameNum = frameID;
                    dart(dart).projectileSpawn = true;
                }
            }
            stop;
    }
}

class DAWNARMORDECORATION : SelacoActorStatic
{
    default
    {
        +NOINTERACTION;
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
    }
}

class FBF_LABEL : MetalSign
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		frameID = args[0];
	}

    default
    {
        SelfLighting "363636";
        tag "FBF Label";
    }

}

class LETTERBLOCK : PickupableDecoration
{
    default
    {
        -NOBLOOD;
        mass 450;
        tag "$OBJECT_LETTERBLOCK";
        +SelacoActor.thruplayers;
        PainChance 255;
        Health 100;
        PainSound "impact/crate";
        DeathSound "impact/woodbreak";
        BloodType "BulletImpactEffectWoodShrapnel", "BulletImpactEffectWoodShrapnel", "BulletImpactEffectWoodShrapnel";
    }
    override void postbeginPlay()
    {
        super.postbeginPlay();
        frameNum = random(0,6);
    }
    states
    {
        Pain:
            TNT1 A 0 A_PAIN();
        spawn:
            TNT1 A 0;
            VOXE L -1
            {
                frame = frameNum;
            }
            loop;
        Death:
		    TNT1 A 0 A_PlaySound("dest/crate", CHAN_AUTO, 0.8, pitch: 0.8);
		    TNT1 A 0 A_SpawnItemEx("BrownCloud", 10);
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("PlankSpawnerSlow", frandom(0,16), 0, random (0, 360), 2, random (0, 180));  
            stop;
    }
}

class LETTERBLOCK_SMALL : LETTERBLOCK { 
    default
    {
        radius 7;
        height 11;
    }
}
class LETTERBLOCK_LARGE : LETTERBLOCK { 
    default
    {
        -SelacoActor.thruplayers;
        radius 13;
        height 24;
    }
}

class NUMBERBLOCK_1 : LETTERBLOCK_LARGE
{
    override void postBeginPlay()
    {
        super.postBeginPlay();
        frameNum = 11;
    }
}
class NUMBERBLOCK_2 : NUMBERBLOCK_1 { }
class NUMBERBLOCK_3 : NUMBERBLOCK_1 { }
class NUMBERBLOCK_4 : NUMBERBLOCK_1 { }
class NUMBERBLOCK_5 : NUMBERBLOCK_1 { }

class salt : PickupableDecoration 
{
    //mixin ParticleEmitter;

    const PARTICLE_AMOUNT_PER_STAGE = 20; // Amount of salt particles per setting

    string particleActor;
    property ParticleActor : particleActor; 

    default
    {
        scale 1;
        radius 4;
        height 8;
        tag "$OBJECT_SALTSHAKER";
        PickupableDecoration.FallDamageThreshold FALLTHRESHOLD_WEAK;
        health 5;
        mass 150;
        salt.ParticleActor "saltparticle";
        +SelacoActor.thruplayers;
        -NOBLOOD;
        +SHOOTABLE;
    }
	states 
    {
		spawn:
		Active:
		Inactive:
		Idle:
			VOXE L -1;
			stop;
        Death.falldamage:
		Death:
			TNT1 A 0 A_playSound("dest/glassm");
			TNT1 AAAAAAA 0 A_SpawnProjectile("LargeGlassParticle1", random(1, 2), random(1, 9), random(3, 360), 0, 90);
			TNT1 AAAAA 0 A_SpawnItemEx("PaperSmoke", frandom(-6,6), frandom(-6,6), frandom(3,6));
            TNT1 A 0 
            {
                emit(ParticleActor, numTries:350, offset:(0, 0, 3));
            }
        
            stop;
	}
}

// Give 'em some pepper.
class pepper : salt 
{
    default
    {
        tag "$OBJECT_PEPPERSHAKER";
        salt.ParticleActor "pepperParticle";
    }
}

class SteelContainer : DecorationObject
{
    string containerPiece1;
    string containerPiece2;

    property ContainerPiece1 : containerPiece1;
    property ContainerPiece2 : containerPiece2;

    mixin MEDIUM_METAL_PROP;
    default
    {
        pushfactor 0.05;
        activation THINGSPEC_DEFAULT;
        -UseSpecial
        radius 30;
        height 34;
    }
    states
    {
        Spawn:
            TNT1 A 0;
            VOXE L -1;
            stop;
        death.Shotgun:
        death.ExplosiveImpact:
            TNT1 A 0 
            {
                A_PLAYSOUND("DEST/CASEBREAK", CHAN_AUTO, 0.7, pitch:frandom(0.8,1.0));
            }
            TNT1 AAAAAAAAAAAAAA 0 A_SpawnItemEx("JunkLauncher", frandom(-2, 2), frandom(-2,2), frandom(10,30));
            TNT1 A 0 {
				EmitDefinition('PaperParticleChunkDefinition', 1.0, 100, offset:(frandom(-10,10), frandom(-10,10), frandom(10,30)));
			}
            TNT1 A 0 
            {
                A_SpawnItemEx("SteelContainer_Palette");
                A_SpawnItemEx(containerPiece1, 0, 0, 5, frandom(3,8), 0, frandom(6,15), angle:random(0,360));
                A_SpawnItemEx(containerPiece2, 0, 0, 24, frandom(3,8), 0, frandom(6,15),angle:random(0,360));
            }
            stop;
        death:
            TNT1 A 0 
            {
                A_PLAYSOUND("DEST/CASEBREAK", CHAN_AUTO, 0.7, pitch:frandom(0.8,1.0));
            }
            TNT1 AAAAAAAAAA 0 A_SpawnItemEx("JunkLauncher", frandom(-2, 2), frandom(-2,2), frandom(10,30));
            TNT1 A 0 {
				EmitDefinition('PaperParticleChunkDefinition', 1.0, 100, offset:(frandom(-10,10), frandom(-10,10), frandom(10,30)));
			}
            TNT1 A 0 
            {
                A_SpawnItemEx("SteelContainer_Palette");
                A_SpawnItemEx(containerPiece1, 0, 0, 5, frandom(1,4), 0, frandom(2,7), angle:random(0,360));
                A_SpawnItemEx(containerPiece2, 0, 0, 24, frandom(1,4), 0, frandom(2,7),angle:random(0,360));
            }
            stop;
    }
}

class SteelContainer_A_BLUE : SteelContainer
{
    default
    {
        SteelContainer.containerPiece1 "SteelContainer_A_BLUE_PIECE_1";
        SteelContainer.containerPiece2 "SteelContainer_A_BLUE_PIECE_2";
    }
}
class SteelContainer_B_BLUE : SteelContainer 
{ 
    default
    {
        height 44;
        SteelContainer.containerPiece1 "SteelContainer_B_BLUE_PIECE_1";
        SteelContainer.containerPiece2 "SteelContainer_B_BLUE_PIECE_2";
    }
}
class SteelContainer_A_ORANGE : SteelContainer { 
    default
    {
        SteelContainer.containerPiece1 "SteelContainer_A_ORANGE_PIECE_1";
        SteelContainer.containerPiece2 "SteelContainer_A_ORANGE_PIECE_2";
    }
}
class SteelContainer_B_ORANGE : SteelContainer
{
    default
    {
        height 44;
        SteelContainer.containerPiece1 "SteelContainer_B_ORANGE_PIECE_1";
        SteelContainer.containerPiece2 "SteelContainer_B_ORANGE_PIECE_2";    
    }
}

class SteelContainer_Piece : HONEYCOMP_CHUNK_MASTER
{
    default
    {
        bounceFactor 0.1;
    }
}

class SteelContainer_A_BLUE_PIECE_1 : SteelContainer_Piece { }
class SteelContainer_A_BLUE_PIECE_2 : SteelContainer_Piece { }

class SteelContainer_B_BLUE_PIECE_1 : SteelContainer_Piece { }
class SteelContainer_B_BLUE_PIECE_2 : SteelContainer_Piece { }

class SteelContainer_A_ORANGE_PIECE_1 : SteelContainer_Piece { }
class SteelContainer_A_ORANGE_PIECE_2 : SteelContainer_Piece { }

class SteelContainer_B_ORANGE_PIECE_1 : SteelContainer_Piece { }
class SteelContainer_B_ORANGE_PIECE_2 : SteelContainer_Piece { }

class SteelContainer_Palette : PickupableDecoration
{
    mixin WOODEN_PROP;
    default
    {
        tag "$OBJECT_PALETTE";
        PickupableDecoration.grabSound "PICKUP/CRATE";
        PickupableDecoration.landingSound "impact/crate";
        PickupableDecoration.FallDamageThreshold FALLTHRESHOLD_CRATE;
        +SHOOTABLE
        +SOLID;
        +SelacoActor.ThruPlayers
        height 7;
        radius 20;
        health 50;
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Death:
            TNT1 A 0 A_PlaySound("dest/crate", CHAN_AUTO, 0.85, pitch: frandom(1.0,1.2));
            TNT1 AAAA 0 A_SpawnItemEx("BrownCloud", frandom(-5,5), frandom(-5,5), frandom(0,15));
            TNT1 A 0 
            {
                A_PlaySound("dest/crate", CHAN_AUTO, 0.85, pitch: frandom(1.0,1.2));
                EmitDefinition('SawDust360Definition', chance: 1.0, numTries: 80,pitch: frandom(-10,-180),speed:3, offset: (0, frandom(-5,5), frandom(-5,5)));
                for(int x=0;x<=5;x++)
                {
                    A_SpawnProjectile("PlankSpawnerSlow", frandom(0,10), 0, random (0, 360), 2, random (0, 180));  
                }
            }
            stop;
    }
}


class ClothingDecal : SelacoActorStatic
{
    default
    {
        renderstyle "Translucent";
        +NOINTERACTION;
    }
    states
    {
        Spawn:
			TNT1 A 0;
            VOXE A -1
			{
				frame = random(0,1);
			}
            stop;
    }
}

class FIREHYDRANT : SelacoActor 
{

    void thrustNearbyObject()
    {
        A_SpawnDefinedParticle("SteamParticleDefinition", 0, 0, 0, frandom(-0.1,0.17), frandom(-0.3,0.55), frandom(2,7));
        A_SpawnDefinedParticle("SteamParticleDefinition", 0, 0, 0, frandom(-0.1,0.17), frandom(-0.3,0.55), frandom(2,7));
        A_SpawnDefinedParticle("SteamParticleDefinition", 0, 0, 0, frandom(-0.1,0.17), frandom(-0.3,0.17), frandom(2,7));
		FLineTraceData RemoteRay;
		LineTrace(0,60, -90, 0, 0 , data: RemoteRay);		
		if(RemoteRay.HitActor && Remoteray.HitActor.bSolid)
        {
            let foundActor =RemoteRay.HitActor; 
            float upwardVelocity = UPWARD_THRUST_FORCE;

            // Spawn Steam Effects on found actor
            for(int x=25;x>0;x--)
            {
                foundActor.A_SpawnItemEx("SteamParticle", frandom(5,8), -1, 0, frandom(0.1,3.5), 0, frandom(1,2), angle:random(0,360));
            }

            // WOOSH!
            foundActor.A_CHANGEVELOCITY(0,0,upwardVelocity, CVF_RELATIVE);
            foundActor.vel.xy*=FORWARD_THRUST_FORCE_MULTIPLYER;
            foundActor.vel.z+=upwardVelocity+((abs(foundActor.vel.x + foundActor.vel.y)*0.5));
        }
    }

    const SPRAY_COUNT = 250;
    const UPWARD_THRUST_FORCE = 1.5;
    const FORWARD_THRUST_FORCE_MULTIPLYER = 1.1;
    int sprayAmount;
    int particleIntensity;
    mixin MEDIUM_METAL_PROP;
    default
    {
        mass 9000;
        health 45;
        height 30;
        +SOLID;
        +SHOOTABLE
        +DONTTHRUST;
    }
    states
    {
        Spawn:
            VOXE L -1;
            stop;
        Pain:
            TNT1 A 0
            {
                sleepDist = 2048;
                bNoPain = true;
                A_SETROLL(roll+5);
                if(!particleIntensity) 
                {
                    particleIntensity = getCvar("r_particleintensity");
                }
            }
        PainWaterSprayLoop:
            VOXE A 1
            {
                bPreventSleep = true;
                sprayAmount++;

                // Water particles can't even really be seen at this distance
                if(!CheckRange(1500, true)) {
                    for(int x=0;x<particleIntensity;x++) {
                        EmitDefinition("waterParticleXToiletSpray", 1.0, angle:270, pitch:-90, scaleBoost:0.75);
                    }
                }
                
                if(sprayAmount >= SPRAY_COUNT)
                {
                    bNoPain = true;
                    setStateLabel("Death");
                }
            }
            loop;
        Death:
            TNT1 A 0
            {
                if(!particleIntensity) 
                {
                    particleIntensity = getCvar("r_particleintensity");
                }

                A_PlaySound("Steam/Loop", CHAN_AUTO, 1.0, 1);
                sleepDist = 2048;
                A_SETSIZE(-1, 10);
                A_QuakeEx(3, 3,3, 7, 0, 350, 0, 0, 0, 0, 0, 0, 2, 2, 4);
                A_PLAYSOUND("VALVEXP", CHAN_AUTO, 0.6, pitch:1.2);
                A_PLAYSOUND("FIREHYDRANT/SPRAY", CHAN_5, 0.6, 0, 0.9);
                EmitDefinition("waterParticleFireHydrantDefinition", 1.0, 70, pitch:-90, particleSpawnOffsets:5);
                A_SPAWNITEMEX("FIREHYDRANT_PIECE", 0, 0, 16, frandom(2,5), 0, frandom(15,19), angle:random(0,360));
                sprayAmount = 0;
            }
        DeathSpray:
            VOXE B 1
            {
                thrustNearbyObject();
                sprayAmount++;
                EmitDefinition("waterParticleFireHydrantDefinition", 1.0, 3, pitch:-90);
                if(sprayAmount >= SPRAY_COUNT)
                {
                    setStateLabel("DeadHydrant");
                }
            }
            loop;
        DeadHydrant:
            VOXE B 1
            {
                A_PLAYSOUND("FIREHYDRANT/STOP", CHAN_5, 0.4, 0, 0.9);
            }
        DeadHydrantThrustObjects:
            VOXE B 1
            {
                sleepDist = 2400;
                bPreventSleep = false;
                thrustNearbyObject();
                EmitDefinition("waterParticleFireHydrantDefinition", 0.1, 3, pitch:-90, speed:-3);
            }
            loop;
    }
}

class FIREHYDRANT_PIECE : SelacoActorDecorationMissile { 
    override void loopingEffects()
    {
        super.loopingEffects();
        A_SPAWNITEMEX("WaterParticleXSmall", 0, 0, 0, frandom(-2,2), frandom(-2,2),frandom(-1,1));
    }
}

class ROTATING_STAND_FEET : DecorationObject
{
    mixin MEDIUM_METAL_PROP;

    actor standTop;
    bool succ;

    override void postBeginPlay()
    {
        super.postBeginPlay();
        [succ, standTop] = A_SPAWNITEMEX("ROTATING_STAND_TOP",0, 0, 10, flags:SXF_SETMASTER);
    }

    default
    {
		PushFactor 0.95;
        PainChance 255;
		SelacoActor.SpecialPushFactor 0.9;
		+SelacoActor.SpecialPushable;
		+SelacoActor.SpecialPushDirectionFix;
        +SelacoActor.IsOnWheels;
        health 90;
        height 40;
        radius 20;
        -UseSpecial
        activation THINGSPEC_DEFAULT;
        +SHOOTABLE
    }

    states
    {
        Active:
        Inactive:
        Spawn:
            TNT1 A 0;
            VOXE L -1;
            stop;
        Pain:
            TNT1 A 0
            {
                if(standTop)
                {
                    standTop.setStateLabel("Pain");
                }
            }
            goto spawn;
        Death.Shotgun:
        Death.MagnumBullet:
        Death.explosiveimpact:
            TNT1 A 0 A_SPAWNITEMEX("ROTATING_STAND_PIECE_1", 12, 0, 15, frandom(4,7), 0, frandom(6,9), angle:90);  // Hidden Dave Oshry number
            TNT1 A 0 A_SPAWNITEMEX("ROTATING_STAND_PIECE_2", 12, 0, 15, frandom(4,7), 0, frandom(6,9), angle:180); // Hidden Dave Oshry number
            TNT1 A 0 A_SPAWNITEMEX("ROTATING_STAND_PIECE_3", 12, 0, 15, frandom(4,7), 0, frandom(6,9), angle:270); // Hidden Dave Oshry number
            TNT1 A 0 A_SPAWNITEMEX("ROTATING_STAND_PIECE_3", 12, 0, 15, frandom(4,7), 0, frandom(6,9), angle:0);   // Hidden Dave Oshry number
            goto RealDeath;
        Death:
            TNT1 A 0 A_SPAWNITEMEX("ROTATING_STAND_PIECE_1", 12, 0, 15, 4, 0, 2, angle:90);
            TNT1 A 0 A_SPAWNITEMEX("ROTATING_STAND_PIECE_2", 12, 0, 15, 4, 0, 2, angle:180);
            TNT1 A 0 A_SPAWNITEMEX("ROTATING_STAND_PIECE_3", 12, 0, 15, 4, 0, 2, angle:270);
            TNT1 A 0 A_SPAWNITEMEX("ROTATING_STAND_PIECE_3", 12, 0, 15, 4, 0, 2, angle:0);
        RealDeath:
            TNT1 A 0
            {
                A_PLAYSOUND("HONEYCOMBCASE/BREAK", CHAN_AUTO, 0.7, pitch:frandom(1.1,1.2));
                if(standTop)
                {
                    standTop.destroy();
                }
            }
            VOXE A -1;
            stop;
    }
}

class ROTATING_STAND_TOP : Interactable
{

    const ROTATE_AMOUNT_MAX_USE = 280;
    const ROTATE_AMOUNT_MAX_DAMAGE = 145;
    const ROTATE_SPEED_START_USE = 25;
    const ROTATE_SPEED_START_DAMAGE = 35;
    int rotateLimit;
    int rotateAmount;
    float rotateSpeed;
    bool doRotating;

    override void postbeginPlay()
    {
        A_SETANGLE(random(0,360));
        super.postBeginPlay();
    }

    override void tick()
    {
        super.tick();
        if(master)
        {
            A_Warp(AAPTR_MASTER, 0, 0, 10, angle, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
        }
        
        if(doRotating)
        {
            spinAround();
        }
    }

    void startSpinning(int speed, int limit)
    {
        A_PLAYSOUND("ROTATINGSTAND/SPIN", CHAN_6, 0.4, 1, pitch:1);
        bPreventSleep = true;
        rotateSpeed = speed;
        rotateLimit = limit;
        bUseSpecial = false;
        activationType = THINGSPEC_DEFAULT;
        doRotating = true;
    }

    void stopSpinning()
    {
        A_PLAYSOUND("ROTATINGSTAND/STOP", CHAN_6, 0.4, 0, pitch:1);
        bPreventSleep = false;
        rotateAmount = 0;
        doRotating = false;
        bUseSpecial = true;
        activationType = THINGSPEC_SWITCH;        
    }

    void spinAround()
    {
        rotateAmount+=rotateSpeed;
        A_SETANGLE(angle+rotateSpeed, SPF_INTERPOLATE);
        // Start slowing down
        if(random(0,100) <= 4)
        {
            EmitDefinition('ShortSpark360SmallParticleDefinition', chance:0.75, numTries:7, pitch:-45, speed:-2);
        }
        if(rotateAmount >= rotateLimit)
        {
            rotateSpeed-=0.35;
            // Done spinning around.
            if(rotateSpeed <= 0)
            {
                stopSpinning();
            }
        }
    }

    default
    {
        -SHOOTABLE
        +SHOOTABLE;
        +INTERPOLATEANGLES;
        height 37;
        radius 14;
        PainChance 255;
        tag "$OBJECT_ROTATINGSTAND";
        SelacoActor.UseTag "$INTERACT_SPIN";
        +USESPECIAL
        activation THINGSPEC_SWITCH;
    }
    states
    {
        Spawn:
            VOXE L -1;
        Active:
        Inactive:
            TNT1 A 0
            {
                startSpinning(ROTATE_SPEED_START_USE, ROTATE_AMOUNT_MAX_USE);
            }
            goto spawn;
        Pain:
            TNT1 A 0
            {
                stopSpinning();
                startSpinning(ROTATE_SPEED_START_DAMAGE, ROTATE_AMOUNT_MAX_DAMAGE);
            }
            goto Spawn;
    }
}

class ROTATING_STAND_PIECE_1 : SelacoActorDecorationMissile { 

    override void postbeginPlay()
    {
        super.postBeginPlay();
        A_SETPITCH(-90);
    }

    override void bounceEffects()
    {
        super.bounceEffects();
        A_PlaySound("impact/heavy/metal",CHAN_AUTO, 0.15, 0, 1.0, false, pitch:frandom(1.7,1.95));
		A_PlaySound("IMPACT/METALPIPE",CHAN_AUTO, 0.15, 0, 1.0, false, pitch:frandom(1.45,1.75));   
    }

    default
    {
        bounceFactor 0;
        seeSound "";
    }
    states
    {
        Spawn:
        Looper:
            VOXE L 1
            {
                if(vel.length() == 0)
                {
                    setStateLabel("Death");
                }
                loopingEffects();
            }
            TNT1 A 0
            {
                A_SETPITCH(pitch+7);
            }
            loop;
    }
}

class ROTATING_STAND_PIECE_2 : ROTATING_STAND_PIECE_1 { }
class ROTATING_STAND_PIECE_3 : ROTATING_STAND_PIECE_1 { }

class Bodybag : Interactable 
{
    static const string lastNames[] = {
        "Smith", "Johnson", "Williams", "Brown", "Jones",
        "Garcia", "Miller", "Davis", "Rodriguez", "Martinez",
        "Hernandez", "Lopez", "Gonzalez", "Wilson", "Anderson",
        "Thomas", "Taylor", "Moore", "Jackson", "Martin",
        "Lee", "Perez", "Thompson", "White", "Harris",
        "Sanchez", "Clark", "Ramirez", "Lewis", "Robinson",
        "Walker", "Young", "Allen", "King", "Wright",
        "Scott", "Torres", "Nguyen", "Hill", "Flores",
        "Green", "Adams", "Nelson", "Baker", "Hall",
        "Rivera", "Campbell", "Mitchell", "Carter", "Roberts",
        "Gomez", "Phillips", "Evans", "Turner", "Diaz",
        "Parker", "Cruz", "Edwards", "Collins", "Reyes",
        "Stewart", "Morris", "Morales", "Murphy", "Cook",
        "Rogers", "Gutierrez", "Ortiz", "Morgan", "Cooper",
        "Peterson", "Bailey", "Reed", "Kelly", "Howard",
        "Ramos", "Kim", "Cox", "Ward", "Richardson",
        "Watson", "Brooks", "Chavez", "Wood", "James",
        "Bennett", "Gray", "Mendoza", "Ruiz", "Hughes",
        "Price", "Alvarez", "Castillo", "Sanders", "Patel",
        "Myers"
    };

    override void postbeginPlay()
    {
        super.postBeginPlay();
        giveRandomTag();
    }

    void giveRandomTag()
    {
        string letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string letter = letters.mid(random(0,25), 1); 
        string lastName = lastNames[random(0,lastNames.size()-1)];
        setTag(string.format("%s\c[darkgrey] %s. %s\n  (%s)", 
            StringTable.localize(getTag()), 
            letter, 
            lastName, 
            StringTable.localize("$BODYBAG_DEATHDATE"))
        );
    }
    
    default
    {
        SelacoActor.UseTag " ";
        tag "$OBJECT_BODYBAG";
        mass 9000;
        scale 1.0;
        radius 20;
        height 10;
        maxStepHeight 3;
        +BUDDHA
        +CANPASS
        +SHOOTABLE
        +SOLID
        +USESPECIAL
        +SelacoActor.ThruDecorations
        gravity 1.7;
        activation THINGSPEC_SWITCH;
        bloodType "BodybagBlood";
        -SelacoActor.ShowInteraction;
    }

    states
    {
        Inactive:
        Active:
        Spawn: 
            VOXE L -1;
            stop;
    }
}


class REINFORCEDCASE : HeavyMetalContainer
{
    override void postbeginPlay()
    {
        super.postBeginPlay();
        frameNum = args[0] > 0 ? random(0,3) : args[0]; 
    }

    default 
    {
        height 33;
        tag "$OBJECT_REINFORCEDCASE";
    }
    states
    {
        Spawn:
            TNT1 A 0;
            VOXE A -1
            {
                frame = frameNum;
            }
            loop;
    }
}

class WATERBOTTLE_DRANK : SelacoActorStatic { 
    default
    {
        scale 1;
    }
    states
    {
        spawn: 
            VOXE L -1;
            stop;
    }
}