class Handstation : Interactable {

	array<Actor> stationParts;

	actor stationFan;
	actor stationLED;
	
	void resetMachine()
	{

		// Indicator noise  
		A_PLAYSOUND("SCRIPT/HANDDRYFINISH", CHAN_AUTO, 0.7);
		bUseSpecial = true;
		activationtype = THINGSPEC_Activate;

		if(stationLED)
		{
			stationLED.setStateLabel("GoBlue");
		}
	}

    default {
        // FLAGS
        +NOGRAVITY
        +SOLID
        +shootable
        +NOBLOODDECALS
		+DONTTHRUST
    	+USESPECIAL;
        Activation THINGSPEC_Activate;
        // PROPERTIES
        BloodType "Stacked_Sparks_Lite", "Stacked_Sparks_Lite", "Stacked_Sparks_Lite";
        mass 10;
        health 10;
        radius 15;
        height 40;
        scale 0.9;

		SelacoActor.UseTag "$INTERACT_ACTIVATE";
		Tag "$OBJECT_HANDDRYER";
    }
	states {
		Precache:
			HNDS A 0;
			stop;
		spawn:
			TNT1 A 0;
			TNT1 A 0 A_RECOIL(1000);
			TNT1 A 1 {
				bool urmom;
 			    [urmom, stationLED] = A_SpawnItemEx("Handstation_LED", -3, 0, 0,flags:SXF_SETMASTER);
				stationParts.push(stationLED);
				// Use spawnpoint to store the offset
				stationLED.SpawnPoint = (-3, 0, 0);

			    [urmom, stationFan] = A_SpawnItemEx("Handstation_fan", -3, 0, 5,flags:SXF_SETMASTER);   
				stationParts.push(stationFan);
				// Use spawnpoint to store the offset
				stationFan.SpawnPoint = (-3, 0, 5);
            }
		Looper:
			HNDS A -1;
			loop;
		active:
			HNDS A 15
			{

				// Disable interaction
				bUseSpecial = false;
				activationtype = THINGSPEC_Default;

				// Warn user of epic spinning 
				A_PLAYSOUND("SCRIPT/HANDDRYSTART", CHAN_AUTO, 0.35);
				
				// Tell the LED to turn yellow to signal usage
				if(stationLED)
				{
					stationLED.setStateLabel("GoYellow");
				}
				
			}
			HNDS A 1
			{
				// Tell the fan to start spinning.
				if(stationFan)
				{
					stationFan.A_PLAYSOUND("script/HANDDRY", CHAN_5);
					stationFan.setStateLabel("Spinner");
				}
			}
			goto looper;
		inactive:
		xdeath:
		Death:
			TNT1 A 0 {
				if(stationFan)
				{
					stationFan.A_STOPSOUND(CHAN_5);
				}
				bSolid = false;
				// Kill components
				for(int x=0;x<stationParts.size();x++)
				{
					if(stationParts[x]) stationParts[x].destroy();
				}
			}
			TNT1 A 0 {
				if(!bMissile) {
					A_SpawnItemEx("handstation_broken", 0, 0, 0);
				} else {
					for(int x= getCvar("r_ParticleIntensity") - 1; x >= 0; x--) {
						A_SpawnProjectile("circuitboard", random(20,32), angle:random(0,360), CMF_AIMDIRECTION, pitch:frandom(-80,-170));
					}
					EmitDefinition('LongerSparkDefinition', chance: 1.0, numTries: 35, angle:random(0,360), pitch:-15, offset:(0, 0, 16));
				}
			}
			TNT1 AA 0 A_SpawnProjectile("WhitePlasticShard", 32, random(-10, 10), random(-180,180));
			TNT1 AA 0 A_SpawnProjectile("WhitePlasticShard2", 32, random(-10, 10), random(-180,180));
			stop;
	}


	override void tick() {
		Super.tick();

		for(int x = 0; x<stationParts.size(); x++) {
			if(stationParts[x]) {
				let off = stationParts[x].spawnpoint;
				stationParts[x].warp(self, off.x, off.y, off.z, flags: WARPF_INTERPOLATE | WARPF_NOCHECKPOSITION);
			}
		}
	}

	override Actor prepareForTelek(Actor owner) {
		bSlidesOnWalls = true;
		return Super.prepareForTelek(owner);
	}
}

class handstation_broken : Handstation {
	default {
        -USESPECIAL
		Activation THINGSPEC_Default;
    }
	states {
		spawn:
			TNT1 A 0;
			HNDS BBB 2 A_SETROLL(roll-5);
			HNDS BBBBBBBBBBBBBBBBBB random(35,60) {
				A_SpawnItemEx("GunFireSmokeMassive", 0, 0, 0, 0, 1, 1);
				A_SpawnProjectile ("SparkEmberUpward", random(4, 10), random(3,7), random (0, 70), 2, random (0, 190));
			}
			HNDS B -1;
			loop;
	}
}

class Handstation_LED : Handstation {
    default {
	    -solid;
	    -shootable;
		+NOINTERACTION;
    	radius 5;
	    height 5;
	    scale 0.9;
        -USESPECIAL;
        Activation THINGSPEC_default;
    }
	states {
		GoBlue:
		spawn:
			HNDS C -1 BRIGHT;
			stop;
		GoYellow:
			HNDS D -1 BRIGHT;
			stop;
		destroy:
			TNT1 A 0;
			stop;
		death:
			stop;
	}
}

class Handstation_fan : Handstation {
	bool flipped;
	const POWER_TIME = 6*35; // How long does it stay on (in tics)
	int currentPowerTime;
    default {
        -USESPECIAL;
		+NOINTERACTION;
        Activation THINGSPEC_default;
        -SOLID;
        +ROLLSPRITE;
        health 900;
		radius 15;
		height 15;
		Tag "$OBJECT_HANDDRYER";
    }
	states {
		spawn:
			TNT1 A 0 A_SETROLL(0);
			HNDS B -1;
			loop;
		Spinner:
			HNDS AB 1 
			{
				bPreventSleep = true;
				currentPowerTime++;
				A_SpawnItemEx("HandDryParticle", 2, frandom(-3,3), 1, (0.1)*Random(0, 4), 0, (-0.1)*Random(35, 40), Random(0, 360), 128);
				A_SpawnItemEx("HandDryParticle", 2, frandom(-3,3), 1, (0.1)*Random(0, 4), 0, (-0.1)*Random(35, 40), Random(0, 360), 128);
				A_SpawnItemEx("HandDryParticle", 2, frandom(-3,3), 1, (0.1)*Random(0, 4), 0, (-0.1)*Random(35, 40), Random(0, 360), 128);
				flipped = !flipped;
				if(currentPowerTime >= POWER_TIME)
				{
					currentPowerTime = 0;
					A_PLAYSOUND("SCRIPT/HANDDRYCOMPLETE", CHAN_5, 0.3);

					// Tell the master that it's ready for activation again
					if(master && handstation(master))
					{
						handstation(master).resetMachine();
					}
					bPreventSleep = false;
					// Return and do nothing
					setStateLabel("Spawn");
				}
			}
			loop;
		destroy:
			TNT1 A 0 A_STOPSOUND(CHAN_5);
			TNT1 A 0;
			stop;
		Death:
			TNT1 A 0 A_STOPSOUND(CHAN_5);
			Stop;
	}
}