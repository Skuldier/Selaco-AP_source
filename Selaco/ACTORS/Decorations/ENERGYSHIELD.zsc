class ShieldPieceMaster : PlasmaShieldActor {
    int frameID;
    void SpriteIndexer(int newFrameID) {
        frameID = newFrameID;
    }

	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
        if(master && ShieldPieceMain(master))
        {
            ShieldPieceMain(master).destroyPiece();
        }
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}


    default {
        +PlasmaShieldActor.WeakShield;
        +SelacoActor.EnemyProjectilePassThru;
        -SelacoActor.SlopeAlignment;
        +SelacoActor.IgnoredByMelee;
        +DONTTHRUST
        Painchance 255;
        radius 5;
        Health 80;
        height 14;
        mass 9000;
        RenderStyle "translucent";
        scale 0.5;
        Alpha 0;
    }



    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                SpriteIndexer(1);
                SetStateLabel("Fader");
            }
        Fader:
            TNT1 A 0 {
                sprite = GetSpriteIndex("SHIE");
            }
            TNT1 AAAAAAAAAAAAAAAA 1 BRIGHT {
                frame = frameID;
                A_FADEIN(0.05);
            }
            TNT1 A 0
            {
                A_SETSIZE(14, 18);
            }
        Idle:
            TNT1 AAAAAAAAAAAAAAAAAA 1 BRIGHT {
                frame = frameID;
                A_FADEOUT(0.01);
            }
            TNT1 AAAAAAAAAAAAAAAAAA 1 BRIGHT {
                frame = frameID;
                A_FADEIN(0.01);
            }
            TNT1 A 0 A_ChangeLinkFlags(0);
            loop;
        Pain:
            TNT1 A 0 A_SetRenderStyle(1.0, STYLE_Normal);
            TNT1 A 1 BRIGHT {
                A_PlaySound("EnergyShield/Damage", CHAN_5, 1.0, 0, 0.7, 0, frandom(0.9,1.05));
                frame = frameID;
            }
            TNT1 A 0 A_SetRenderStyle(0.7, STYLE_Translucent);
            goto Idle;
        Death:
            TNT1 A 0 {
                EmitDefinition('LongerSparkDefinition', chance: 1.0, numTries: 5, angle:frandom(0, 360), pitch:-15, speed:2);
                EmitDefinition('ShortSparkParticleDefinition', chance: 1.0, numTries: 4, angle:frandom(0, 360), pitch:-15, speed:2);
                EmitDefinition('ShortMetalShrapnelParticle360Definition', chance: 1.0, numTries: 15, angle:frandom(0, 360), speed:2);
            }
            stop;
    }
}


//  -  -  -  -   -
//  -  -  O  -   -
class ShieldPiece1 : ShieldPieceMaster {
    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                SpriteIndexer(1);
                SetStateLabel("Fader");
            }
    }
}

//  -  O  -  -   -
//  -  -  -  -   -
class ShieldPiece2 : ShieldPieceMaster {
    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                SpriteIndexer(2);
                SetStateLabel("Fader");
            }
    }
}

//  -  -  -  O   -
//  -  -  -  -   -
class ShieldPiece2M : ShieldPiece2 {
    default {
        +XFLIP;
    }
}

class ShieldPiece6M : ShieldPiece1 {
    default {
        +yflip;
    }
}

//  -  -  -  -   -
//  -  O  -  -   -
class ShieldPiece3 : ShieldPieceMaster {
    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                SpriteIndexer(3);
                SetStateLabel("Fader");
            }
    }
}

//  -  -  -  -   -
//  -  -  -  O   -
class ShieldPiece3M : ShieldPiece3 {
    default {
        +XFLIP;
    }
}

//  O  -  -  -   -
//  -  -  -  -   -
class ShieldPiece4 : ShieldPieceMaster {
    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                SpriteIndexer(4);
                SetStateLabel("Fader");
            }
    }
}

//  -  -  -  -   O
//  -  -  -  -   -
class ShieldPiece4M : ShieldPiece4 {
    default {
        +XFLIP;
    }
}

//  -  -  -  -   -
//  O  -  -  -   -
class ShieldPiece5 : ShieldPieceMaster {
    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                SpriteIndexer(5);
                SetStateLabel("Fader");
            }
    }
}

//  -  -  -  -   -
//  -  -  -  -   O
class ShieldPiece5M : ShieldPiece5 {
    default {
        +XFLIP;
    }
}

class ShieldBackground : SelacoActor
{

    override void tick()
    {
        super.tick();
        if(!master)
        {
            destroy();
        }
    }

    default
    {
        SelacoActor.SleepDistance 0;
        +WALLSPRITE;
        RenderStyle "translucent";
        scale 0.5;
        alpha 0.6;
        +NOINTERACTION;
    }
    states {
        Spawn:
            SHIE G -1;
            stop;
    }
}

class ShieldPieceMain : ShieldPieceMaster {
	const particleEffects = 2; // Particle Effects that spawn while looping

    int mountCooldown;
    actor mountedActor;

    void destroyPiece()
    {
        A_PlaySound("EnergyShield/DestroyPiece", CHAN_5);
    }

    // This function looks for a nearby soldier. If the actor has bCanMountShield, they will attach to the shield.
    void handleShieldMount()
    {
		// Create the iterator
		BlockThingsIterator it = BlockThingsIterator.Create(self, 25);
		actor currentMo;
        while (it.Next()) {
            currentMo = it.thing; 
            // Move on if not a selacoenemy
            if(!(currentMo is "SelacoEnemy") )
                continue;

            // Mount is valid, so tell the soldier to mount.
            if(SelacoEnemy(currentMo).bAllowShieldMounting && !SelacoEnemy(currentMo).mountedShieldActor && !mountedActor && mountCooldown == 0 && !mountBlocked(currentMo) && distance2Dsquared(currentMo) < 150*150)
            {
                mountedActor = currentMo; // Used to memorize the mounted actor for this shield.
                SelacoEnemy(currentMo).mountedShieldActor = self; // Used to memorize the shield for the mounted actor
                currentMo.warp(self, -40, -10, 0, 0, WARPF_NOCHECKPOSITION | WARPF_TOFLOOR | WARPF_INTERPOLATE ); // TO-DO: This needs to be smoothened out. Currently they just 'warp' behind a shield.
                //currentMo.A_FACE(self);
                SelacoEnemy(currentMo).mountedShieldAngle = angle; 
            }
       	}
    }

    bool mountBlocked(actor mounter)
    {
        bool isBlocked = mounter.checkPosition((pos.x, pos.y));
        return isBlocked;
    }

    override void tick()
    {
        super.tick();
        // Do things for the master shield
        if(mountCooldown > 0)
        {
            mountCooldown--;
        }

        // Every now and again, look for nearby soldieres and mount them if they are able to
        if(level.time % random(5,10) == 0 )
        {
            {
                handleShieldMount();
            }
        }
    }


    default {
        -SelacoActor.IgnoredByMelee;
        -PlasmaShieldActor.WeakShield;
        Alpha 0.7;
        Health 125;
    }
    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 0 {
                A_PLAYSOUND("EnergyShield/Deploy", CHAN_AUTO);
                A_PLAYSOUND("script/shieldloop", CHAN_AUTO, 0.9, 1);
                A_SETSIZE(14, 18);
            }

            // BACKGROUND
            TNT1 A 0 A_SPAWNITEMEX("ShieldBackground", -7, 0, -21, 0, 0, 0, 0, SXF_SETMASTER);

            // ROW 3 (MIDDLE)
            TNT1 A 0 A_SpawnItemEx("ShieldPiece6m", 0, 0, 17, 0, 0, 0, 0, SXF_SETMASTER);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece1", 0, 0, -17, 0, 0, 0, 0, SXF_SETMASTER);
            SHIE A 4 BRIGHT; // WAIT A BIT

                //ROW 4
            TNT1 A 0 A_SpawnItemEx("ShieldPiece3m", 3, -26, -7.5, 0, 0, 0, 2, SXF_SETMASTER);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece2m", 3, -26, 10, 0, 0, 0, 2, SXF_SETMASTER);

                // ROW 2
            TNT1 A 0 A_SpawnItemEx("ShieldPiece3", 3, 26, -7.5, 0, 0, 0, -2, SXF_SETMASTER);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece2", 3, 26, 10, 0, 0, 0, -2, SXF_SETMASTER);
            SHIE A 4 BRIGHT; // Wait a bit

                // ROW 5 (Most right)
            TNT1 A 0 A_SpawnItemEx("ShieldPiece5m", 3, -52, 1, 0, 0, 0, 4, SXF_SETMASTER);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece4m", 3, -52, 18, 0, 0, 0, 4, SXF_SETMASTER);

                // ROW 1 (MOST LEFT)
            TNT1 A 0 A_SpawnItemEx("ShieldPiece5", 3, 52, 1, 0, 0, 0, -4, SXF_SETMASTER);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece4", 3, 52, 18, 0, 0, 0, -4, SXF_SETMASTER);

        Looper:
            SHIE A 1 BRIGHT {
                bSolid = true;
                A_ChangeLinkFlags(0);
                for(int i = 0; i <=particleEffects;i++) {
					A_SpawnParticle("#f2271d", SPF_FULLBRIGHT, 7, 3, frandom(0,360), frandom(-20,20), frandom(-60,60), frandom(-15,30), frandom(-2,2), frandom(-2,2), frandom(1,3));
                    A_SpawnParticle("#e82e63", SPF_FULLBRIGHT, 7, 3, frandom(0,360), frandom(-20,20), frandom(-60,60), frandom(-15,30), frandom(-2,2), frandom(-2,2), frandom(1,3));
				}
            }
            loop;
        Pain:
            TNT1 A 0 A_SetRenderStyle(1.0, STYLE_Normal);
            TNT1 A 0 A_PlaySound("energyshield/damage", CHAN_AUTO, 0.6, 0, 0.8);
            SHIE A 1 BRIGHT;
            TNT1 A 0 A_SetRenderStyle(0.7, STYLE_Translucent);
            goto Looper;
        Death:
            TNT1 A 0 A_SpawnItemEx ("SparkEmberUpward",0,0,20,0,0,0,0,SXF_NOCHECKPOSITION,0);
            TNT1 A 0 A_KillChildren; // Removes all the Shield Pieces
            TNT1 A 0 A_PlaySound ("EnergyShield/Destroy", CHAN_AUTO);
            stop;
    }
}

class ShieldPIeceMain_USED : ShieldPieceMain
{
    states
    {
        Spawn:
        TNT1 A 0;
            TNT1 A 0 {
                A_PLAYSOUND("EnergyShield/Deploy", CHAN_AUTO);
                A_PLAYSOUND("script/shieldloop", CHAN_AUTO, 0.9, 1);
            }
            // BACKGROUND
            TNT1 A 0 A_SPAWNITEMEX("ShieldBackground", -7, 0, -21, 0, 0, 0, 0, SXF_SETMASTER, failchance: 96);

            // ROW 3 (MIDDLE)
            TNT1 A 0 A_SpawnItemEx("ShieldPiece6m", 0, 0, 17, 0, 0, 0, 0, SXF_SETMASTER, failchance: 96);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece1", 0, 0, -17, 0, 0, 0, 0, SXF_SETMASTER);
            SHIE A 4 BRIGHT; // WAIT A BIT

                //ROW 4
            TNT1 A 0 A_SpawnItemEx("ShieldPiece3m", 3, -26, -7.5, 0, 0, 0, 2, SXF_SETMASTER, failchance: 96);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece2m", 3, -26, 10, 0, 0, 0, 2, SXF_SETMASTER, failchance: 96);

                // ROW 2
            TNT1 A 0 A_SpawnItemEx("ShieldPiece3", 3, 26, -7.5, 0, 0, 0, -2, SXF_SETMASTER, failchance: 96);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece2", 3, 26, 10, 0, 0, 0, -2, SXF_SETMASTER, failchance: 96);
            SHIE A 4 BRIGHT; // Wait a bit

                // ROW 5 (Most right)
            TNT1 A 0 A_SpawnItemEx("ShieldPiece5m", 3, -52, 1, 0, 0, 0, 4, SXF_SETMASTER, failchance: 96);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece4m", 3, -52, 18, 0, 0, 0, 4, SXF_SETMASTER, failchance: 96);

                // ROW 1 (MOST LEFT)
            TNT1 A 0 A_SpawnItemEx("ShieldPiece5", 3, 52, 1, 0, 0, 0, -4, SXF_SETMASTER, failchance: 96);
            TNT1 A 0 A_SpawnItemEx("ShieldPiece4", 3, 52, 18, 0, 0, 0, -4, SXF_SETMASTER, failchance: 96);

            goto looper;
    }
}

class PlasmaShield : actor	{
    default {
        //Category OminousMonsters
        +NoGravity
        +FLOAT
        scale 1.0;
        Alpha 0.7;
    }
  States {
      Spawn:
        SHIE B 1 BRIGHT;
        TNT1 A 0 A_SpawnItemEx("ShieldPieceMain", 0, 0, 14);
        stop;
  }
}