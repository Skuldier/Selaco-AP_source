// kitchen thangs

class KNIFEMASTER : PickupableDecoration {
	actor d;
	override void PostbeginPlay() {
		PlayerPawn pawn=players[0].mo;
		d = Dawn(pawn);
	}

	override void tick() {
		super.tick();
		if(isPickedUp()) {
			pitch = d.pitch;
		}
	}

	default {
		+THRUACTORS
		-PickupableDecoration.HoldFromBack;
		+PickupableDecoration.HoldFromFront;
		PickupableDecoration.grabSound "knife/grab";
		tag "$OBJECT_KNIFE";
		Bouncecount 0;
		BounceFactor 0;
		-PickupableDecoration.TranslucentPickup;
		PickupableDecoration.HoldDistance 16;
		PickupableDecoration.HoldHeight -3;
		PickupableDecoration.ThrowVel 27;
		height 15;
		radius 10;
	}
	states {
		Putdown:
	Spawn:
			TNT1 A 0;
			VOXE L -1;
			stop;
		Pickup:
			VOXE L 1 bright {
				bNoGravity = false;
				if(roll < 90) {
					roll+=5;
				}

			}
			loop;
		Throw:
			VOXE L 0 {
				A_PLAYSOUND("knife/throw", CHAN_AUTO, 0.8, 0, 0, 0, pitch:frandom(0.8,1.1));
				// Keeps pitch into account.
				A_SPAWNITEMEX(String.Format("%s%s", GetClassName(), "PROJECTILE"),xofs:cos(d.pitch)*5,yofs:0,zofs:0-(sin(d.pitch)*5),xvel:cos(d.pitch)*ThrowVel,yvel:0,zvel:-sin(d.pitch)*ThrowVel);
			}
			stop;
		ThrownLooper:
			VOXE L 1 {
				pitch+=150;
			}
			loop;
	}


	override void punt(Actor source, double forceScale) {
        let pu = source;
        double puntForce = ThrowVel * 1.5;

        drop();
        
        Vel3DFromAngle(puntForce, pu.angle, clamp(pu.pitch, -50, 0));
        vel += pu.vel;

        // Remove this object and fire a projectile instead
		A_PLAYSOUND("knife/throw", CHAN_AUTO, 0.8, 0, 0, 0, pitch:frandom(0.8,1.1));
		A_SPAWNITEMEX(String.Format("%s%s", GetClassName(), "PROJECTILE"),  xofs:0, yofs:0, zofs:0, xvel:vel.x, yvel:vel.y, zvel:vel.z, flags: SXF_ABSOLUTEVELOCITY | SXF_ABSOLUTEPOSITION);
		destroy();

        // Track successful punt
        if(pu is "Dawn") {
            Stats.AddStat(STAT_PROPS_PUNTED, 1, 0, pu.PlayerNumber());
        }
    }
}

class KNIFEBIG : KNIFEMASTER {

}
class KNIFEMEDIUM : KNIFEMASTER {

}
class KNIFESMALL : KNIFEMASTER {

}

class Cleaver : PickupableDecoration {
	default {
		height 5;
		radius 3;
		tag "$OBJECT_CLEAVER";
	}
	states {
		Spawn:
			VOXE L -1;
			loop;
	}
}
class SPETULA : PickupableDecoration {
	default {
		mass 150;
		height 5;
		radius 3;
		tag "$OBJECT_SPETULA";
	}
	states {
		Spawn:
			VOXE L -1;
			loop;
	}
}
class cuttingplankblue : SelacoActorStatic {
	default {
		height 5;
		radius 3;
		tag "$OBJECT_SPETULA";
	}
	states {
		Spawn:
			VOXE L -1;
			loop;
	}
}
class cuttingplankpurple : SelacoActorStatic {
	default {

	}
	states {
		Spawn:
			VOXE L -1;
			loop;
	}
}

class Metalpot : SelacoActor {
	actor lidActor;
	bool success;
	bool hasLid;

	bool spawnWithoutLid;

	mixin MEDIUM_METAL_PROP;

	override void PostBeginPlay()
	{
		super.postbeginPlay();
		if(!spawnWithoutLid)
		{
			[success, lidActor] = A_SPAWNITEMEX("Metalpotlid", 0,0, 9, flags:SXF_SETMASTER);
			hasLid = true;
		}
	}

	void spawnLid()
	{
		[success, lidActor] = A_SPAWNITEMEX("Metalpotlid", 0,0, 9, flags:SXF_SETMASTER);
		hasLid = true;		
	}

	default {
		friction 0.6;
		mass 150;
		Painchance 255;
		+SelacoActor.DecorativeActor;
		+SelacoActor.thruplayers;
		radius 9;
		height 9;
		+Buddha
		+SHOOTABLE
		PainSound "";
	}
	states {
		Spawn:
			TNT1 A 0;
			VOXE L -1;
			loop;
		// Player threw the lit back on!
		ReturnLid:
			TNT1 A 0
			{
				A_playSound("POT/LIDADD", CHAN_AUTO, 0.5, pitch:0.8);
				spawnLid();
			}
			goto spawn;
		Pain.shotgun:
		Pain.explosiveimpact:
			VOXE L 1;
			TNT1 A 0 A_SPAWNPROJECTILE("MetalpotProjectile", 12, 0, angle:-180, CMF_OFFSETPITCH , pitch:frandom(-10,-60));
			TNT1 A 0
			{
				if(hasLid)
				{
					A_SPAWNPROJECTILE("MetalpotLidProjectile", 12, 0, angle:-180, CMF_OFFSETPITCH , pitch:frandom(-10,-60));
					lidActor.destroy();
				}
			}
			stop;
		Pain:
			VOXE L 1;
			TNT1 A 0
			{

				// It there's a lid, only spawn the lid projectile
				if(hasLid)
				{
					A_SPAWNPROJECTILE("MetalpotLidProjectile", 12, 0, angle:-180, CMF_OFFSETPITCH , pitch:frandom(-10,-60));
					hasLid = false;
					lidActor.destroy();
				}
				else
				// If there is no lid, launch the pot instead
				{
					A_SPAWNPROJECTILE("MetalpotProjectile", 12, 0, angle:-180, CMF_OFFSETPITCH , pitch:frandom(-10,-60));
					destroy();
				}
				A_PLAYSOUND("impact/heavycrate", CHAN_AUTO, pitch:frandom(1.1,1.3));
			}
			goto spawn;
	}
}

class FRYINGPAN : PickupableDecoration {
	mixin MEDIUM_METAL_PROP;
	default {
		mass 150;
		+SELACOACTOR.decorativeActor;
		+SELACOACTOR.thruplayers;
		radius 7;
		height 4;
		PickupableDecoration.grabsound "POT/LIDGRAB";
		PickupableDecoration.landingSound "POT/LIDLAND";
	}
	states {
		Spawn:
			VOXE L -1;
			loop;
		Pain:
			VOXE L 1;
			TNT1 A 0 {
				A_SPAWNPROJECTILE("FRYINGPANPROJECTILE", 12, 0, angle:-180, CMF_OFFSETPITCH , pitch:frandom(-10,-60));
				A_PLAYSOUND("impact/heavycrate", CHAN_AUTO, pitch:frandom(1.1,1.3));
			}
			stop;
	}
}

class FRYINGPANPROJECTILE : SelacoActorDecorationMissile
{
	default 
	{
		BounceFactor 0.3;
		speed 10;
		friction 0.6;
		seesound "POT/LIDLAND";
	}
	states
	{
		death:
			TNT1 A 0;
			TNT1 A 0 
			{
				A_SPAWNITEMEX("FRYINGPAN");
			}
			stop;
	}
}

class MetalpotLid : PickupableDecoration
{

	override bool canCollideWith(Actor other, bool passive) {
		let stuff = Super.CanCollideWith(other, passive);
		let actor = MetalPot(other);
		// If actor has no lid, destroy yourself and give Metalpot a lid back.
        if(actor && isFalling && actor is "MetalPot" && !actor.hasLid) {
			actor.setStateLabeL("ReturnLid");
          	destroy();
        }
		return stuff;
	}

	default 
	{
		tag "$OBJECT_COOKINGPOTLID";
		radius 7;
		height 3;
		mass 150;
		friction 0.6;
		PickupableDecoration.grabsound "POT/LIDGRAB";
		PickupableDecoration.landingSound "POT/LIDLAND";
		+SelacoActor.decorativeActor
		+SelacoActor.thruplayers;
	}
	states
	{
		Spawn:
			VOXE L -1;
			stop;
		PickUp:
			TNT1 A 0 
			{
				isFalling = false;
				if((master) && master is "MetalPot")
				{
					MetalPot(master).hasLid = false;
				}
			}
			goto spawn;
		Pain:
			VOXE L 1;
			TNT1 A 0 {
				if((master) && master is "MetalPot")
				{
					MetalPot(master).hasLid = false;
				}
				A_SPAWNPROJECTILE("MetalpotLidProjectile", 12, 0, angle:-180, CMF_OFFSETPITCH , pitch:frandom(-10,-60));
			}
			stop;

	}
}
class MetalpotLidProjectile : SelacoActorDecorationMissile
{

	bool hitPot;
	override bool canCollideWith(Actor other, bool passive) {
		let stuff = Super.CanCollideWith(other, passive);
		let actor = MetalPot(other);
		// If actor has no lid, destroy yourself and give Metalpot a lid back.
        if(actor && actor is "MetalPot" && !actor.hasLid) {
			hitPot = true;
			actor.setStateLabeL("ReturnLid");
          	destroy();
			return 1;
        }
		return stuff;
	}

	default 
	{
		-ThruActors
		BounceFactor 0.7;
		speed 10;
		friction 0.6;
		seesound "POT/LIDLAND";
	}
	states
	{
		death:
			TNT1 A 0;
			TNT1 A 0 
			{
				if(!hitPot)
				{
					A_SpawnItemEx("MetalpotLid");
				}
			}
			stop;
	}
}

class MetalpotProjectile : SelacoActorDecorationMissile
{
	actor metalPotActor;
	bool success;
	default 
	{
		speed 10;
		+THRUACTORS
		BounceFactor 0.7;
		friction 0.6;
		seesound "POT/LIDLAND";
	}
	states
	{
		death:
			TNT1 A 0 
			{
				[success, metalPotActor] = A_SpawnItemEx("Metalpot");
				if((metalPotActor))
				{
					MetalPot(metalPotActor).spawnWithoutLid = true;
				}
			}
			stop;
	}
}

class Microwave : Interactable {

	const HAMBURGER_CHANCE = 25; // Chance for a burger to be inside a microwave

	default {
		+USESPECIAL;
		+SHOOTABLE
		+SOLID
		+SelacoActor.AllowGravityManipulation;
		mass 400;
		Activation THINGSPEC_SWITCH;
		Tag "$OBJECT_MICROWAVE";
		BloodType "Stacked_Sparks_Lite";
		health 12;
		height 24;
	}

	states {
		Inactive:
			TNT1 A 0 {
				A_PLAYSOUND("microwave/beep", CHAN_7, 0.35, pitch:0.9);
			}
		Spawn:
			TNT1 A 0;
			TNT1 A 0 {
				A_STOPSOUND(CHAN_6);
				bUseSpecial = true;
				usetag = "$INTERACT_TURNON";
				ActivationType = THINGSPEC_SWITCH;
			}
			VOXE L -1
			{
				bPreventSleep = false;
			}
			stop;
		Active:
			TNT1 A 0 {
				bPreventSleep = true;
				A_PLAYSOUND("microwave/beep",CHAN_7, 0.35);
				A_PLAYSOUND("microwave/loop", CHAN_6, 0.45, 1);
				usetag = "$INTERACT_TURNOFF";
			}
			VOXE A 190;
			TNT1 A 0 {
				A_PLAYSOUND("microwave/complete");
			}
			goto Spawn;
		Xdeath:
		Death:
			TNT1 A 0 {
				bUseSpecial = false;
				A_STOPSOUND(CHAN_6);
				A_PLAYSOUND("dest/glassm", CHAN_AUTO);
				ActivationType = THINGSPEC_DEFAULT;
				if(random(0,100) <= HAMBURGER_CHANCE)
				{
					actor burgerActor;
					bool succ;
					[succ, burgerActor] = A_SPAWNITEMEX("Burger1_bitten", 1,6, 9);
					if(burgerActor)
					{
						burgerActor.bNoGravity = true;
					}
				}
            	for(int i=0;i<12;i++) {
                    A_SPAWNITEMEX("LargeGlassParticle1", random(-3, 3), random(-9, 9), random(3, 40), random(-4, 4), random(-4, 4), random(3, 6));
                }
			}
			VOXE D -1;
			stop;
	}
}

class BrokenMicrowave : Microwave
{
	default
	{
		+BUDDHA
		tag "$OBJECT_BROKENMICROWAVE";
	}
	States
	{
		Spawn:
			VOXE L -1;
			stop;
		Inactive:
		Active:
			TNT1 A 0
			{
				A_PLAYSOUND("microwave/broken", CHAN_AUTO, 0.5);
			}
			VOXE LLLLL random(4,6)  {
				bUseSpecial = true;
				activationType = THINGSPEC_DEFAULT;
				A_SpawnItemEx("GunFireSmokeMassive", 0, 0, 0, 0, 0, 1);
				A_SpawnItemEx("GunFireSmokeMassive", 0, 0, 0, 0, 1, 1);
				A_SpawnProjectile ("SparkEmberUpward", 3, -3, random (0, 70), 2, random (0, 190));
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", frandom(-10,10), frandom(-25,25), frandom(0,25));
			}
			VOXE L 35;
			TNT1 A 0
			{
				A_PLAYSOUND("dest/JunctionBox", CHAN_AUTO);
			    A_PLAYSOUND("Sparks/Spawn", CHAN_AUTO);
				A_SPAWNITEMEX("SmallExplosion", frandom(-3,5), frandom(-10,10), frandom(0,10));
				A_SPAWNITEMEX("SmallExplosion", frandom(-3,5), frandom(-10,10), frandom(0,10));
                EmitDefinition('SparkOrbShorterDefinition', chance: 0.75, numTries: 6, angle:random(0,360), pitch:frandom(-90, 90), speed:frandom(0.3,0.6), velocity:(0,0,frandom(0,2)));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(0,3));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(-3,3));
                A_SpawnItemEx("PlasmaPuffMissile", 3, 0, 16, frandom(3,5), frandom(-4,4), frandom(-3,3));
				PlayerPawn pawn=players[0].mo;
				let d = Dawn(pawn);		
				if(CheckProximity("Dawn", 150))
				{
					if(getCvar("g_Screenshake") >= 1) {
						A_QuakeEx(1, 1, 1, 25, 0, 700, 0, 0, 0, 0, 0, 0, 2, 2, 4);
					}
					A_EXPLODE(10,100);
					d.applyStun(90);
				}		
			}
			VOXE L 120;
			VOXE L 1
			{
				A_SpawnProjectile ("SparkEmberUpward", 3, -3, random (0, 70), 2, random (0, 190));
                A_SpawnDefinedParticle("BulletImpactEffectMetalDefinition", frandom(-10,10), frandom(-25,25), frandom(0,25));
				A_PLAYSOUND("microwave/complete", CHAN_AUTO);
			}
		Death:
			VOXE L -1;
			stop;

	}
}