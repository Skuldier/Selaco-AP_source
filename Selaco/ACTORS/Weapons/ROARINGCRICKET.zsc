class AltFireCricketDoubleTap: WeaponAltFire {
	default {
		WeaponUpgrade.Weapon 'RoaringCricket';
		WeaponAltFire.WorkshopOrder			3;
		// TODO: Language
		WeaponUpgrade.UpgradeName 			"$ALTFIRE_CRICKET_DOUBLETAP", "$ALTFIRE_CRICKET_DOUBLETAP";
		WeaponUpgrade.UpgradeDescription 	"$ALTFIRE_CRICKET_DOUBLETAP_DESC";
		
	}
}

class AltFireCricketTripleTap: WeaponAltFire {
	default {
		WeaponUpgrade.Weapon 'RoaringCricket';
		WeaponAltFire.WorkshopOrder			4;
		// TODO: Language
		WeaponUpgrade.UpgradeName 			"$ALTFIRE_CRICKET_TRIPLETAP", "$ALTFIRE_CRICKET_TRIPLETAP";
		WeaponUpgrade.UpgradeDescription 	"$ALTFIRE_CRICKET_TRIPLETAP_DESC";
	}
}

class AltFireCricketZoom: WeaponAltFire {
	default {
		WeaponAltFire.WorkshopOrder			-1;		// Zoom should always be first
		WeaponUpgrade.Weapon 'RoaringCricket';
		// TODO: Language
		WeaponUpgrade.UpgradeName 			"$ALTFIRE_ZOOM", "$ALTFIRE_ZOOM";
		WeaponUpgrade.UpgradeDescription 	"$ALTFIRE_CRICKET_ZOOM_DESC";
	}
}

class UpgradeCricketExtendedMagazine : WeaponUpgrade {
	default {
		WeaponUpgrade.TechModuleRequirement 	1;
		WeaponUpgrade.UpgradeImage 			'UPGRD4';
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_EXTENDED_MAG", "$UPGRADE_EXTENDED_MAG_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_EXTENDED_MAG_CRICKET_DESC";
		WeaponUpgrade.UpgradePointerPosition 	630, 315;
		WeaponUpgrade.UpgradePosition			565, 460;
		WeaponUpgrade.MagazineSizeMod 			6;
	}	
}

class UpgradeCricketElephantRounds : WeaponUpgrade {
	override void onEnabled() {
		let w = getWeapon("RoaringCricket");
		if(w) w.lowAmmoThreshold = 1;
		Super.onEnabled();
	}

	override void onDisabled() {
		let w = getWeapon("RoaringCricket");
		if(w && !w.bDestroyed) w.lowAmmoThreshold = 4;
		Super.onDisabled();
	}
	
	default {
		WeaponUpgrade.UpgradeCost 	350;
		WeaponUpgrade.WorkshopCreditsCost 500;
		WeaponUpgrade.TechModuleRequirement 	3;
		WeaponUpgrade.UpgradeImage 			'UPGRD30';
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_ELEPHANT_CRICKET", "$UPGRADE_ELEPHANT_CRICKET_DESC";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_ELEPHANT_CRICKET_DESC";
		WeaponUpgrade.UpgradePointerPosition 	660, 235;
		WeaponUpgrade.UpgradePosition			770, 125;
		WeaponUpgrade.DamageMod				50;
		WeaponUpgrade.RecoilMod				4.5;
		WeaponUpgrade.FireRateMod			24;
		WeaponUpgrade.headshotMultiplierMod			1.1;
	}	
}

class UpgradeCricketKnockback : WeaponUpgrade {
	default {
		WeaponUpgrade.TechModuleRequirement 	0;
		WeaponUpgrade.UpgradeCost 	60;
		WeaponUpgrade.WorkshopCreditsCost 0;
		WeaponUpgrade.UpgradeImage 			'UPGRD21';
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_CRICKET_KNOCKBACK", "$UPGRADE_CRICKET_KNOCKBACK";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_CRICKET_KNOCKBACK_DESC";
		WeaponUpgrade.UpgradePointerPosition 	425, 40;
		WeaponUpgrade.UpgradePosition			505, -110;
	}	
}

class UpgradeCricketHairTrigger : WeaponUpgrade {
	default {
		WeaponUpgrade.TechModuleRequirement 	1;
		WeaponUpgrade.FireRateMod			-6;
		WeaponUpgrade.UpgradeCost 	250;
		WeaponUpgrade.UpgradeImage 			'UPGRD23';
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_CRICKET_HAIRTRIGGER", "$UPGRADE_CRICKET_HAIRTRIGGER";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_CRICKET_HAIRTRIGGER_DESC";
		WeaponUpgrade.UpgradePointerPosition 	455, 205;
		WeaponUpgrade.UpgradePosition			360, 355;
	}	
}

/* class UpgradeCricketArmorPiercer : WeaponUpgrade {
	default {
		WeaponUpgrade.TechModuleRequirement 	1;
		WeaponUpgrade.UpgradeCost 	200;
		WeaponUpgrade.UpgradeImage 			'UPGRD9';
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_PIERCING", "$UPGRADE_PIERCING_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_PIERCING_DESC";
		WeaponUpgrade.UpgradePointerPosition 	7, 130;
		WeaponUpgrade.UpgradePosition			-125, 265;
	}	
} */

class UpgradeCricketHeadshotDamage : WeaponUpgrade {
	default {
		WeaponUpgrade.UpgradeCost 	200;
		WeaponUpgrade.TechModuleRequirement 	2;
		WeaponUpgrade.UpgradeImage 			'UPGRD2';
		WeaponUpgrade.headshotMultiplierMod	0.6;
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradeName 			"$UPGRADE_CRICKET_HEADSHOT", "$UPGRADE_CRICKET_HEADSHOT_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_CRICKET_HEADSHOT_DESC";
		WeaponUpgrade.UpgradePointerPosition 	7, 80;
		WeaponUpgrade.UpgradePosition			-125, -75;
	}	
}


class UpgradeCricketRecoil : WeaponUpgrade {
	default {
		WeaponUpgrade.TechModuleRequirement 	3;
		WeaponUpgrade.UpgradeCost 	150;
		WeaponUpgrade.UpgradeImage 			'UPGRD5';
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradePointerPosition 	295, 25;
		WeaponUpgrade.UpgradePosition			190, -165;
		WeaponUpgrade.UpgradeName 			"$UPGRADE_CRICKET_RECOIL", "$UPGRADE_CRICKET_RECOIL_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_CRICKET_RECOIL_DESC";
		WeaponUpgrade.RecoilMod					-0.2;
	}	
}

class UpgradeCricketImpact : WeaponUpgrade {
	default {
		WeaponUpgrade.UpgradeCost 	300;
		WeaponUpgrade.TechModuleRequirement 	3;
		WeaponUpgrade.UpgradeImage 			'UPGRD11';
		WeaponUpgrade.DamageMod				5;
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradePointerPosition 	605, 46;
		WeaponUpgrade.UpgradePosition			745, -145;
		WeaponUpgrade.UpgradeName 			"$UPGRADE_CRICKET_IMPACT", "$UPGRADE_CRICKET_IMPACT_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_CRICKET_IMPACT_DESC";
	}	
}

class UpgradeCricketSplashDamage : WeaponUpgrade {
	default {
		WeaponUpgrade.UpgradeCost 	300;
		WeaponUpgrade.TechModuleRequirement 	4;
		WeaponUpgrade.UpgradeImage 			'UPGRD3';
		WeaponUpgrade.DamageMod				5;
		WeaponUpgrade.Weapon 				'RoaringCricket';
		WeaponUpgrade.UpgradePointerPosition 	160, 180;
		WeaponUpgrade.UpgradePosition			65, 330;
		WeaponUpgrade.UpgradeName 			"$UPGRADE_CRICKET_SPLASH", "$UPGRADE_CRICKET_SPLASH_LONG";
		WeaponUpgrade.UpgradeDescription 	"$UPGRADE_CRICKET_SPLASH_DESC";
	}	
}

class RoaringCricket : SelacoWeapon {

	override void PostBeginPlay() {
		Super.PostBeginPlay();
		setCrosshair('CricketCrosshair');
	}

	action void doAttackChecks() {
		// UPGRADES
			invoker.adjustedRecoil = invoker.weaponRecoil;
			invoker.adjustedSpread = invoker.weaponSpread;
			invoker.adjustedDamage = invoker.weaponDamage;

			if(checkIfZooming())
			{
				invoker.adjustedSpread = 0;
				invoker.adjustedRecoil += -0.325;
				if(invoker.adjustedRecoil <= 0)
				{
					invoker.adjustedRecoil += -0.05;
				}
			}
	}

	action void spawnTrailEffect() {
		int ofs_xy = 11;
		if(checkIfZooming() && getCvar("g_ironsights") == 1)
		{
			ofs_xy = 0;
		}
		int sparsityAmount = getCvar("r_particleIntensity");
		static const int sparsityRanges[] = {9, 7, 5, 3, 2};
		//spawnTrailEffects("RoaringCricketParticles", 50, 1900, sparsityRanges[sparsityAmount-1], -15, -10);
		A_RailAttack(-1, spawnofs_xy:ofs_xy, 1, flags:RGF_NOPIERCING, pufftype:"LaserSightProjectile", 0, spread_z:0, range:1900, sparsity:sparsityRanges[sparsityAmount-1], driftspeed:10, spawnClass:"RoaringCricketParticles");
	}

	action void doElephantRoundStuff()
	{
		invoker.hasElephantRounds = false;
		if(upgradeCheck("UpgradeCricketElephantRounds")) {invoker.hasElephantRounds = true; }

		if(invoker.hasElephantRounds) 	
		{
			if(countinv("PistolAmmo") <= 2)
			{
				setWeaponState("DryFireAnimation");
				return;
			}
			// Take extra ammo away
			invoker.TakeWeaponAmmo(2);
		}
	}

	int burstLength;
	bool magRemoved;
	bool spawnEmptyMag;
	bool zooming;

	bool hasHairTrigger;
	bool hasElephantRounds;

	const zoomAmount = 1.35;
	Default {
		SelacoWeapon.lowAmmoThreshold 4;
		SelacoWeapon.WeaponDamage 75;
		SelacoWeapon.weaponRecoil 1.1;
		SelacoWeapon.weaponSpread 0;
		SelacoWeapon.weaponKickback 0;
		SelacoWeapon.rumbleIntensity 0.6;
		SelacoWeapon.rumbleDeductionSpeed 0.3;
		SelacoWeapon.weaponFireRate 15;
		SelacoWeapon.VoxelDecorationModel "RoaringCricketModel";
		SelacoWeapon.weaponSound "Cricket/fire";
		SelacoWeapon.DryFireSound "ROARINGCRICKET/DRYFIRE";
		SelacoWeapon.readySound "weapon/cricket/select";
		SelacoWeapon.deselectSound "weapon/cricket/deselect";
		WeaponBase.AmmoUse1 0;
		WeaponBase.AmmoGive1 5;
		WeaponBase.AmmoUse2 0;
		WeaponBase.AmmoGive2 0;
		WeaponBase.SelectionOrder 100;
		WeaponBase.SlotNumber 1;
		SelacoWeapon.weaponStatistic	STAT_ROARINGCRICKET;
		SelacoWeapon.interactionSprite "ROR3";
		SelacoWeapon.SlidingSprite "ROR5";
		SelacoWeapon.MeleeSprite "ROR2";
		SelacoWeapon.ImagePrefix "pistol";
		SelacoWeapon.MagazineSize 9;
		SelacoWeapon.SupportsADS true;
		SelacoWeapon.AmmoColor "D9 A8 FF";
		SelacoWeapon.BulletDamageToGlass 200;
		SelacoWeapon.BulletForceToGlass 17;
		Inventory.Icon "WPNCRICK";
		+FLOORCLIP;
		+NOGRAVITY;
		+DONTGIB;
		Obituary "%o was shot down by %k's Pistol";
		AttackSound "None";
		Tag "$WEAPON_ROARINGCRICKET";
		WeaponBase.AmmoType1 "PistolReserve";
		WeaponBase.AmmoType2 "PistolAmmo";
		//Inventory.PickupSound "weapons/pistolup";
		Scale 0.80;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SPAWNITEMEX("ROARINGCRICKET_PICKUP");
			Stop;
		Precache:
			RORI A 0;
			ROR2 ABCDE 0;
			ROR6 ABC 0;	// Inspect weapon
			RORA AB 0;	// Fire
			ROR4 CD 0;	// Reload
			ROR3 ABCDEF 0; // Interaction
			ROZO ABCDEFGH 0;
			ROAZ ABCDEFGH 0;
			MUZA ABCDE 0;
			Stop;
		Equip:
			TNT1 A 0 A_SetCrosshair(66);
			TNT1 A 0 A_EquipNewWeapon();
			TNT1 A 0;
			TNT1 A 0 {
				invoker.checkLowAmmo();
				if (CountInv("inspectedRoaringCricket") == 0) {
					A_GiveInventory("inspectedRoaringCricket", 1);
					SetWeaponState("InspectWeapon");
				}
			}
			RORS ACDEFGH 1 S_WeaponReady();
			TNT1 AAAAAAA 0;
		

		Ready3:
			RORI A 1;
		ReallyReady:
			TNT1 A 0 A_SetCrosshair(66);
			TNT1 A 0 A_JumpIfInventory("ShowHands",1,"HandRemoved");
			TNT1 A 0 
			{
				//A_FireBulletsWithTrail(25, 32, 1, Spawnofs_xy:15);

				// Allow zooming if the player has 
				if(invoker.hasUpgradeClass("AltFireCricketZoom"))
				{
					// Is player zooming?
					if(checkIfZooming())
					{
						// Enter Iron Sight
						if(getCvar("g_ironsights") == 1)
						{
							SetWeaponState("ReallyReadyZoomedADS");
						}

						// Enter Regular
						else
						{
							SetWeaponState("ReallyReadyZoomed");
						}
					}
				// If player has no Zoom upgrade, cancel.
				}
				 else
				{
					invoker.isZooming = false;
				}
			}
			TNT1 A 1 
				{	
					breathWobble("RORI", 20);
					CheckPlayerStates();
					S_ZOOMFACTOR(1.0);
					S_WeaponReady(WRF_ALLOWRELOAD);
					S_WeaponOffset();
				}
			Goto ReallyReady+1;


		ReallyReadyZoomed:
			ROZO G 1 
			{
				A_ZOOMFACTOR(zoomAmount);
				CheckPlayerStates(1);
				CheckUnZoom();
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			}
			goto reallyReady;
		ReallyReadyZoomedADS:
			ROAZ H 1 
			{
				A_SetCrosshair(1);
				A_EnableWeaponShift(true, multiplier: 0.025);
				A_ZOOMFACTOR(zoomAmount);
				CheckPlayerStates(1);
				CheckUnZoom();
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			}
			goto reallyReady;

		Ready2:
			D3GG E 1 A_PlaySound("weapons/pistolup");

		InspectWeapon:
			ROR6 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYZZ 1 {
				CheckPlayerStates();
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			}
			ROR7 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXX 1 {
				CheckPlayerStates();
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			}
			TNT1 A 0 SetWeaponState("ReallyReady");

	ShatterWindow:
		TNT1 A 0 A_QuakeEx(5, 2, 2, 10, 0, 20, 0, 0, 10, 10, 10, 6, 2, 2);
		ROR5 AABBCC 1  {
				A_SetPitch(pitch + 0.5);
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			
		}
		ROR5 E 15  {
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
		}
		ROR5 CCBBAA 1  {
				A_SetPitch(pitch - 0.5);
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
		}
		goto Ready3;
	MoveGunDown:
		ROR5 ABCD 1 {
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
			
		}
		ROR5 D 10  {
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
		}
		ROR5 DCBA 3  {
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
		}
		goto Ready3;

		Unequip:	    
			TNT1 A 0 ACS_NamedExecute("AddHand", 0);
			TNT1 A 0 A_PlaySound("dawn/deselect", CHAN_AUTO);
			TNT1 A 0 {
				A_UNEQUIPWEAPON();
			}
			RORS HGFEDCBA 1 {
				A_ZOOMFACTOR(1.0);
			}
			TNT1 A 1;
			TNT1 AAAAAAAAAAAAAAAAAA 0 A_Lower();
			TNT1 A 1;
			Wait;

	// I just wasted 30 minutes on animating and coding a moving finger.
	// Thanks, @cockatrice. (You are welcome)
	DryFireAnimation:
		ROR8 ABCBA 1 {
			if(checkIfZooming()) {
				setWeaponState("ReallyReady");
				return;
			}
			invoker.isZooming = false;
			A_ZOOMFACTOR(1.0);
			S_WeaponReady();
			S_WeaponOffset();
		}
		goto RELOADWEAPON;

		ElephantFire:
		ROR8 ABCBA 1 {
			invoker.isZooming = false;
			A_ZOOMFACTOR(1.0);
			S_WeaponReady();
			S_WeaponOffset();
		}		
		goto ActuallyShoot;

		ScriptShot:
		Fire:
			TNT1 A 0 {
				invoker.hasElephantRounds = upgradeCheck("UpgradeCricketElephantRounds");
				if(invoker.hasElephantRounds)
				{
					if(checkIfZooming()) {
						if(getCvar("g_ironsights") == 1) {
							SetWeaponState("ZoomedElephantADS");
							return;
						}
						SetWeaponState("ZoomedElephant");
						return;
					}
					setWeaponState("ElephantFire");
					return;
				}
			}
		ActuallyShoot:
			TNT1 A 0 doElephantRoundStuff();
			TNT1 A 0 {
				if(!invoker.TakeWeaponAmmo()) {
					setWeaponState("DryfireAnimation");
					return;
				}
			}
			TNT1 A 0 {
				invoker.hasHairTrigger = false;
				if(upgradeCheck("UpgradeCricketHairTrigger")) {invoker.hasHairTrigger = true; }

				if(countinv("PistolAmmo") == 0) {
					A_PLAYSOUND("cricket/ping", CHAN_AUTO, 1.0, pitch:frandom(1.0,1.1));
				}
				invoker.playerIsFiring();
				doAttackChecks();
			}
			TNT1 A 0 
			{
				float pitchSound = frandom(0.8,0.95);
				if(invoker.hasElephantRounds)
				{
					pitchSound = frandom(0.7,0.8);
				}
				A_PlaySound(invoker.weaponSound,CHAN_AUTO, 1.0, 0, 1.0, false, pitchSound);
				A_PlaySound("cricket/fireFlavor",CHAN_AUTO, 0.6, 0, 1.0, false, pitchSound);
			}
			TNT1 A 0 {
				if(checkIfZooming())
				{
					SetWeaponState("FireZoomed");
				}
			}
			RORA A 0 {
				A_RECOIL(invoker.weaponKickback);
				if(!invoker.hasElephantRounds) {
					S_WeaponReady(WRF_ALLOWRELOAD);
				}
				S_WeaponOffset();
				if(random(0,100) <= 25)
				{
					A_PLAYSOUND("WEAPON/FIRSTPERSON/BULLETWHIZ", CHAN_AUTO, 0.9, pitch:1.0);
				}
				A_FireProjectile("GunFireSmoke", 0, 0, 0, 0, 0, 0);
			}
			TNT1 A 0 {
				switch(getCvar("g_screenshake")) {
					case 1:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 6, 6, 5);
						A_QuakeEx( 1, 2, 2, 6, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 8, 8, 8, 2, 0, 2);
						break;
					case 2:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 8, 8, 5);
						A_QuakeEx(2, 2, 2, 9, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 10, 10, 10, 3, 0, 3);
				}
			}
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 4, 0, 0, 0);
			TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 8, 0, 0, 0);
			TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 12, 0, 0, 0);
			TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 2, 0, 0, 0);

			// Tracer Effect
			TNT1 A 0 {
				spawnTrailEffect();
			}
		
			TNT1 A 0 A_FireProjectile("muzzleFlashSpawnerCricket",0,0,frandom(10,25),0);
			RORA A 1 {
				if(!invoker.hasElephantRounds) {
					S_WeaponReady(WRF_ALLOWRELOAD);
				}
				S_WeaponOffset();
				S_SelacoMuzzleFlash("MUZA", 0, frandom(0,0.25), xOffset:0, yOffset:0);
				FireBullets(invoker.adjustedSpread, invoker.adjustedSpread, -1, invoker.WeaponDamage, "HitPuffExtreme", flags:FBF_NORANDOM);
			}
			TNT1 A 0 S_ZOOMFACTOR(0.98);
			RORA A 1 {
				if(invoker.hasElephantRounds)
				{
					invoker.adjustedSpread*2;
				}
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				S_SelacoMuzzleFlash("MUZA", 0, frandom(0,0.25), xOffset:0, yOffset:0);
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				invoker.adjustedRecoil -= 0.1;
			}
			TNT1 A 0 S_ZOOMFACTOR(0.975);
			RORA B 1 {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				S_SelacoMuzzleFlash("MUZA", 1, frandom(0,0.25), xOffset:0, yOffset:0);
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				invoker.adjustedRecoil -= 0.1;
			}
			TNT1 A 0 S_ZOOMFACTOR(0.985);
			RORA B 1 {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				S_SelacoMuzzleFlash("MUZA", 2, frandom(0,0.25),0, xOffset:0, yOffset:0);
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				invoker.adjustedRecoil -= 0.1;
			}
			TNT1 A 0 S_ZOOMFACTOR(1.0);
			TNT1 A 0 {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			RORA C 1  {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				S_SelacoMuzzleFlash("MUZA", 3, frandom(0,0.25),0, xOffset:0, yOffset:0, fAlpha:0.75);
			}
/* 			TNT1 A 0 {
				switch(getCvar("g_screenshake")) {
					case 1:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 6, 6, 5);
						A_QuakeEx( 1, 1, 1, 3, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 8, 8, 8, 2, 0.5, 1);
						break;
					case 2:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 8, 8, 5);
						A_QuakeEx( 1, 2, 1, 5, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 10, 10, 10, 3, 0.5, 2);
				}
			} */
			RORA C 1 {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				S_SelacoMuzzleFlash("MUZA", 4, frandom(0,0.25),0, xOffset:0, yOffset:0, fAlpha:0.5);
			}
			RORA D 1  {
				S_SelacoMuzzleFlash("MUZA", 4, frandom(0,0.25),0, xOffset:0, yOffset:0, fAlpha:0.125);
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				A_FireProjectile("RoaringCricketCaseSpawn",5,0,9,7, 0, 18);
			}
			RORA E 1 {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			RORA F 1 {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			RORA G 1 {
				// Shoot from here if the player has Hair Trigger
				if(invoker.hasHairTrigger && !invoker.hasElephantRounds)
				{
					S_WeaponReady();
				}
				// Has Elephant, no ROF upgrade
				if(invoker.hasElephantRounds)
				{
					S_WeaponReady(WRF_NOFIRE);
				}
				S_WeaponOffset();
			}
			RORA H 1 {
				// Shoot from here if the player has Hair Trigger
				if(invoker.hasHairTrigger && !invoker.hasElephantRounds)
				{
					S_WeaponReady();
				}
				// Has Elephant, no ROF upgrade
				if(invoker.hasElephantRounds)
				{
					S_WeaponReady(WRF_NOFIRE);
				}
				// Has Elephant, no ROF upgrade
				if(invoker.hasElephantRounds && invoker.hasHairTrigger)
				{
					S_WeaponReady(WRF_NOFIRE);
				}
				S_WeaponOffset();
			}
			RORA I 1 {
				if(invoker.hasHairTrigger && !invoker.hasElephantRounds)
				{
					S_WeaponReady();
				}
				// Has Elephant, no ROF upgrade
				if(invoker.hasElephantRounds)
				{
					S_WeaponReady(WRF_NOFIRE);
				}
				S_WeaponOffset();
			}
			RORA JKLMNO 1 {
				if((invoker.hasHairTrigger && !invoker.hasElephantRounds) || !invoker.hasElephantRounds)
				{
					S_WeaponReady();
				}
				if(invoker.hasElephantRounds && invoker.hasHairTrigger)
				{
					S_WeaponReady(WRF_NOFIRE);
				}
				S_WeaponOffset();
				CheckPlayerStates();
			}
			RORA PQR 1 {
				S_WeaponReady();
				if(invoker.hasElephantRounds) 
				{
					S_WeaponReady(WRF_NOFIRE);
				}
				if(invoker.hasElephantRounds && invoker.hasHairTrigger)
				{
					S_WeaponReady();
				}

				S_WeaponOffset();
				CheckPlayerStates();
			}
			TNT1 A 0 S_WeaponReady(1);
			DEGG A 0 S_WeaponReady(1);
			//DEGG A 0 A_Refire
			Goto ReallyReady;

		ZoomedElephantADS:
			ROAZ H 6 S_WeapoNoffset(2, 0);
			goto ActuallyShoot;

		ZoomedElephant:
			ROZO G 6 S_WeapoNoffset(2, 0);
			goto ActuallyShoot;

		Firezoomed:
			ROAF A 0;
			ROZF A 0 {
				A_PLAYSOUND("weapon/mecha", CHAN_AUTO, 1.0, 0, 1.0, pitch:frandom(0.8,0.88));
				A_RECOIL(invoker.weaponKickback);
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
				invoker.weaponFrame = 0;
				A_FireProjectile("GunFireSmoke", 0, 0, 0, 0, 0, 0);
				if(getCvar("g_ironsights") == 1)
				{
					invoker.weaponSprite = "ROAF"; 
				}
				else
				{
					invoker.weaponSprite = "ROZF";
				}
				if(getCvar("g_ironsight") == 0) 
				{
					S_SelacoMuzzleFlash("MUZA", frandom(0,0.25), 0,0, xOffset:0, yOffset:0);
				}
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
			}
			TNT1 A 0 {
				switch(getCvar("g_screenshake")) {
					case 1:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 6, 6, 5);
						A_QuakeEx( 1, 2, 2, 8, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 8, 8, 8, 2, 0, 2);
						break;
					case 2:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 8, 8, 5);
						A_QuakeEx(2, 2, 2, 9, 0, 20, 0, QF_SCALEDOWN | QF_FULLINTENSITY, 10, 10, 10, 3, 0, 4);
				}
			}
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 4, 0, 0, 0);
			TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 8, 0, 0, 0);
			TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 12, 0, 0, 0);
			TNT1 A 0 A_FireProjectile("GunFireSmoke", 0, 0, 2, 0, 0, 0);

			// Tracer Effect
			TNT1 A 0 {
				spawnTrailEffect();
			}
		
			TNT1 A 0 A_FireProjectile("muzzleFlashSpawnerCricket",0,0,frandom(10,25),0);
			TNT1 B 1 {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_ALLOWRELOAD);
				S_WeaponOffset();
				if(getCvar("g_ironsights") == 0) 
				{
					S_SelacoMuzzleFlash("MUZA", frandom(0,0.25), 0,0, xOffset:0, yOffset:0);
				}
				FireBullets(invoker.adjustedSpread, invoker.adjustedSpread, -1, invoker.WeaponDamage, "HitPuffExtreme", flags:FBF_NORANDOM);
			}
			TNT1 A 0 S_ZOOMFACTOR(invoker.zoomAmount - 0.01);
			TNT1 A 0 {
			}
			TNT1 C 1 {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				if(getCvar("g_ironsights") == 0) 
				{
					S_SelacoMuzzleFlash("MUZA", frandom(0,0.25), 0,0, xOffset:0, yOffset:0);
				}
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				invoker.adjustedRecoil -= 0.1;
			}
			TNT1 A 0 S_ZOOMFACTOR(invoker.zoomAmount - 0.02);
			TNT1 D 1 {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				if(getCvar("g_ironsights") == 0) 
				{
					S_SelacoMuzzleFlash("MUZA", 1, 0,0, xOffset:0, yOffset:0);
				}
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				invoker.adjustedRecoil -= 0.1;
			}
			TNT1 A 0 S_ZOOMFACTOR(invoker.zoomAmount - 0.02);
			TNT1 D 1 {
				//invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				if(getCvar("g_ironsights") == 0) 
				{
					S_SelacoMuzzleFlash("MUZA", 2, 0,0, xOffset:0, yOffset:0);
				}
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				invoker.adjustedRecoil -= 0.4;
			}
			TNT1 A 0 S_ZOOMFACTOR(invoker.zoomAmount - 0.02);
			TNT1 A 0 {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			TNT1 A 0 S_ZOOMFACTOR(invoker.zoomAmount - 0.01);
			TNT1 E 1  {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOFIRE);
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				S_WeaponOffset();
				CheckPlayerStates(1);
				if(getCvar("g_ironsights") == 0) 
				{
					S_SelacoMuzzleFlash("MUZA", 3, 0,0, xOffset:0, yOffset:0);
				}
			}
			TNT1 A 0 S_ZOOMFACTOR(invoker.zoomAmount - 0.01);
			TNT1 E 1 {
				//invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				CheckPlayerStates(1);
				if(getCvar("g_ironsights") == 0) 
				{
					S_SelacoMuzzleFlash("MUZA", 5, 0,0, xOffset:0, yOffset:0);
				}
			}
			TNT1 A 0 S_ZOOMFACTOR(invoker.zoomAmount);
			TNT1 F 1  {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOPRIMARY);
				S_WeaponOffset();
				if(getCvar("g_ironsights") == 0) 
				{
					A_Overlay(-217, "flash1");
				}
				A_FireProjectile("RoaringCricketCaseSpawn",5,0,14,7, 0, 18);
			}
			TNT1 F 1 {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOPRIMARY);
				S_WeaponOffset();
			}
			TNT1 G 1 {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOPRIMARY);
				S_WeaponOffset();
			}
			TNT1 H 1 {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOPRIMARY);
				S_WeaponOffset();
			}
			TNT1 I 1 {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOPRIMARY);
				S_WeaponOffset();
			}
			TNT1 A 0 S_ZOOMFACTOR(invoker.zoomAmount);
			TNT1 JLN 1 {
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				CheckPlayerStates(1);
				CheckUnZoom();
				S_WeaponReady(WRF_NOPRIMARY);
				S_WeaponOffset();
				CheckPlayerStates(1);
			}
			TNT1 OP 1 {
				// Skip this part for ADS
				if(checkIfZooming())
				{
					A_SETTICS(0);
				} else
				{
					invoker.weaponFrame++;
				}
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				CheckPlayerStates(1);
				CheckUnZoom();
				S_WeaponReady(WRF_NOPRIMARY);
				S_WeaponOffset();
				CheckPlayerStates(1);
			}
			TNT1 A 0 
			{
				if(getCvar("g_ironsights") == 1)
				{
					invoker.weaponFrame+=2;
				}				
			}
			TNT1 QR 1 {
				invoker.weaponFrame++;
				if(getCvar("g_ironsights") == 1)
				{
					setWeaponState("FireADSContinue");
				}
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady();
				S_WeaponOffset();
				CheckPlayerStates(1);
			}
			//DEGG A 0 A_Refire
			Goto ReallyReadyZoomed;

		FireADSContinue:
			TNT1 AAA 1
			{
				invoker.weaponFrame++;
				X_SetOverlaySprite(1, invoker.weaponSprite, invoker.weaponFrame);
				S_WeaponReady(WRF_NOPRIMARY);
				S_WeaponOffset();
			}	
			goto ReallyReadyZoomedADS;	

	SwapZoom:
		TNT1 A 0 
		{
			// Stop zooming
			if(checkIfZooming())
			{
				// Check ADS Setting
				if(getCvar("g_ironsights") == 1)
				{
					SetWeaponState("StopZoomADS");
				}
				else
				{
					setWeaponState("StopZoom");
				}
			}
			// Start zooming 
			else
			{
				// Check ADS Setting
				if(getCvar("g_ironsights") == 1)
				{
					SetWeaponState("EnterZoomADS");
				}
				else
				{
					setWeaponState("EnterZoom");
				}
			}
		}

	// ZOOMING - TRADITIONAL
	StopZoom:
		TNT1 A 0 
		{
			A_PLAYSOUND("cricket/unzoom", CHAN_AUTO, 0.5);
			A_ZOOMFACTOR(1.0);
			invoker.isZooming = false;
		}
		ROZO ECBA 1;
		goto reallyready;		
	EnterZoom:
		TNT1 A 0 
		{
			A_PLAYSOUND("cricket/zoom", CHAN_AUTO, 0.5);
			A_ZOOMFACTOR(zoomAmount);
			invoker.isZooming = true;
		}
		ROZO ABCE 1;
		goto reallyready;

	// ZOOMING - ADS
	EnterZoomADS:
		TNT1 A 0 
		{
			A_SetCrosshair(1);
			A_EnableWeaponShift(false);
			A_PLAYSOUND("cricket/zoom", CHAN_AUTO, 0.5);
			A_ZOOMFACTOR(zoomAmount);
			invoker.isZooming = true;
		}
		ROAZ ABCDEFG 1;		
		goto reallyready;
	StopZoomADS:
		TNT1 A 0 
		{
			A_PLAYSOUND("cricket/unzoom", CHAN_AUTO, 0.5);
			A_ZOOMFACTOR(1.0);
			invoker.isZooming = false;
		}
		ROAZ GFEDCBA 1;		
		goto reallyready;
    AltFire:
		TNT1 A 0 {
			// Check for selected alt fires, adjust accordingly.
			if (altFireCheck("AltFireCricketDoubleTap")) {
				SetWeaponState("DoubleTapEnter");
			}
			if (altFireCheck("AltFireCricketTripleTap")) {
				SetWeaponState("TripleTapEnter");
			}
			if (altFireCheck("AltFireCricketZoom")) {
				SetWeaponState("SwapZoom");
			}
		}

		DoubleTapEnter:
			TNT1 A 0 A_JumpIfInventory("PistolAmmo",1,2);
			TNT1 A 0 setweaponstate("DryFireAnimation");
			Goto reloadweapon;
			TNT1 A 0 S_WeaponOffset();
			TNT1 A 0 {
				invoker.burstLength = 2;
			}
			goto BurstFire;
		TripleTapEnter:
			TNT1 A 0 A_JumpIfInventory("PistolAmmo",1,2);
			TNT1 A 0 setweaponstate("DryFireAnimation");
			Goto reloadweapon;
			TNT1 A 0 S_WeaponOffset();
			TNT1 A 0 {
				invoker.burstLength = 3;
			}
			goto BurstFire;
			
		BurstFire:
			//	Loop until burstLength depleted;
			//TNT1 A 0 A_PLAYSOUND("weapon/mecha", 2, 1.0);
			TNT1 A 0 A_JumpIfInventory("PistolAmmo",1,2);
			TNT1 A 0 setweaponstate("DryFireAnimation");
			Goto SalvoDone;	
			RORA A 0 A_FireProjectile("GunFireSmoke", 0, 0, 0, 0, 0, 0);
			TNT1 A 0 {
				doElephantRoundStuff();
			}
			TNT1 A 0 A_FireProjectile("muzzleFlashSpawnerCricket",0,0,frandom(10,25),0);
			TNT1 A 0 {
				invoker.playerIsFiring();
				doAttackChecks();
				switch(getCvar("g_screenshake")) {
					case 2:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 6, 6, 5);
						A_QuakeEx( 1, 1, 1, 15, 0, 20, 0, 0, 8, 8, 8, 2, 1, 1);
						break;
					case 1:
						ACS_NamedExecuteAlways("SpawnHudShake", 0, 8, 8, 5);
						A_QuakeEx( 1, 2, 2, 15, 0, 20, 0, 0, 10, 10, 10, 3, 1, 1);
				}
				invoker.TakeWeaponAmmo(flags:CAF_NODRYFIRE);
				if(countinv("PistolAmmo") == 0) {
					A_PLAYSOUND("cricket/ping", CHAN_AUTO, 1.0, pitch:frandom(1.0,1.1));
				}
			}
			TNT1 A 0 A_PlaySound(invoker.weaponSound,CHAN_AUTO, 1.0);
			RORA A 1 {
				A_RECOIL(invoker.weaponKickback);
				S_SelacoMuzzleFlash("MUZA", frandom(0,0.25), 0,0, xOffset:0, yOffset:0);
				FireBullets(0.1, 0.1, -1, invoker.weaponDamage, "HitPuffExtreme");
				A_FireProjectile("GunFireSmoke", 0, 0, 4, 0, 0, 0);
				A_FireProjectile("GunFireSmoke", 0, 0, 8, 0, 0, 0);
				A_FireProjectile("GunFireSmoke", 0, 0, 12, 0, 0, 0);
				A_FireProjectile("GunFireSmoke", 0, 0, 2, 0, 0, 0);
				spawnTrailEffect();
				S_ZOOMFACTOR(0.985);
				A_AlertMonsters();
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				invoker.adjustedRecoil -= 0.1;
			}
			
			
			RORA B 1 {
				S_SelacoMuzzleFlash("MUZA", 1, 0,0, xOffset:0, yOffset:0);
				S_ZOOMFACTOR(0.990);
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				invoker.adjustedRecoil -= 0.1;
			}
			RORA B 1 {
				A_SELACORECOIL(-1*invoker.adjustedRecoil, 0, frandom(-1*invoker.adjustedRecoil, invoker.adjustedRecoil));
				S_SelacoMuzzleFlash("MUZA", 2, 0,0, xOffset:0, yOffset:0);
				S_ZOOMFACTOR(0.995);
			}
			RORA C 1 {
				S_SelacoMuzzleFlash("MUZA", 3, 0,0, xOffset:0, yOffset:0);
				S_ZOOMFACTOR(0.995);
				A_FireProjectile("RoaringCricketCaseSpawn",5,0,14,7, 0, 18);
			}
			TNT1 A 0 {
				invoker.adjustedSpread = invoker.weaponRecoil;
				S_ZOOMFACTOR(1.0);
				invoker.burstLength--;
				if(invoker.burstLength <= 0) {
					SetWeaponState("SalvoDone");
					return;
				}
			}
			loop;

		SalvoDone:
			RORA D 1 {
				 A_Overlay(-217, "flash4");
			}
			RORA E 1 {
				 A_Overlay(-217, "flash5");
			}
			RORA F 1 {
				S_WeaponReady(WRF_NOFIRE);
			}
			RORA GHIJ 1 {
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
				CheckPlayerStates();
			}
			RORA KLMNOPR 1 {
				S_WeaponReady();
				S_WeaponOffset();
				CheckPlayerStates();
			}
			Goto ReallyReady;

		ReloadMagRemovedTransition:
			ROR4 CC 1;
			goto ReloadMagRemoved;

		ScriptReloadWeapon:
		ReloadWeapon:
			TNT1 A 0 S_WeaponReady(WRF_ALLOWRELOAD);
			TNT1 A 0 {
				if (invoker.magRemoved) {
					SetWeaponState("ReloadMagRemovedTransition");
				}
				doWeaponReload();
			}
			ROR4 CCDDFFG 1 {
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			ROR4 G 1 {
				A_Playsound("cricket/rel1", CHAN_AUTO, 0.65);
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			ROR4 HHJJ 1 {
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();				
			}
			TNT1 A 0 {
				invoker.spawnEmptyMag = false;
				if(countinv("pistolammo") == 0  || countinv("HardcoreMode") == 1) {
					invoker.spawnEmptyMag = true;
				}
				removeCurrentAmmo();
				invoker.magRemoved = true;
			}
		ReloadMagRemoved:
			ROR4 KKLLOOQQ 1 {
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			TNT1 A 0 {
				if(invoker.spawnEmptyMag) {
					A_FireProjectile("EmptyMagazineCricket",angle:random(85,96),useammo:0,spawnofs_xy:-2,spawnheight:-8, flags:0, pitch:10);
				}
			}
			ROR4 RR 1 {
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			ROR4 SST 1 {
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			TNT1 A 0 
			{
				A_PlaySound("cricket/rel2", CHAN_AUTO, 0.65);
			}
			ROR4 T 1 {
				insertNewAmmo();
				invoker.magRemoved = false;
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			ROR4 UUVVWWXXYYZZ 1 {
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			RO4A AACC 1 {
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			TNT1 A 0 {
				loadChamber();
			}
			RO4A EEFF 1 {
				CheckReloadCancelling();
				S_WeaponReady(WRF_NOFIRE);
				S_WeaponOffset();
			}
			TNT1 AA 0;
			goto ReallyReady;
		
	
	}
}

class CricketSplashDamageExplosion : SelacoActor {
	default {
		DamageType "BulletSplashDamage";
		+NOINTERACTION
	}
	states {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 S_EXPLODE(10, 70);
			stop;
	}
}

class RoaringCricketParticles : ShotgunParticles
{
	
    override void PostBeginPlay() {
        super.postbeginPlay();
		a_setroll(random(0,359));
        A_CHANGEVELOCITY(frandom(-0.4,0.4), frandom(-0.4,0.4), frandom(-0.4,0.4));
    }

	override void tick() {
		super.tick();
		scale*=0.96;
		vel*=0.9;
		A_FadeOut(0.03);
		A_CHANGEVELOCITY(frandom(-0.02,0.02), frandom(-0.02,0.02), frandom(-0.02,0.02));
		if(alpha <= 0) {
			destroy();
		}
	}

    default {
		+ROLLSPRITE
		+NOINTERACTION;
		+NOBLOCKMAP;
        speed 0;
        scale 0.030;
        Gravity 0.2;
    }
    States {
     Spawn:
            TNT1 A 0;
            RCPA A 1 Bright;
            loop;
     Death:
       Stop;
    }
}

class muzzleFlashSpawnerCricket : playerMuzzleFlash 
{
	default
	{
		PlayerMuzzleFlash.lightSize 125, 175;
	}
	// Called in beginPlay of playerMuzzleFlash
	override void SpawnLightEffect()
	{
		spawnLight(rColor:916, gColor:327, bColor:195, getLightSize(), 0, shadowRequirement:allowShadow, xOffset:random(-10,10),overbright: 3, divisionSpeed:1.75, alwaysShow:1, weaponFlash:1);
	}
}