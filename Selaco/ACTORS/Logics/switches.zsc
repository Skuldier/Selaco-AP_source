enum SWITCH_TYPES
{
    SWITCH_REPEATABLE = 0,
    SWITCH_ONETIMEUSE = 1,
}

class switch1 : Interactable {

    int trueArgs0; // Used to allow Strings to be used without breaking after loading older saves.

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        trueArgs0 = args[0];
        A_SETSIZE(scale.x*radius, scale.y*height);
    }

    string activationSound;
    void activatedSwitch() {
        if (args[3] == 0) {
            //activationSound = "servo/machineon";
        }
        usetag = StringTable.localize("$INTERACT_RAISE");
        A_PlaySound(activationSound, CHAN_AUTO, 1.0, 0, 1.0);
    }

    void deactivatedSwitch() {
        if (args[3] == 0) {
            //activationSound = "servo/machineoff";
        }
        usetag = StringTable.localize("$INTERACT_PULL");
        A_PlaySound(activationSound, CHAN_AUTO, 1.0, 0, 1.0);
    }

    void oneTimeUseSwitch() {
        if(args[2] == SWITCH_ONETIMEUSE) {
            bUseSpecial = false;
            activationtype = THINGSPEC_Default;   // Prevent the switch from being used again (will also hide from USE pop up)
        }
    }
    

    default {
        +NOGRAVITY
        +MOVEWITHSECTOR;
        +DONTTHRUST
        Tag "$OBJECT_LEVER";
        SelacoActor.UseTag "$INTERACT_PULL";
        -SelacoActor.UsableFromBack;
        -solid
        height 23;
        radius 8;
    	+USESPECIAL
        scale 0.8;
	    Activation THINGSPEC_Switch;
        
        +SELACOACTOR.SleepWhenIdle;
        -SELACOACTOR.WakeNearPlayer;
    }

    states {
        Spawn:
            SWI1 A 0 { bUseSpecial = true; }
            SWI1 A -1;
            loop;
        Hide:
            TNT1 A 0 { bUseSpecial = false; }
            TNT1 A -1;
            loop;
        Active:
            TNT1 A 0 A_PLAYSOUND("LEVER/SWITCH2DOWN");
            TNT1 A 0 oneTimeUseSwitch();
            TNT1 A 0 { bUseSpecial = false; bPreventSleep = true; }
            SWI1 BCD 2;
            TNT1 A 0 activatedSwitch();
            SWI1 E 10;
            TNT1 A 0 ACS_ExecuteAlways(trueArgs0, 0);
            SWI1 E 20;
            TNT1 A 0 { bUseSpecial = true; }
            TNT1 A 0 { bPreventSleep = false; }
            SWI1 E -1;
            loop;
        Inactive:
            TNT1 A 0 A_PLAYSOUND("LEVER/SWITCH2UP");
            TNT1 A 0 { bUseSpecial = false; bPreventSleep = true; }
            TNT1 A 0 oneTimeUseSwitch();
            SWI1 DCB 2;
            TNT1 A 0 deactivatedSwitch();
            SWI1 A 10;
            TNT1 A 0 ACS_ExecuteAlways(trueArgs0, 0);
            SWI1 A 20;
            TNT1 A 0 { bUseSpecial = true; bPreventSleep = false; }
            SWI1 A -1;
            loop;
    }
}

class Switch2 : switch1 {
    states {
        Spawn:
            TNT1 A 0 { bUseSpecial = true; }
            SWI2 A -1;
            loop;
        Hide:
            TNT1 A 0 { bUseSpecial = false; }
            TNT1 A -1;
            loop;
        Active:
            TNT1 A 0 A_PLAYSOUND("LEVER/SWITCH2DOWN");
            TNT1 A 0 { bUseSpecial = false; }
            TNT1 A 0 oneTimeUseSwitch();
            SWI2 BCD 2;
            TNT1 A 0 activatedSwitch();
            SWI2 E 10;
            TNT1 A 0 ACS_ExecuteAlways(args[0], 0);
            SWI2 E 20;
            TNT1 A 0 { bUseSpecial = true; }
            TNT1 A 0 { bPreventSleep = false; }
            SWI2 E -1;
            loop;
        Inactive:
            TNT1 A 0 A_PLAYSOUND("LEVER/SWITCH2UP");
            TNT1 A 0 { bUseSpecial = false; }
            TNT1 A 0 oneTimeUseSwitch();
            SWI2 DCB 2;
            SWI2 A 10;
            TNT1 A 0 ACS_ExecuteAlways(args[1], 0);
            SWI2 A 20;
            TNT1 A 0 deactivatedSwitch();
            TNT1 A 0 { bUseSpecial = true; bPreventSleep = false; }
            SWI2 A -1;
            loop;
    }
}

class BUTTON_GREEN : Interactable {
    int trueArgs0; // Used to allow Strings to be used without breaking after loading older saves.



    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        trueArgs0 = args[0];
        A_SETSIZE(scale.x*radius, scale.y*height);

		if(!!(SpawnFlags & MTF_DORMANT))
		{
			setStateLabel("Disabled");
		}

    }
    
    default {
        SelacoActor.UseTag "Push";
        tag "$OBJECT_BUTTON";
        -SelacoActor.UsableFromBack;
        +USESPECIAL;
        +DONTTHRUST
        +MOVEWITHSECTOR;
        +NOGRAVITY;
        mass 10000;
        Activation THINGSPEC_SWITCH;
    }
    states {
        ResetButton:
            TNT1 A 0 {
                A_PLAYSOUND("SCRIPT/PUSHBUTTON", CHAN_AUTO, 0.6, 0, 0.8, pitch:0.7);
                bUseSpecial = true;
                activationType = THINGSPEC_SWITCH;
            }
        Spawn:
            TNT1 A 0;
            TNT1 A 0
            {
                bUseSpecial = true;
                activationType = THINGSPEC_SWITCH;
            }
            VOXE L -1;
        Active:
            TNT1 A 0 {
                bUseSpecial = false;
                activationtype = THINGSPEC_DEFAULT;
                bPreventSleep = true;
            }
            TNT1 A 0 A_PLAYSOUND("SCRIPT/PUSHBUTTON", CHAN_AUTO, 0.8, 0, 0.8);
            VOXE M 15;
            TNT1 A 0 ACS_ExecuteAlways(args[0], 0);
            TNT1 A 0 { bPreventSleep = false; }
            VOXE M -1;
            stop;
        // Button cannot be activated.
        Disabled:
            TNT1 A 0 {
                bUseSpecial = false;
                activationtype = THINGSPEC_DEFAULT;
            }
            VOXE M -1;
    }
}

class BUTTON_HANDPRINT : BUTTON_GREEN { 
    void oneTimeUseSwitch() {
        if(args[1] == 1) {
            A_SETTICS(-1);
        }
    }
    states{
        Spawn:
            VOXE L -1 {
                bUseSpecial = true;
                activationtype = THINGSPEC_SWITCH;
                bPreventSleep = false;
            }
            loop;
        Inactive:
        Active:
        ActiceRestart:
            TNT1 A 0 {
                bUseSpecial = false;
                activationtype = THINGSPEC_DEFAULT;
                bPreventSleep = true;
            }
            TNT1 A 0 A_PLAYSOUND("SCRIPT/PUSHBUTTON", CHAN_AUTO, 1.0, 0, 0.8);
            TNT1 A 0 ACS_ExecuteAlways(args[0], 0);
            VOXE M 15;
            TNT1 A 0 A_PLAYSOUND("SCRIPT/PUSHBUTTON", CHAN_AUTO, 0.3, 0, pitch:0.8);
            VOXE M 1 {
                oneTimeUseSwitch();
            }
            TNT1 A 0 {
                bUseSpecial = true;
                activationtype = THINGSPEC_SWITCH;
            }
            goto Spawn;
        MakeUnusable:
            TNT1 A 0
            {
                bUseSpecial = false;
                activationtype = THINGSPEC_DEFAULT;
            }
        DisableButton:
            VOXE M -1 { bPreventSleep = false; }
            stop;
    }
}

class BUTTON_GREEN_SHOOTABLE : BUTTON_GREEN{
    override void PostBeginPlay() {
        super.PostBeginPlay();
        roll = random(12,17);
    }

    default {
        +SELACOACTOR.AIMASSIST
        +SHOOTABLE
        -BLOODSPLATTER
        +NOBLOODDECALS
        Painchance 255;
        SelacoActor.SleepDistance 1024;
        BloodType "Stacked_Sparks_lite","Stacked_Sparks_lite","Stacked_Sparks_lite";
    }
    states {
        Spawn:
            TNT1 A 0;
            VOXE LMMLML random(3,6);
            VOXE L random(10,16) {
                A_SPAWNITEMEX("SparksSmall", 5, 0, 8);
                actor sparkActor;
                bool succ;
                [succ, sparkActor] = A_SPAWNITEMEX("JunctionSparks", 4,frandom(-3,3), 8, angle:angle+35);
                if(sparkActor)
                {
                    sparkActor.angle-=25;
                    sparkActor.scale*=0.7;
                }
                A_SpawnProjectile ("Spark_UpOnceNoSound", 15, 0, 0, 2, random (0, 190));
            }
            loop;
        pain:  
            TNT1 A 0 ACS_ExecuteAlways(args[0], 0);
            TNT1 A 0 {
                activationType = THINGSPEC_Default;
                bUseSpecial = false;
                bNoPain = true;
            }
            VOXE L 1 {
                A_PLAYSOUND("SCRIPT/PUSHBUTTON", CHAN_AUTO, 1.0, 0, 0.8);
                A_PLAYSOUND("SCRIPT/PUSHBUTTON", CHAN_AUTO, 1.0, 0, 0.8);
            }
            VOXE M -1;
    }
}

class BUTTON_PURPLE : Interactable {

    override void DeActivate (Actor activator) {
        Activate(activator);
	}


    override void Activate (Actor activator) {
        if(activator.countinv("OMNI_PURPLECARD") == 1) {
            bUseSpecial = false;
            SetStateLabel("ButtonApproved");
        } else {
            A_PRINTBOLD("\c[PURPLE]Purple Card\c- required");
            A_PLAYSOUND("ui/consolefail");
        }
	}

    default {
        SelacoActor.UseTag "Push";
        -SelacoActor.UsableFromBack;
        tag "$OBJECT_BUTTON";
        +USESPECIAL;
        +MOVEWITHSECTOR;
        +DONTTHRUST
        +NOGRAVITY;
        mass 10000;
        Activation THINGSPEC_SWITCH;
    }
    states {
        Active:
        Inactive:
        Spawn:
            TNT1 A 0;
            VOXE L -1;
        ButtonApproved:
            TNT1 A 0 A_PLAYSOUND("SCRIPT/PUSHBUTTON", CHAN_AUTO, 1.0, 0, 0.8);
            TNT1 A 0 A_PLAYSOUND("SCRIPT/PUSHBUTTON", CHAN_AUTO, 1.0, 0, 0.8);
            TNT1 A 0 ACS_ExecuteAlways(args[0], 0);
            VOXE M -1 { bPreventSleep = false; }
            stop;
    }
}

class Keypad : Interactable
{
    string user_code;
    string keypadCode;
    int keypadSuccessScript;
    int keypadFailScript;

    KeypadIcon ki;

    actor icon;
    
    bool hasSeenPlayer;

    override void postBeginPlay()
    {
        if(user_code != "") keypadCode = user_code;
        else keypadCode = String.Format("%04d", args[0]);   // Will pad up to 4 zeroes. e.g. For 0451 just use 451

        keypadSuccessScript = args[1];
        keypadFailScript = args[2];
    }

    override void tick()
    {
        super.tick();
        if(!hasSeenPlayer && level.time % 5 == 0 && CheckProximity("Dawn", sleepdist))
        {
            spawnIcon();
        }
    }

    void spawnIcon()
    {
        // I'm such a nerd I moved this to a local var, otherwise we are saving this value in the savegame for no reason whatsoever. @cockatrice
        bool cockatriceIsANerd; 

        hasSeenPlayer = true;
        [cockatriceIsANerd, icon] = A_SPAWNITEMEX("KeypadIcon");
        if(icon && icon is "KeypadIcon")
        {
            ki = KeypadIcon(icon);
        }
    }

    void keypadSuccess()
    {
        if(args[1] == 0) {
            // TODO: This is a Debug message
            A_PRINTBOLD("\c[RED]This keypad is not connected to anything...");
        }

        ACS_execute(args[1], 0);
        if(ki)
        {
            ki.markComplete();
        }
        SetStateLabel("unlocked");

        // Dont need you no 'mo
        bUseSpecial = false;
        activationType = THINGSPEC_DEFAULT;
        sleepIndefinite();
    }

    void keypadFailure()
    {
        ACS_execute(args[2], 0);
    }

    override void Activate (Actor activator) {
        bUseSpecial = true;
        ActivationType = THINGSPEC_Switch;

        // Bring up keypad menu
        KeypadGlobalHandler.ShowKeypadForItem(activator, self);
    }

    default
    {
        -SHOOTABLE
        +USESPECIAL;
        +NOGRAVITY
        +DONTTHRUST
        +THRUACTORS;
        activation THINGSPEC_SWITCH;
        SelacoActor.sleepdistance 512;
    }
    states
    {
        Inactive:
        Active:
            TNT1 A 0
            {
                keypadSuccess();
            }
        Spawn:
            VOXE L -1;
            stop;
        Unlocked:
            VOXE A -1;
            stop;
    }
}